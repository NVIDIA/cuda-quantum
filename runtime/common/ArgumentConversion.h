/****************************************************************-*- C++ -*-****
 * Copyright (c) 2022 - 2024 NVIDIA Corporation & Affiliates.                  *
 * All rights reserved.                                                        *
 *                                                                             *
 * This source code and the accompanying materials are made available under    *
 * the terms of the Apache License 2.0 which accompanies this distribution.    *
 ******************************************************************************/

#pragma once

#include "cudaq/Optimizer/Dialect/CC/CCOps.h"
#include "cudaq/Optimizer/Dialect/CC/CCTypes.h"
#include "cudaq/qis/state.h"
#include "mlir/IR/Builders.h"
#include "mlir/IR/Types.h"

namespace cudaq::opt {

class StateData {
public:
  typedef void (*Deleter)(void *);
  void *data;
  Deleter deleter;
  std::size_t size;
  std::size_t elementSize;

  static StateData readStateData(const cudaq::state *state);

  StateData(void *data, std::size_t size, std::size_t elementSize,
            Deleter deleter)
      : data(data), deleter(deleter), size(size), elementSize(elementSize) {}

  ~StateData() { deleter(data); }
};

/// @brief Platform settings determine how to convert state pointers.
struct PlatformSettings {
  bool isRemote;
  bool isSimulator;
  PlatformSettings(bool isRemote = false, bool isSimulator = false)
      : isRemote(isRemote), isSimulator(isSimulator) {}
};

class ArgumentConverter {
public:
  /// Build an instance to create argument substitutions for a specified \p
  /// kernelName in \p sourceModule.
  ArgumentConverter(mlir::StringRef kernelName, mlir::ModuleOp sourceModule,
                    const PlatformSettings &platform = PlatformSettings());

  /// Generate a substitution ModuleOp for the vector of arguments presented.
  /// The arguments are those presented to the kernel, kernelName.
  void gen(const std::vector<void *> &arguments);

  /// Get the list of substitutions that were generated by `gen()`.
  mlir::SmallVector<cudaq::cc::ArgumentSubstitutionOp> &getSubstitutions() {
    return substitutions;
  }

  /// Some substitutions may generate global constant information. Use this
  /// interface to access both the substitutions and any global constants
  /// created.
  mlir::ModuleOp getSubstitutionModule() { return substModule; }

private:
  mlir::ModuleOp sourceModule;
  mlir::ModuleOp substModule;
  mlir::OpBuilder builder;
  mlir::StringRef kernelName;
  mlir::SmallVector<cc::ArgumentSubstitutionOp> substitutions;
  PlatformSettings platform;
};

} // namespace cudaq::opt

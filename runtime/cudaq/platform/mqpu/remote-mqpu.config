# ============================================================================ #
# Copyright (c) 2022 - 2023 NVIDIA Corporation & Affiliates.                   #
# All rights reserved.                                                         #
#                                                                              #
# This source code and the accompanying materials are made available under     #
# the terms of the Apache License 2.0 which accompanies this distribution.     #
# ============================================================================ #

msg=""

# Tell NVQ++ to generate glue code to set the target backend name
GEN_TARGET_BACKEND=true

# Use the MultiQPUPlatform
PLATFORM_LIBRARY=mqpu

# Use the RemoteSimulatorQPU, so make sure it auto-loads
LINKLIBS="${LINKLIBS} -lcudaq-remote-simulator-qpu"

# QPU subtype
PLATFORM_QPU=RemoteSimulatorQPU

COMPILER_FLAGS="$COMPILER_FLAGS -DCUDAQ_REMOTE_SIM"

if ${LIBRARY_MODE}; then
	# In library mode, we enforce that no custom fallback host compiler has been set via `cmake-host-compiler` option.
	# Note: even if another Clang-based compiler is set, we cannot guarantee that it is compatible with the LLVM version
	# that the CUDA Quantum runtime is compiled against. Hence, we don't support custom host compiler for this platform.
	if [[ "$CMAKE_FALLBACK_HOST_CXX" != "$CXX" ]]; then 
		error_exit "Using remote simulation target in library mode with a custom cmake-host-compiler is unsupported. Please use the default nvq++ host compiler or enable MLIR mode."
	fi 
	
	COMPILER_FLAGS="$COMPILER_FLAGS -fembed-bitcode=all"
	# Clang made "out of line atomics" the default on arm64 targets (https://reviews.llvm.org/D93585);
	# requiring to link against `libclang_rt.builtins` on the server side when JIT'ing. 
	# Hence, disable it when using the remote platform. 
	if [ "$(uname -m)" == "aarch64" ]; then
		COMPILER_FLAGS="$COMPILER_FLAGS -mno-outline-atomics"
	fi
	LINKER_FLAGS="$LINKER_FLAGS -rdynamic"
fi

PLATFORM_EXTRA_ARGS=""
# NB: extra arguments always take the form:
#   --<target>-<option> <value>
# as in
#   --remote-mqpu-backend foo
while [ $# -gt 1 ]; do
	case "$1" in
	--remote-mqpu-url)
		PLATFORM_EXTRA_ARGS="$PLATFORM_EXTRA_ARGS;url;$2"
		;;
	--remote-mqpu-backend)
		PLATFORM_EXTRA_ARGS="$PLATFORM_EXTRA_ARGS;backend;$2"
		;;
	# Auto launch (and shutdown) server processes (providing the number of instances)
	--remote-mqpu-auto-launch)
		PLATFORM_EXTRA_ARGS="$PLATFORM_EXTRA_ARGS;auto_launch;$2"
		;;
	esac
	shift 2
done

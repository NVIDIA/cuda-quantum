/****************************************************************-*- C++ -*-****
 * Copyright (c) 2022 - 2023 NVIDIA Corporation & Affiliates.                  *
 * All rights reserved.                                                        *
 *                                                                             *
 * This source code and the accompanying materials are made available under    *
 * the terms of the Apache License 2.0 which accompanies this distribution.    *
 ******************************************************************************/

#pragma once

#include "common/ExecutionContext.h"
#include "cudaq/platform.h"
#include <complex>
#include <vector>

namespace cudaq {

/// @brief The cudaq::state encapsulate backend simulation state
/// vector or density matrix data.
class state {

private:
  /// @brief Reference to the simulation data
  State data;

public:
  /// @brief The constructor, takes the simulation data
  state(State d) : data(d) {}

  /// @brief Return the data element at the given indices
  std::complex<double> operator[](std::size_t idx);
  std::complex<double> operator()(std::size_t idx, std::size_t jdx);

  /// @brief Dump the state to standard out
  void dump();
  void dump(std::ostream &os);

  /// @brief Compute the overlap of this state
  /// with the other one.
  double overlap(state &other);
};

namespace details {

/// @brief Execute the given kernel functor and extract the
/// state representation.
template <typename KernelFunctor>
state extractState(KernelFunctor &&kernel) {
  // Get the platform.
  auto &platform = cudaq::get_platform();

  // This can only be done in simulation
  if (!platform.is_simulator())
    throw std::runtime_error("Cannot use get_state on a physical QPU.");

  // Create an execution context, indicate this is for
  // extracting the state representation
  ExecutionContext context("extract-state");

  // Perform the usual pattern set the context,
  // execute and then reset
  platform.set_exec_ctx(&context);
  kernel();
  platform.reset_exec_ctx();

  // Return the state data.
  return state(context.simulationData);
}
} // namespace details

/// @brief Return the state representation generated by
/// the kernel at the given runtime arguments.
template <typename QuantumKernel, typename... Args>
auto get_state(QuantumKernel &&kernel, Args &&...args) {
  return details::extractState(
      [&kernel, ... args = std::forward<Args>(args)]() mutable {
        kernel(std::forward<Args>(args)...);
      });
}

} // namespace cudaq

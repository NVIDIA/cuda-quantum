[2024-09-09 20:01:42.254] [info] [PluginUtils.h:24] Requesting N5cudaq16quantum_platformE plugin via symbol name getQuantumPlatform.
[2024-09-09 20:01:42.254] [info] [PluginUtils.h:36] Successfully loaded the plugin.
[2024-09-09 20:01:42.285] [info] [MultiQPUPlatform.cpp:88] Config file path for target remote-mqpu = /usr/local/cudaq/targets/remote-mqpu.yml
[2024-09-09 20:01:42.289] [info] [BaseRemoteSimulatorQPU.h:220] BaseRemoteSimulatorQPU::setExecutionContext QPU 0
[2024-09-09 20:01:42.289] [info] [BaseRemoteSimulatorQPU.h:127] BaseRemoteSimulatorQPU: Launch kernel named 'test_state_param' remote QPU 0 (simulator = qpp)
[2024-09-09 20:01:42.291] [info] [BaseRestRemoteClient.h:185] Run Argument Synth.

module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_state_param(%arg0: !cc.ptr<!cc.state>, %arg1: !cc.charspan) attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 5.000000e-01 : f64
    %0 = call @__nvqpp_cudaq_state_numberOfQubits(%arg0) : (!cc.ptr<!cc.state>) -> i64
    %1 = quake.alloca !quake.veq<?>[%0 : i64]
    %2 = quake.init_state %1, %arg0 : (!quake.veq<?>, !cc.ptr<!cc.state>) -> !quake.veq<?>
    quake.exp_pauli %cst, %2, %arg1 : (f64, !quake.veq<?>, !cc.charspan) -> ()
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
}
[2024-09-09 20:01:42.292] [info] [BaseRemoteSimulatorQPU.h:220] BaseRemoteSimulatorQPU::setExecutionContext QPU 0
[2024-09-09 20:01:42.292] [info] [BaseRemoteSimulatorQPU.h:127] BaseRemoteSimulatorQPU: Launch kernel named 'test_init_state' remote QPU 0 (simulator = qpp)
// -----// IR Dump Before Canonicalizer (canonicalize) ('builtin.module' operation) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_init_state() attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 1.5707963267948966 : f64
    %0 = quake.alloca !quake.veq<2>
    %1 = quake.extract_ref %0[0] : (!quake.veq<2>) -> !quake.ref
    quake.ry (%cst) %1 : (f64, !quake.ref) -> ()
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
}


// -----// IR Dump Before ApplyControlNegations (apply-control-negations) ('func.func' operation: @__nvqpp__mlirgen__test_init_state) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_init_state() attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 1.5707963267948966 : f64
    %0 = quake.alloca !quake.veq<2>
    %1 = quake.extract_ref %0[0] : (!quake.veq<2>) -> !quake.ref
    quake.ry (%cst) %1 : (f64, !quake.ref) -> ()
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
}


// -----// IR Dump Before ConvertToDirectCalls (indirect-to-direct-calls) ('func.func' operation: @__nvqpp__mlirgen__test_init_state) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_init_state() attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 1.5707963267948966 : f64
    %0 = quake.alloca !quake.veq<2>
    %1 = quake.extract_ref %0[0] : (!quake.veq<2>) -> !quake.ref
    quake.ry (%cst) %1 : (f64, !quake.ref) -> ()
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
}


// -----// IR Dump Before ApplyControlNegations (apply-control-negations) ('func.func' operation: @__nvqpp_cudaq_state_numberOfQubits) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_init_state() attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 1.5707963267948966 : f64
    %0 = quake.alloca !quake.veq<2>
    %1 = quake.extract_ref %0[0] : (!quake.veq<2>) -> !quake.ref
    quake.ry (%cst) %1 : (f64, !quake.ref) -> ()
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
}


// -----// IR Dump Before ConvertToDirectCalls (indirect-to-direct-calls) ('func.func' operation: @__nvqpp_cudaq_state_numberOfQubits) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_init_state() attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 1.5707963267948966 : f64
    %0 = quake.alloca !quake.veq<2>
    %1 = quake.extract_ref %0[0] : (!quake.veq<2>) -> !quake.ref
    quake.ry (%cst) %1 : (f64, !quake.ref) -> ()
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
}


// -----// IR Dump Before ApplyControlNegations (apply-control-negations) ('func.func' operation: @streamlinedLaunchKernel) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_init_state() attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 1.5707963267948966 : f64
    %0 = quake.alloca !quake.veq<2>
    %1 = quake.extract_ref %0[0] : (!quake.veq<2>) -> !quake.ref
    quake.ry (%cst) %1 : (f64, !quake.ref) -> ()
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
}


// -----// IR Dump Before ConvertToDirectCalls (indirect-to-direct-calls) ('func.func' operation: @streamlinedLaunchKernel) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_init_state() attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 1.5707963267948966 : f64
    %0 = quake.alloca !quake.veq<2>
    %1 = quake.extract_ref %0[0] : (!quake.veq<2>) -> !quake.ref
    quake.ry (%cst) %1 : (f64, !quake.ref) -> ()
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
}


// -----// IR Dump Before ApplyControlNegations (apply-control-negations) ('func.func' operation: @cudaqRegisterKernelName) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_init_state() attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 1.5707963267948966 : f64
    %0 = quake.alloca !quake.veq<2>
    %1 = quake.extract_ref %0[0] : (!quake.veq<2>) -> !quake.ref
    quake.ry (%cst) %1 : (f64, !quake.ref) -> ()
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
}


// -----// IR Dump Before ConvertToDirectCalls (indirect-to-direct-calls) ('func.func' operation: @cudaqRegisterKernelName) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_init_state() attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 1.5707963267948966 : f64
    %0 = quake.alloca !quake.veq<2>
    %1 = quake.extract_ref %0[0] : (!quake.veq<2>) -> !quake.ref
    quake.ry (%cst) %1 : (f64, !quake.ref) -> ()
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
}


// -----// IR Dump Before ApplyControlNegations (apply-control-negations) ('func.func' operation: @cudaqRegisterArgsCreator) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_init_state() attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 1.5707963267948966 : f64
    %0 = quake.alloca !quake.veq<2>
    %1 = quake.extract_ref %0[0] : (!quake.veq<2>) -> !quake.ref
    quake.ry (%cst) %1 : (f64, !quake.ref) -> ()
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
}


// -----// IR Dump Before ConvertToDirectCalls (indirect-to-direct-calls) ('func.func' operation: @cudaqRegisterArgsCreator) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_init_state() attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 1.5707963267948966 : f64
    %0 = quake.alloca !quake.veq<2>
    %1 = quake.extract_ref %0[0] : (!quake.veq<2>) -> !quake.ref
    quake.ry (%cst) %1 : (f64, !quake.ref) -> ()
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
}


// -----// IR Dump Before ApplyControlNegations (apply-control-negations) ('func.func' operation: @malloc) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_init_state() attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 1.5707963267948966 : f64
    %0 = quake.alloca !quake.veq<2>
    %1 = quake.extract_ref %0[0] : (!quake.veq<2>) -> !quake.ref
    quake.ry (%cst) %1 : (f64, !quake.ref) -> ()
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
}


// -----// IR Dump Before ConvertToDirectCalls (indirect-to-direct-calls) ('func.func' operation: @malloc) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_init_state() attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 1.5707963267948966 : f64
    %0 = quake.alloca !quake.veq<2>
    %1 = quake.extract_ref %0[0] : (!quake.veq<2>) -> !quake.ref
    quake.ry (%cst) %1 : (f64, !quake.ref) -> ()
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
}


// -----// IR Dump Before ApplyControlNegations (apply-control-negations) ('func.func' operation: @free) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_init_state() attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 1.5707963267948966 : f64
    %0 = quake.alloca !quake.veq<2>
    %1 = quake.extract_ref %0[0] : (!quake.veq<2>) -> !quake.ref
    quake.ry (%cst) %1 : (f64, !quake.ref) -> ()
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
}


// -----// IR Dump Before ConvertToDirectCalls (indirect-to-direct-calls) ('func.func' operation: @free) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_init_state() attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 1.5707963267948966 : f64
    %0 = quake.alloca !quake.veq<2>
    %1 = quake.extract_ref %0[0] : (!quake.veq<2>) -> !quake.ref
    quake.ry (%cst) %1 : (f64, !quake.ref) -> ()
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
}


// -----// IR Dump Before ApplyControlNegations (apply-control-negations) ('func.func' operation: @__nvqpp_initializer_list_to_vector_bool) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_init_state() attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 1.5707963267948966 : f64
    %0 = quake.alloca !quake.veq<2>
    %1 = quake.extract_ref %0[0] : (!quake.veq<2>) -> !quake.ref
    quake.ry (%cst) %1 : (f64, !quake.ref) -> ()
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
}


// -----// IR Dump Before ConvertToDirectCalls (indirect-to-direct-calls) ('func.func' operation: @__nvqpp_initializer_list_to_vector_bool) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_init_state() attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 1.5707963267948966 : f64
    %0 = quake.alloca !quake.veq<2>
    %1 = quake.extract_ref %0[0] : (!quake.veq<2>) -> !quake.ref
    quake.ry (%cst) %1 : (f64, !quake.ref) -> ()
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
}


// -----// IR Dump Before ApplyControlNegations (apply-control-negations) ('func.func' operation: @__nvqpp_vector_bool_to_initializer_list) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_init_state() attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 1.5707963267948966 : f64
    %0 = quake.alloca !quake.veq<2>
    %1 = quake.extract_ref %0[0] : (!quake.veq<2>) -> !quake.ref
    quake.ry (%cst) %1 : (f64, !quake.ref) -> ()
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
}


// -----// IR Dump Before ConvertToDirectCalls (indirect-to-direct-calls) ('func.func' operation: @__nvqpp_vector_bool_to_initializer_list) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_init_state() attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 1.5707963267948966 : f64
    %0 = quake.alloca !quake.veq<2>
    %1 = quake.extract_ref %0[0] : (!quake.veq<2>) -> !quake.ref
    quake.ry (%cst) %1 : (f64, !quake.ref) -> ()
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
}


// -----// IR Dump Before ApplyControlNegations (apply-control-negations) ('func.func' operation: @llvm.memcpy.p0i8.p0i8.i64) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_init_state() attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 1.5707963267948966 : f64
    %0 = quake.alloca !quake.veq<2>
    %1 = quake.extract_ref %0[0] : (!quake.veq<2>) -> !quake.ref
    quake.ry (%cst) %1 : (f64, !quake.ref) -> ()
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
}


// -----// IR Dump Before ConvertToDirectCalls (indirect-to-direct-calls) ('func.func' operation: @llvm.memcpy.p0i8.p0i8.i64) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_init_state() attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 1.5707963267948966 : f64
    %0 = quake.alloca !quake.veq<2>
    %1 = quake.extract_ref %0[0] : (!quake.veq<2>) -> !quake.ref
    quake.ry (%cst) %1 : (f64, !quake.ref) -> ()
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
}


// -----// IR Dump Before Inliner (inline) ('builtin.module' operation) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_init_state() attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 1.5707963267948966 : f64
    %0 = quake.alloca !quake.veq<2>
    %1 = quake.extract_ref %0[0] : (!quake.veq<2>) -> !quake.ref
    quake.ry (%cst) %1 : (f64, !quake.ref) -> ()
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
}


// -----// IR Dump Before Canonicalizer (canonicalize) ('func.func' operation: @__nvqpp__mlirgen__test_init_state) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_init_state() attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 1.5707963267948966 : f64
    %0 = quake.alloca !quake.veq<2>
    %1 = quake.extract_ref %0[0] : (!quake.veq<2>) -> !quake.ref
    quake.ry (%cst) %1 : (f64, !quake.ref) -> ()
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
}


// -----// IR Dump Before CheckKernelCalls (check-kernel-calls) ('func.func' operation: @__nvqpp__mlirgen__test_init_state) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_init_state() attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 1.5707963267948966 : f64
    %0 = quake.alloca !quake.veq<2>
    %1 = quake.extract_ref %0[0] : (!quake.veq<2>) -> !quake.ref
    quake.ry (%cst) %1 : (f64, !quake.ref) -> ()
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
}


// -----// IR Dump Before CheckKernelCalls (check-kernel-calls) ('func.func' operation: @__nvqpp_cudaq_state_numberOfQubits) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_init_state() attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 1.5707963267948966 : f64
    %0 = quake.alloca !quake.veq<2>
    %1 = quake.extract_ref %0[0] : (!quake.veq<2>) -> !quake.ref
    quake.ry (%cst) %1 : (f64, !quake.ref) -> ()
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
}


// -----// IR Dump Before CheckKernelCalls (check-kernel-calls) ('func.func' operation: @streamlinedLaunchKernel) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_init_state() attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 1.5707963267948966 : f64
    %0 = quake.alloca !quake.veq<2>
    %1 = quake.extract_ref %0[0] : (!quake.veq<2>) -> !quake.ref
    quake.ry (%cst) %1 : (f64, !quake.ref) -> ()
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
}


// -----// IR Dump Before CheckKernelCalls (check-kernel-calls) ('func.func' operation: @cudaqRegisterKernelName) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_init_state() attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 1.5707963267948966 : f64
    %0 = quake.alloca !quake.veq<2>
    %1 = quake.extract_ref %0[0] : (!quake.veq<2>) -> !quake.ref
    quake.ry (%cst) %1 : (f64, !quake.ref) -> ()
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
}


// -----// IR Dump Before CheckKernelCalls (check-kernel-calls) ('func.func' operation: @cudaqRegisterArgsCreator) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_init_state() attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 1.5707963267948966 : f64
    %0 = quake.alloca !quake.veq<2>
    %1 = quake.extract_ref %0[0] : (!quake.veq<2>) -> !quake.ref
    quake.ry (%cst) %1 : (f64, !quake.ref) -> ()
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
}


// -----// IR Dump Before CheckKernelCalls (check-kernel-calls) ('func.func' operation: @malloc) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_init_state() attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 1.5707963267948966 : f64
    %0 = quake.alloca !quake.veq<2>
    %1 = quake.extract_ref %0[0] : (!quake.veq<2>) -> !quake.ref
    quake.ry (%cst) %1 : (f64, !quake.ref) -> ()
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
}


// -----// IR Dump Before CheckKernelCalls (check-kernel-calls) ('func.func' operation: @free) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_init_state() attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 1.5707963267948966 : f64
    %0 = quake.alloca !quake.veq<2>
    %1 = quake.extract_ref %0[0] : (!quake.veq<2>) -> !quake.ref
    quake.ry (%cst) %1 : (f64, !quake.ref) -> ()
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
}


// -----// IR Dump Before CheckKernelCalls (check-kernel-calls) ('func.func' operation: @__nvqpp_initializer_list_to_vector_bool) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_init_state() attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 1.5707963267948966 : f64
    %0 = quake.alloca !quake.veq<2>
    %1 = quake.extract_ref %0[0] : (!quake.veq<2>) -> !quake.ref
    quake.ry (%cst) %1 : (f64, !quake.ref) -> ()
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
}


// -----// IR Dump Before CheckKernelCalls (check-kernel-calls) ('func.func' operation: @__nvqpp_vector_bool_to_initializer_list) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_init_state() attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 1.5707963267948966 : f64
    %0 = quake.alloca !quake.veq<2>
    %1 = quake.extract_ref %0[0] : (!quake.veq<2>) -> !quake.ref
    quake.ry (%cst) %1 : (f64, !quake.ref) -> ()
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
}


// -----// IR Dump Before CheckKernelCalls (check-kernel-calls) ('func.func' operation: @llvm.memcpy.p0i8.p0i8.i64) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_init_state() attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 1.5707963267948966 : f64
    %0 = quake.alloca !quake.veq<2>
    %1 = quake.extract_ref %0[0] : (!quake.veq<2>) -> !quake.ref
    quake.ry (%cst) %1 : (f64, !quake.ref) -> ()
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
}


// -----// IR Dump Before Canonicalizer (canonicalize) ('builtin.module' operation) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_init_state() attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 1.5707963267948966 : f64
    %0 = quake.alloca !quake.veq<2>
    %1 = quake.extract_ref %0[0] : (!quake.veq<2>) -> !quake.ref
    quake.ry (%cst) %1 : (f64, !quake.ref) -> ()
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
}


// -----// IR Dump Before UnwindLowering (unwind-lowering) ('func.func' operation: @__nvqpp__mlirgen__test_init_state) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_init_state() attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 1.5707963267948966 : f64
    %0 = quake.alloca !quake.veq<2>
    %1 = quake.extract_ref %0[0] : (!quake.veq<2>) -> !quake.ref
    quake.ry (%cst) %1 : (f64, !quake.ref) -> ()
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
}


// -----// IR Dump Before UnwindLowering (unwind-lowering) ('func.func' operation: @__nvqpp_cudaq_state_numberOfQubits) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_init_state() attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 1.5707963267948966 : f64
    %0 = quake.alloca !quake.veq<2>
    %1 = quake.extract_ref %0[0] : (!quake.veq<2>) -> !quake.ref
    quake.ry (%cst) %1 : (f64, !quake.ref) -> ()
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
}


// -----// IR Dump Before UnwindLowering (unwind-lowering) ('func.func' operation: @streamlinedLaunchKernel) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_init_state() attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 1.5707963267948966 : f64
    %0 = quake.alloca !quake.veq<2>
    %1 = quake.extract_ref %0[0] : (!quake.veq<2>) -> !quake.ref
    quake.ry (%cst) %1 : (f64, !quake.ref) -> ()
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
}


// -----// IR Dump Before UnwindLowering (unwind-lowering) ('func.func' operation: @cudaqRegisterKernelName) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_init_state() attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 1.5707963267948966 : f64
    %0 = quake.alloca !quake.veq<2>
    %1 = quake.extract_ref %0[0] : (!quake.veq<2>) -> !quake.ref
    quake.ry (%cst) %1 : (f64, !quake.ref) -> ()
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
}


// -----// IR Dump Before UnwindLowering (unwind-lowering) ('func.func' operation: @cudaqRegisterArgsCreator) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_init_state() attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 1.5707963267948966 : f64
    %0 = quake.alloca !quake.veq<2>
    %1 = quake.extract_ref %0[0] : (!quake.veq<2>) -> !quake.ref
    quake.ry (%cst) %1 : (f64, !quake.ref) -> ()
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
}


// -----// IR Dump Before UnwindLowering (unwind-lowering) ('func.func' operation: @malloc) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_init_state() attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 1.5707963267948966 : f64
    %0 = quake.alloca !quake.veq<2>
    %1 = quake.extract_ref %0[0] : (!quake.veq<2>) -> !quake.ref
    quake.ry (%cst) %1 : (f64, !quake.ref) -> ()
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
}


// -----// IR Dump Before UnwindLowering (unwind-lowering) ('func.func' operation: @free) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_init_state() attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 1.5707963267948966 : f64
    %0 = quake.alloca !quake.veq<2>
    %1 = quake.extract_ref %0[0] : (!quake.veq<2>) -> !quake.ref
    quake.ry (%cst) %1 : (f64, !quake.ref) -> ()
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
}


// -----// IR Dump Before UnwindLowering (unwind-lowering) ('func.func' operation: @__nvqpp_initializer_list_to_vector_bool) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_init_state() attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 1.5707963267948966 : f64
    %0 = quake.alloca !quake.veq<2>
    %1 = quake.extract_ref %0[0] : (!quake.veq<2>) -> !quake.ref
    quake.ry (%cst) %1 : (f64, !quake.ref) -> ()
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
}


// -----// IR Dump Before UnwindLowering (unwind-lowering) ('func.func' operation: @__nvqpp_vector_bool_to_initializer_list) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_init_state() attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 1.5707963267948966 : f64
    %0 = quake.alloca !quake.veq<2>
    %1 = quake.extract_ref %0[0] : (!quake.veq<2>) -> !quake.ref
    quake.ry (%cst) %1 : (f64, !quake.ref) -> ()
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
}


// -----// IR Dump Before UnwindLowering (unwind-lowering) ('func.func' operation: @llvm.memcpy.p0i8.p0i8.i64) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_init_state() attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 1.5707963267948966 : f64
    %0 = quake.alloca !quake.veq<2>
    %1 = quake.extract_ref %0[0] : (!quake.veq<2>) -> !quake.ref
    quake.ry (%cst) %1 : (f64, !quake.ref) -> ()
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
}


// -----// IR Dump Before Canonicalizer (canonicalize) ('builtin.module' operation) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_init_state() attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 1.5707963267948966 : f64
    %0 = quake.alloca !quake.veq<2>
    %1 = quake.extract_ref %0[0] : (!quake.veq<2>) -> !quake.ref
    quake.ry (%cst) %1 : (f64, !quake.ref) -> ()
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
}


// -----// IR Dump Before ApplySpecialization (apply-op-specialization) ('builtin.module' operation) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_init_state() attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 1.5707963267948966 : f64
    %0 = quake.alloca !quake.veq<2>
    %1 = quake.extract_ref %0[0] : (!quake.veq<2>) -> !quake.ref
    quake.ry (%cst) %1 : (f64, !quake.ref) -> ()
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
}


// -----// IR Dump Before ExpandMeasurements (expand-measurements) ('builtin.module' operation) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_init_state() attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 1.5707963267948966 : f64
    %0 = quake.alloca !quake.veq<2>
    %1 = quake.extract_ref %0[0] : (!quake.veq<2>) -> !quake.ref
    quake.ry (%cst) %1 : (f64, !quake.ref) -> ()
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
}


// -----// IR Dump Before MemToReg (memtoreg) ('func.func' operation: @__nvqpp__mlirgen__test_init_state) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_init_state() attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 1.5707963267948966 : f64
    %0 = quake.alloca !quake.veq<2>
    %1 = quake.extract_ref %0[0] : (!quake.veq<2>) -> !quake.ref
    quake.ry (%cst) %1 : (f64, !quake.ref) -> ()
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
}


// -----// IR Dump Before MemToReg (memtoreg) ('func.func' operation: @__nvqpp_cudaq_state_numberOfQubits) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_init_state() attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 1.5707963267948966 : f64
    %0 = quake.alloca !quake.veq<2>
    %1 = quake.extract_ref %0[0] : (!quake.veq<2>) -> !quake.ref
    quake.ry (%cst) %1 : (f64, !quake.ref) -> ()
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
}


// -----// IR Dump Before MemToReg (memtoreg) ('func.func' operation: @streamlinedLaunchKernel) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_init_state() attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 1.5707963267948966 : f64
    %0 = quake.alloca !quake.veq<2>
    %1 = quake.extract_ref %0[0] : (!quake.veq<2>) -> !quake.ref
    quake.ry (%cst) %1 : (f64, !quake.ref) -> ()
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
}


// -----// IR Dump Before MemToReg (memtoreg) ('func.func' operation: @cudaqRegisterKernelName) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_init_state() attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 1.5707963267948966 : f64
    %0 = quake.alloca !quake.veq<2>
    %1 = quake.extract_ref %0[0] : (!quake.veq<2>) -> !quake.ref
    quake.ry (%cst) %1 : (f64, !quake.ref) -> ()
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
}


// -----// IR Dump Before MemToReg (memtoreg) ('func.func' operation: @cudaqRegisterArgsCreator) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_init_state() attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 1.5707963267948966 : f64
    %0 = quake.alloca !quake.veq<2>
    %1 = quake.extract_ref %0[0] : (!quake.veq<2>) -> !quake.ref
    quake.ry (%cst) %1 : (f64, !quake.ref) -> ()
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
}


// -----// IR Dump Before MemToReg (memtoreg) ('func.func' operation: @malloc) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_init_state() attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 1.5707963267948966 : f64
    %0 = quake.alloca !quake.veq<2>
    %1 = quake.extract_ref %0[0] : (!quake.veq<2>) -> !quake.ref
    quake.ry (%cst) %1 : (f64, !quake.ref) -> ()
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
}


// -----// IR Dump Before MemToReg (memtoreg) ('func.func' operation: @free) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_init_state() attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 1.5707963267948966 : f64
    %0 = quake.alloca !quake.veq<2>
    %1 = quake.extract_ref %0[0] : (!quake.veq<2>) -> !quake.ref
    quake.ry (%cst) %1 : (f64, !quake.ref) -> ()
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
}


// -----// IR Dump Before MemToReg (memtoreg) ('func.func' operation: @__nvqpp_initializer_list_to_vector_bool) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_init_state() attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 1.5707963267948966 : f64
    %0 = quake.alloca !quake.veq<2>
    %1 = quake.extract_ref %0[0] : (!quake.veq<2>) -> !quake.ref
    quake.ry (%cst) %1 : (f64, !quake.ref) -> ()
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
}


// -----// IR Dump Before MemToReg (memtoreg) ('func.func' operation: @__nvqpp_vector_bool_to_initializer_list) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_init_state() attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 1.5707963267948966 : f64
    %0 = quake.alloca !quake.veq<2>
    %1 = quake.extract_ref %0[0] : (!quake.veq<2>) -> !quake.ref
    quake.ry (%cst) %1 : (f64, !quake.ref) -> ()
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
}


// -----// IR Dump Before MemToReg (memtoreg) ('func.func' operation: @llvm.memcpy.p0i8.p0i8.i64) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_init_state() attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 1.5707963267948966 : f64
    %0 = quake.alloca !quake.veq<2>
    %1 = quake.extract_ref %0[0] : (!quake.veq<2>) -> !quake.ref
    quake.ry (%cst) %1 : (f64, !quake.ref) -> ()
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
}


// -----// IR Dump Before Canonicalizer (canonicalize) ('builtin.module' operation) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_init_state() attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 1.5707963267948966 : f64
    %0 = quake.alloca !quake.veq<2>
    %1 = quake.extract_ref %0[0] : (!quake.veq<2>) -> !quake.ref
    quake.ry (%cst) %1 : (f64, !quake.ref) -> ()
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
}


// -----// IR Dump Before CSE (cse) ('builtin.module' operation) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_init_state() attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 1.5707963267948966 : f64
    %0 = quake.alloca !quake.veq<2>
    %1 = quake.extract_ref %0[0] : (!quake.veq<2>) -> !quake.ref
    quake.ry (%cst) %1 : (f64, !quake.ref) -> ()
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
}


// -----// IR Dump Before QuakeAddDeallocs (add-dealloc) ('func.func' operation: @__nvqpp__mlirgen__test_init_state) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_init_state() attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 1.5707963267948966 : f64
    %0 = quake.alloca !quake.veq<2>
    %1 = quake.extract_ref %0[0] : (!quake.veq<2>) -> !quake.ref
    quake.ry (%cst) %1 : (f64, !quake.ref) -> ()
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
}


// -----// IR Dump After QuakeAddDeallocs (add-dealloc) ('func.func' operation: @__nvqpp__mlirgen__test_init_state) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_init_state() attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 1.5707963267948966 : f64
    %0 = quake.alloca !quake.veq<2>
    %1 = quake.extract_ref %0[0] : (!quake.veq<2>) -> !quake.ref
    quake.ry (%cst) %1 : (f64, !quake.ref) -> ()
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    quake.dealloc %0 : !quake.veq<2>
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
}


// -----// IR Dump Before QuakeAddMetadata (quake-add-metadata) ('func.func' operation: @__nvqpp__mlirgen__test_init_state) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_init_state() attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 1.5707963267948966 : f64
    %0 = quake.alloca !quake.veq<2>
    %1 = quake.extract_ref %0[0] : (!quake.veq<2>) -> !quake.ref
    quake.ry (%cst) %1 : (f64, !quake.ref) -> ()
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    quake.dealloc %0 : !quake.veq<2>
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
}


// -----// IR Dump Before QuakeAddDeallocs (add-dealloc) ('func.func' operation: @__nvqpp_cudaq_state_numberOfQubits) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_init_state() attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 1.5707963267948966 : f64
    %0 = quake.alloca !quake.veq<2>
    %1 = quake.extract_ref %0[0] : (!quake.veq<2>) -> !quake.ref
    quake.ry (%cst) %1 : (f64, !quake.ref) -> ()
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    quake.dealloc %0 : !quake.veq<2>
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
}


// -----// IR Dump Before QuakeAddMetadata (quake-add-metadata) ('func.func' operation: @__nvqpp_cudaq_state_numberOfQubits) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_init_state() attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 1.5707963267948966 : f64
    %0 = quake.alloca !quake.veq<2>
    %1 = quake.extract_ref %0[0] : (!quake.veq<2>) -> !quake.ref
    quake.ry (%cst) %1 : (f64, !quake.ref) -> ()
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    quake.dealloc %0 : !quake.veq<2>
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
}


// -----// IR Dump Before QuakeAddDeallocs (add-dealloc) ('func.func' operation: @streamlinedLaunchKernel) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_init_state() attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 1.5707963267948966 : f64
    %0 = quake.alloca !quake.veq<2>
    %1 = quake.extract_ref %0[0] : (!quake.veq<2>) -> !quake.ref
    quake.ry (%cst) %1 : (f64, !quake.ref) -> ()
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    quake.dealloc %0 : !quake.veq<2>
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
}


// -----// IR Dump Before QuakeAddMetadata (quake-add-metadata) ('func.func' operation: @streamlinedLaunchKernel) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_init_state() attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 1.5707963267948966 : f64
    %0 = quake.alloca !quake.veq<2>
    %1 = quake.extract_ref %0[0] : (!quake.veq<2>) -> !quake.ref
    quake.ry (%cst) %1 : (f64, !quake.ref) -> ()
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    quake.dealloc %0 : !quake.veq<2>
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
}


// -----// IR Dump Before QuakeAddDeallocs (add-dealloc) ('func.func' operation: @cudaqRegisterKernelName) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_init_state() attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 1.5707963267948966 : f64
    %0 = quake.alloca !quake.veq<2>
    %1 = quake.extract_ref %0[0] : (!quake.veq<2>) -> !quake.ref
    quake.ry (%cst) %1 : (f64, !quake.ref) -> ()
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    quake.dealloc %0 : !quake.veq<2>
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
}


// -----// IR Dump Before QuakeAddMetadata (quake-add-metadata) ('func.func' operation: @cudaqRegisterKernelName) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_init_state() attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 1.5707963267948966 : f64
    %0 = quake.alloca !quake.veq<2>
    %1 = quake.extract_ref %0[0] : (!quake.veq<2>) -> !quake.ref
    quake.ry (%cst) %1 : (f64, !quake.ref) -> ()
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    quake.dealloc %0 : !quake.veq<2>
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
}


// -----// IR Dump Before QuakeAddDeallocs (add-dealloc) ('func.func' operation: @cudaqRegisterArgsCreator) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_init_state() attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 1.5707963267948966 : f64
    %0 = quake.alloca !quake.veq<2>
    %1 = quake.extract_ref %0[0] : (!quake.veq<2>) -> !quake.ref
    quake.ry (%cst) %1 : (f64, !quake.ref) -> ()
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    quake.dealloc %0 : !quake.veq<2>
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
}


// -----// IR Dump Before QuakeAddMetadata (quake-add-metadata) ('func.func' operation: @cudaqRegisterArgsCreator) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_init_state() attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 1.5707963267948966 : f64
    %0 = quake.alloca !quake.veq<2>
    %1 = quake.extract_ref %0[0] : (!quake.veq<2>) -> !quake.ref
    quake.ry (%cst) %1 : (f64, !quake.ref) -> ()
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    quake.dealloc %0 : !quake.veq<2>
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
}


// -----// IR Dump Before QuakeAddDeallocs (add-dealloc) ('func.func' operation: @malloc) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_init_state() attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 1.5707963267948966 : f64
    %0 = quake.alloca !quake.veq<2>
    %1 = quake.extract_ref %0[0] : (!quake.veq<2>) -> !quake.ref
    quake.ry (%cst) %1 : (f64, !quake.ref) -> ()
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    quake.dealloc %0 : !quake.veq<2>
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
}


// -----// IR Dump Before QuakeAddMetadata (quake-add-metadata) ('func.func' operation: @malloc) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_init_state() attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 1.5707963267948966 : f64
    %0 = quake.alloca !quake.veq<2>
    %1 = quake.extract_ref %0[0] : (!quake.veq<2>) -> !quake.ref
    quake.ry (%cst) %1 : (f64, !quake.ref) -> ()
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    quake.dealloc %0 : !quake.veq<2>
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
}


// -----// IR Dump Before QuakeAddDeallocs (add-dealloc) ('func.func' operation: @free) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_init_state() attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 1.5707963267948966 : f64
    %0 = quake.alloca !quake.veq<2>
    %1 = quake.extract_ref %0[0] : (!quake.veq<2>) -> !quake.ref
    quake.ry (%cst) %1 : (f64, !quake.ref) -> ()
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    quake.dealloc %0 : !quake.veq<2>
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
}


// -----// IR Dump Before QuakeAddMetadata (quake-add-metadata) ('func.func' operation: @free) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_init_state() attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 1.5707963267948966 : f64
    %0 = quake.alloca !quake.veq<2>
    %1 = quake.extract_ref %0[0] : (!quake.veq<2>) -> !quake.ref
    quake.ry (%cst) %1 : (f64, !quake.ref) -> ()
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    quake.dealloc %0 : !quake.veq<2>
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
}


// -----// IR Dump Before QuakeAddDeallocs (add-dealloc) ('func.func' operation: @__nvqpp_initializer_list_to_vector_bool) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_init_state() attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 1.5707963267948966 : f64
    %0 = quake.alloca !quake.veq<2>
    %1 = quake.extract_ref %0[0] : (!quake.veq<2>) -> !quake.ref
    quake.ry (%cst) %1 : (f64, !quake.ref) -> ()
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    quake.dealloc %0 : !quake.veq<2>
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
}


// -----// IR Dump Before QuakeAddMetadata (quake-add-metadata) ('func.func' operation: @__nvqpp_initializer_list_to_vector_bool) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_init_state() attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 1.5707963267948966 : f64
    %0 = quake.alloca !quake.veq<2>
    %1 = quake.extract_ref %0[0] : (!quake.veq<2>) -> !quake.ref
    quake.ry (%cst) %1 : (f64, !quake.ref) -> ()
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    quake.dealloc %0 : !quake.veq<2>
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
}


// -----// IR Dump Before QuakeAddDeallocs (add-dealloc) ('func.func' operation: @__nvqpp_vector_bool_to_initializer_list) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_init_state() attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 1.5707963267948966 : f64
    %0 = quake.alloca !quake.veq<2>
    %1 = quake.extract_ref %0[0] : (!quake.veq<2>) -> !quake.ref
    quake.ry (%cst) %1 : (f64, !quake.ref) -> ()
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    quake.dealloc %0 : !quake.veq<2>
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
}


// -----// IR Dump Before QuakeAddMetadata (quake-add-metadata) ('func.func' operation: @__nvqpp_vector_bool_to_initializer_list) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_init_state() attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 1.5707963267948966 : f64
    %0 = quake.alloca !quake.veq<2>
    %1 = quake.extract_ref %0[0] : (!quake.veq<2>) -> !quake.ref
    quake.ry (%cst) %1 : (f64, !quake.ref) -> ()
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    quake.dealloc %0 : !quake.veq<2>
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
}


// -----// IR Dump Before QuakeAddDeallocs (add-dealloc) ('func.func' operation: @llvm.memcpy.p0i8.p0i8.i64) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_init_state() attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 1.5707963267948966 : f64
    %0 = quake.alloca !quake.veq<2>
    %1 = quake.extract_ref %0[0] : (!quake.veq<2>) -> !quake.ref
    quake.ry (%cst) %1 : (f64, !quake.ref) -> ()
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    quake.dealloc %0 : !quake.veq<2>
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
}


// -----// IR Dump Before QuakeAddMetadata (quake-add-metadata) ('func.func' operation: @llvm.memcpy.p0i8.p0i8.i64) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_init_state() attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 1.5707963267948966 : f64
    %0 = quake.alloca !quake.veq<2>
    %1 = quake.extract_ref %0[0] : (!quake.veq<2>) -> !quake.ref
    quake.ry (%cst) %1 : (f64, !quake.ref) -> ()
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    quake.dealloc %0 : !quake.veq<2>
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
}


// -----// IR Dump Before LoopNormalize (cc-loop-normalize) ('builtin.module' operation) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_init_state() attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 1.5707963267948966 : f64
    %0 = quake.alloca !quake.veq<2>
    %1 = quake.extract_ref %0[0] : (!quake.veq<2>) -> !quake.ref
    quake.ry (%cst) %1 : (f64, !quake.ref) -> ()
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    quake.dealloc %0 : !quake.veq<2>
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
}


// -----// IR Dump Before LoopUnroll (cc-loop-unroll) ('builtin.module' operation) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_init_state() attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 1.5707963267948966 : f64
    %0 = quake.alloca !quake.veq<2>
    %1 = quake.extract_ref %0[0] : (!quake.veq<2>) -> !quake.ref
    quake.ry (%cst) %1 : (f64, !quake.ref) -> ()
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    quake.dealloc %0 : !quake.veq<2>
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
}


// -----// IR Dump Before Canonicalizer (canonicalize) ('builtin.module' operation) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_init_state() attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 1.5707963267948966 : f64
    %0 = quake.alloca !quake.veq<2>
    %1 = quake.extract_ref %0[0] : (!quake.veq<2>) -> !quake.ref
    quake.ry (%cst) %1 : (f64, !quake.ref) -> ()
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    quake.dealloc %0 : !quake.veq<2>
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
}


// -----// IR Dump After Canonicalizer (canonicalize) ('builtin.module' operation) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_init_state() attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 1.5707963267948966 : f64
    %0 = quake.alloca !quake.veq<2>
    %1 = quake.extract_ref %0[0] : (!quake.veq<2>) -> !quake.ref
    quake.ry (%cst) %1 : (f64, !quake.ref) -> ()
    quake.dealloc %0 : !quake.veq<2>
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
}


// -----// IR Dump Before CSE (cse) ('builtin.module' operation) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_init_state() attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 1.5707963267948966 : f64
    %0 = quake.alloca !quake.veq<2>
    %1 = quake.extract_ref %0[0] : (!quake.veq<2>) -> !quake.ref
    quake.ry (%cst) %1 : (f64, !quake.ref) -> ()
    quake.dealloc %0 : !quake.veq<2>
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
}


// -----// IR Dump Before LowerToCFG (lower-to-cfg) ('func.func' operation: @__nvqpp__mlirgen__test_init_state) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_init_state() attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 1.5707963267948966 : f64
    %0 = quake.alloca !quake.veq<2>
    %1 = quake.extract_ref %0[0] : (!quake.veq<2>) -> !quake.ref
    quake.ry (%cst) %1 : (f64, !quake.ref) -> ()
    quake.dealloc %0 : !quake.veq<2>
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
}


// -----// IR Dump Before CombineQuantumAllocations (combine-quantum-alloc) ('func.func' operation: @__nvqpp__mlirgen__test_init_state) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_init_state() attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 1.5707963267948966 : f64
    %0 = quake.alloca !quake.veq<2>
    %1 = quake.extract_ref %0[0] : (!quake.veq<2>) -> !quake.ref
    quake.ry (%cst) %1 : (f64, !quake.ref) -> ()
    quake.dealloc %0 : !quake.veq<2>
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
}


// -----// IR Dump After CombineQuantumAllocations (combine-quantum-alloc) ('func.func' operation: @__nvqpp__mlirgen__test_init_state) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_init_state() attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %c0_i64 = arith.constant 0 : i64
    %c1_i64 = arith.constant 1 : i64
    %cst = arith.constant 1.5707963267948966 : f64
    %0 = quake.alloca !quake.veq<2>
    %1 = quake.subveq %0, %c0_i64, %c1_i64 : (!quake.veq<2>, i64, i64) -> !quake.veq<2>
    %2 = quake.extract_ref %0[%c0_i64] : (!quake.veq<2>, i64) -> !quake.ref
    quake.ry (%cst) %2 : (f64, !quake.ref) -> ()
    quake.dealloc %0 : !quake.veq<2>
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
}


// -----// IR Dump Before LowerToCFG (lower-to-cfg) ('func.func' operation: @__nvqpp_cudaq_state_numberOfQubits) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_init_state() attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %c0_i64 = arith.constant 0 : i64
    %c1_i64 = arith.constant 1 : i64
    %cst = arith.constant 1.5707963267948966 : f64
    %0 = quake.alloca !quake.veq<2>
    %1 = quake.subveq %0, %c0_i64, %c1_i64 : (!quake.veq<2>, i64, i64) -> !quake.veq<2>
    %2 = quake.extract_ref %0[%c0_i64] : (!quake.veq<2>, i64) -> !quake.ref
    quake.ry (%cst) %2 : (f64, !quake.ref) -> ()
    quake.dealloc %0 : !quake.veq<2>
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
}


// -----// IR Dump Before CombineQuantumAllocations (combine-quantum-alloc) ('func.func' operation: @__nvqpp_cudaq_state_numberOfQubits) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_init_state() attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %c0_i64 = arith.constant 0 : i64
    %c1_i64 = arith.constant 1 : i64
    %cst = arith.constant 1.5707963267948966 : f64
    %0 = quake.alloca !quake.veq<2>
    %1 = quake.subveq %0, %c0_i64, %c1_i64 : (!quake.veq<2>, i64, i64) -> !quake.veq<2>
    %2 = quake.extract_ref %0[%c0_i64] : (!quake.veq<2>, i64) -> !quake.ref
    quake.ry (%cst) %2 : (f64, !quake.ref) -> ()
    quake.dealloc %0 : !quake.veq<2>
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
}


// -----// IR Dump Before LowerToCFG (lower-to-cfg) ('func.func' operation: @streamlinedLaunchKernel) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_init_state() attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %c0_i64 = arith.constant 0 : i64
    %c1_i64 = arith.constant 1 : i64
    %cst = arith.constant 1.5707963267948966 : f64
    %0 = quake.alloca !quake.veq<2>
    %1 = quake.subveq %0, %c0_i64, %c1_i64 : (!quake.veq<2>, i64, i64) -> !quake.veq<2>
    %2 = quake.extract_ref %0[%c0_i64] : (!quake.veq<2>, i64) -> !quake.ref
    quake.ry (%cst) %2 : (f64, !quake.ref) -> ()
    quake.dealloc %0 : !quake.veq<2>
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
}


// -----// IR Dump Before CombineQuantumAllocations (combine-quantum-alloc) ('func.func' operation: @streamlinedLaunchKernel) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_init_state() attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %c0_i64 = arith.constant 0 : i64
    %c1_i64 = arith.constant 1 : i64
    %cst = arith.constant 1.5707963267948966 : f64
    %0 = quake.alloca !quake.veq<2>
    %1 = quake.subveq %0, %c0_i64, %c1_i64 : (!quake.veq<2>, i64, i64) -> !quake.veq<2>
    %2 = quake.extract_ref %0[%c0_i64] : (!quake.veq<2>, i64) -> !quake.ref
    quake.ry (%cst) %2 : (f64, !quake.ref) -> ()
    quake.dealloc %0 : !quake.veq<2>
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
}


// -----// IR Dump Before LowerToCFG (lower-to-cfg) ('func.func' operation: @cudaqRegisterKernelName) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_init_state() attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %c0_i64 = arith.constant 0 : i64
    %c1_i64 = arith.constant 1 : i64
    %cst = arith.constant 1.5707963267948966 : f64
    %0 = quake.alloca !quake.veq<2>
    %1 = quake.subveq %0, %c0_i64, %c1_i64 : (!quake.veq<2>, i64, i64) -> !quake.veq<2>
    %2 = quake.extract_ref %0[%c0_i64] : (!quake.veq<2>, i64) -> !quake.ref
    quake.ry (%cst) %2 : (f64, !quake.ref) -> ()
    quake.dealloc %0 : !quake.veq<2>
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
}


// -----// IR Dump Before CombineQuantumAllocations (combine-quantum-alloc) ('func.func' operation: @cudaqRegisterKernelName) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_init_state() attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %c0_i64 = arith.constant 0 : i64
    %c1_i64 = arith.constant 1 : i64
    %cst = arith.constant 1.5707963267948966 : f64
    %0 = quake.alloca !quake.veq<2>
    %1 = quake.subveq %0, %c0_i64, %c1_i64 : (!quake.veq<2>, i64, i64) -> !quake.veq<2>
    %2 = quake.extract_ref %0[%c0_i64] : (!quake.veq<2>, i64) -> !quake.ref
    quake.ry (%cst) %2 : (f64, !quake.ref) -> ()
    quake.dealloc %0 : !quake.veq<2>
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
}


// -----// IR Dump Before LowerToCFG (lower-to-cfg) ('func.func' operation: @cudaqRegisterArgsCreator) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_init_state() attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %c0_i64 = arith.constant 0 : i64
    %c1_i64 = arith.constant 1 : i64
    %cst = arith.constant 1.5707963267948966 : f64
    %0 = quake.alloca !quake.veq<2>
    %1 = quake.subveq %0, %c0_i64, %c1_i64 : (!quake.veq<2>, i64, i64) -> !quake.veq<2>
    %2 = quake.extract_ref %0[%c0_i64] : (!quake.veq<2>, i64) -> !quake.ref
    quake.ry (%cst) %2 : (f64, !quake.ref) -> ()
    quake.dealloc %0 : !quake.veq<2>
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
}


// -----// IR Dump Before CombineQuantumAllocations (combine-quantum-alloc) ('func.func' operation: @cudaqRegisterArgsCreator) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_init_state() attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %c0_i64 = arith.constant 0 : i64
    %c1_i64 = arith.constant 1 : i64
    %cst = arith.constant 1.5707963267948966 : f64
    %0 = quake.alloca !quake.veq<2>
    %1 = quake.subveq %0, %c0_i64, %c1_i64 : (!quake.veq<2>, i64, i64) -> !quake.veq<2>
    %2 = quake.extract_ref %0[%c0_i64] : (!quake.veq<2>, i64) -> !quake.ref
    quake.ry (%cst) %2 : (f64, !quake.ref) -> ()
    quake.dealloc %0 : !quake.veq<2>
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
}


// -----// IR Dump Before LowerToCFG (lower-to-cfg) ('func.func' operation: @malloc) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_init_state() attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %c0_i64 = arith.constant 0 : i64
    %c1_i64 = arith.constant 1 : i64
    %cst = arith.constant 1.5707963267948966 : f64
    %0 = quake.alloca !quake.veq<2>
    %1 = quake.subveq %0, %c0_i64, %c1_i64 : (!quake.veq<2>, i64, i64) -> !quake.veq<2>
    %2 = quake.extract_ref %0[%c0_i64] : (!quake.veq<2>, i64) -> !quake.ref
    quake.ry (%cst) %2 : (f64, !quake.ref) -> ()
    quake.dealloc %0 : !quake.veq<2>
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
}


// -----// IR Dump Before CombineQuantumAllocations (combine-quantum-alloc) ('func.func' operation: @malloc) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_init_state() attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %c0_i64 = arith.constant 0 : i64
    %c1_i64 = arith.constant 1 : i64
    %cst = arith.constant 1.5707963267948966 : f64
    %0 = quake.alloca !quake.veq<2>
    %1 = quake.subveq %0, %c0_i64, %c1_i64 : (!quake.veq<2>, i64, i64) -> !quake.veq<2>
    %2 = quake.extract_ref %0[%c0_i64] : (!quake.veq<2>, i64) -> !quake.ref
    quake.ry (%cst) %2 : (f64, !quake.ref) -> ()
    quake.dealloc %0 : !quake.veq<2>
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
}


// -----// IR Dump Before LowerToCFG (lower-to-cfg) ('func.func' operation: @free) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_init_state() attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %c0_i64 = arith.constant 0 : i64
    %c1_i64 = arith.constant 1 : i64
    %cst = arith.constant 1.5707963267948966 : f64
    %0 = quake.alloca !quake.veq<2>
    %1 = quake.subveq %0, %c0_i64, %c1_i64 : (!quake.veq<2>, i64, i64) -> !quake.veq<2>
    %2 = quake.extract_ref %0[%c0_i64] : (!quake.veq<2>, i64) -> !quake.ref
    quake.ry (%cst) %2 : (f64, !quake.ref) -> ()
    quake.dealloc %0 : !quake.veq<2>
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
}


// -----// IR Dump Before CombineQuantumAllocations (combine-quantum-alloc) ('func.func' operation: @free) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_init_state() attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %c0_i64 = arith.constant 0 : i64
    %c1_i64 = arith.constant 1 : i64
    %cst = arith.constant 1.5707963267948966 : f64
    %0 = quake.alloca !quake.veq<2>
    %1 = quake.subveq %0, %c0_i64, %c1_i64 : (!quake.veq<2>, i64, i64) -> !quake.veq<2>
    %2 = quake.extract_ref %0[%c0_i64] : (!quake.veq<2>, i64) -> !quake.ref
    quake.ry (%cst) %2 : (f64, !quake.ref) -> ()
    quake.dealloc %0 : !quake.veq<2>
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
}


// -----// IR Dump Before LowerToCFG (lower-to-cfg) ('func.func' operation: @__nvqpp_initializer_list_to_vector_bool) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_init_state() attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %c0_i64 = arith.constant 0 : i64
    %c1_i64 = arith.constant 1 : i64
    %cst = arith.constant 1.5707963267948966 : f64
    %0 = quake.alloca !quake.veq<2>
    %1 = quake.subveq %0, %c0_i64, %c1_i64 : (!quake.veq<2>, i64, i64) -> !quake.veq<2>
    %2 = quake.extract_ref %0[%c0_i64] : (!quake.veq<2>, i64) -> !quake.ref
    quake.ry (%cst) %2 : (f64, !quake.ref) -> ()
    quake.dealloc %0 : !quake.veq<2>
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
}


// -----// IR Dump Before CombineQuantumAllocations (combine-quantum-alloc) ('func.func' operation: @__nvqpp_initializer_list_to_vector_bool) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_init_state() attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %c0_i64 = arith.constant 0 : i64
    %c1_i64 = arith.constant 1 : i64
    %cst = arith.constant 1.5707963267948966 : f64
    %0 = quake.alloca !quake.veq<2>
    %1 = quake.subveq %0, %c0_i64, %c1_i64 : (!quake.veq<2>, i64, i64) -> !quake.veq<2>
    %2 = quake.extract_ref %0[%c0_i64] : (!quake.veq<2>, i64) -> !quake.ref
    quake.ry (%cst) %2 : (f64, !quake.ref) -> ()
    quake.dealloc %0 : !quake.veq<2>
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
}


// -----// IR Dump Before LowerToCFG (lower-to-cfg) ('func.func' operation: @__nvqpp_vector_bool_to_initializer_list) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_init_state() attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %c0_i64 = arith.constant 0 : i64
    %c1_i64 = arith.constant 1 : i64
    %cst = arith.constant 1.5707963267948966 : f64
    %0 = quake.alloca !quake.veq<2>
    %1 = quake.subveq %0, %c0_i64, %c1_i64 : (!quake.veq<2>, i64, i64) -> !quake.veq<2>
    %2 = quake.extract_ref %0[%c0_i64] : (!quake.veq<2>, i64) -> !quake.ref
    quake.ry (%cst) %2 : (f64, !quake.ref) -> ()
    quake.dealloc %0 : !quake.veq<2>
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
}


// -----// IR Dump Before CombineQuantumAllocations (combine-quantum-alloc) ('func.func' operation: @__nvqpp_vector_bool_to_initializer_list) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_init_state() attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %c0_i64 = arith.constant 0 : i64
    %c1_i64 = arith.constant 1 : i64
    %cst = arith.constant 1.5707963267948966 : f64
    %0 = quake.alloca !quake.veq<2>
    %1 = quake.subveq %0, %c0_i64, %c1_i64 : (!quake.veq<2>, i64, i64) -> !quake.veq<2>
    %2 = quake.extract_ref %0[%c0_i64] : (!quake.veq<2>, i64) -> !quake.ref
    quake.ry (%cst) %2 : (f64, !quake.ref) -> ()
    quake.dealloc %0 : !quake.veq<2>
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
}


// -----// IR Dump Before LowerToCFG (lower-to-cfg) ('func.func' operation: @llvm.memcpy.p0i8.p0i8.i64) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_init_state() attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %c0_i64 = arith.constant 0 : i64
    %c1_i64 = arith.constant 1 : i64
    %cst = arith.constant 1.5707963267948966 : f64
    %0 = quake.alloca !quake.veq<2>
    %1 = quake.subveq %0, %c0_i64, %c1_i64 : (!quake.veq<2>, i64, i64) -> !quake.veq<2>
    %2 = quake.extract_ref %0[%c0_i64] : (!quake.veq<2>, i64) -> !quake.ref
    quake.ry (%cst) %2 : (f64, !quake.ref) -> ()
    quake.dealloc %0 : !quake.veq<2>
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
}


// -----// IR Dump Before CombineQuantumAllocations (combine-quantum-alloc) ('func.func' operation: @llvm.memcpy.p0i8.p0i8.i64) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_init_state() attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %c0_i64 = arith.constant 0 : i64
    %c1_i64 = arith.constant 1 : i64
    %cst = arith.constant 1.5707963267948966 : f64
    %0 = quake.alloca !quake.veq<2>
    %1 = quake.subveq %0, %c0_i64, %c1_i64 : (!quake.veq<2>, i64, i64) -> !quake.veq<2>
    %2 = quake.extract_ref %0[%c0_i64] : (!quake.veq<2>, i64) -> !quake.ref
    quake.ry (%cst) %2 : (f64, !quake.ref) -> ()
    quake.dealloc %0 : !quake.veq<2>
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
}


// -----// IR Dump Before Canonicalizer (canonicalize) ('builtin.module' operation) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_init_state() attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %c0_i64 = arith.constant 0 : i64
    %c1_i64 = arith.constant 1 : i64
    %cst = arith.constant 1.5707963267948966 : f64
    %0 = quake.alloca !quake.veq<2>
    %1 = quake.subveq %0, %c0_i64, %c1_i64 : (!quake.veq<2>, i64, i64) -> !quake.veq<2>
    %2 = quake.extract_ref %0[%c0_i64] : (!quake.veq<2>, i64) -> !quake.ref
    quake.ry (%cst) %2 : (f64, !quake.ref) -> ()
    quake.dealloc %0 : !quake.veq<2>
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
}


// -----// IR Dump After Canonicalizer (canonicalize) ('builtin.module' operation) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_init_state() attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 1.5707963267948966 : f64
    %0 = quake.alloca !quake.veq<2>
    %1 = quake.extract_ref %0[0] : (!quake.veq<2>) -> !quake.ref
    quake.ry (%cst) %1 : (f64, !quake.ref) -> ()
    quake.dealloc %0 : !quake.veq<2>
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
}


// -----// IR Dump Before CSE (cse) ('builtin.module' operation) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_init_state() attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 1.5707963267948966 : f64
    %0 = quake.alloca !quake.veq<2>
    %1 = quake.extract_ref %0[0] : (!quake.veq<2>) -> !quake.ref
    quake.ry (%cst) %1 : (f64, !quake.ref) -> ()
    quake.dealloc %0 : !quake.veq<2>
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
}


// -----// IR Dump Before ConvertMathToFuncs (convert-math-to-funcs) ('builtin.module' operation) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_init_state() attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 1.5707963267948966 : f64
    %0 = quake.alloca !quake.veq<2>
    %1 = quake.extract_ref %0[0] : (!quake.veq<2>) -> !quake.ref
    quake.ry (%cst) %1 : (f64, !quake.ref) -> ()
    quake.dealloc %0 : !quake.veq<2>
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
}


// -----// IR Dump Before ConvertToQIR (quake-to-qir) ('builtin.module' operation) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_init_state() attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 1.5707963267948966 : f64
    %0 = quake.alloca !quake.veq<2>
    %1 = quake.extract_ref %0[0] : (!quake.veq<2>) -> !quake.ref
    quake.ry (%cst) %1 : (f64, !quake.ref) -> ()
    quake.dealloc %0 : !quake.veq<2>
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
}


// -----// IR Dump After ConvertToQIR (quake-to-qir) ('builtin.module' operation) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  llvm.func @__quantum__rt__qubit_release_array(!llvm.ptr<struct<"Array", opaque>>)
  llvm.func @__quantum__qis__ry(f64, !llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__rt__array_get_element_ptr_1d(!llvm.ptr<struct<"Array", opaque>>, i64) -> !llvm.ptr<i8>
  llvm.func @__quantum__rt__qubit_allocate_array(i64) -> !llvm.ptr<struct<"Array", opaque>>
  llvm.func @__nvqpp__mlirgen__test_init_state() attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %0 = llvm.mlir.constant(1.5707963267948966 : f64) : f64
    %1 = llvm.mlir.constant(2 : i64) : i64
    %2 = llvm.call @__quantum__rt__qubit_allocate_array(%1) : (i64) -> !llvm.ptr<struct<"Array", opaque>>
    %3 = llvm.mlir.constant(0 : i64) : i64
    %4 = llvm.call @__quantum__rt__array_get_element_ptr_1d(%2, %3) : (!llvm.ptr<struct<"Array", opaque>>, i64) -> !llvm.ptr<i8>
    %5 = llvm.bitcast %4 : !llvm.ptr<i8> to !llvm.ptr<ptr<struct<"Qubit", opaque>>>
    %6 = llvm.load %5 : !llvm.ptr<ptr<struct<"Qubit", opaque>>>
    llvm.call @__quantum__qis__ry(%0, %6) : (f64, !llvm.ptr<struct<"Qubit", opaque>>) -> ()
    llvm.call @__quantum__rt__qubit_release_array(%2) : (!llvm.ptr<struct<"Array", opaque>>) -> ()
    llvm.return
  }
  llvm.func @__nvqpp_cudaq_state_numberOfQubits(!llvm.ptr<ptr<i8>>) -> i64 attributes {sym_visibility = "private"}
  llvm.func @streamlinedLaunchKernel(!llvm.ptr<i8>, !llvm.ptr<i8>) attributes {sym_visibility = "private"}
  llvm.func @cudaqRegisterKernelName(!llvm.ptr<i8>) attributes {sym_visibility = "private"}
  llvm.func @cudaqRegisterArgsCreator(!llvm.ptr<i8>, !llvm.ptr<i8>) attributes {sym_visibility = "private"}
  llvm.func @malloc(i64) -> !llvm.ptr<i8> attributes {sym_visibility = "private"}
  llvm.func @free(!llvm.ptr<i8>) attributes {sym_visibility = "private"}
  llvm.func @__nvqpp_initializer_list_to_vector_bool(!llvm.ptr<i8>, !llvm.ptr<i8>, i64) attributes {sym_visibility = "private"}
  llvm.func @__nvqpp_vector_bool_to_initializer_list(!llvm.ptr<struct<(ptr<i1>, ptr<i1>, ptr<i1>)>>, !llvm.ptr<struct<(ptr<i1>, ptr<i1>, ptr<i1>)>>) attributes {sym_visibility = "private"}
  llvm.func @llvm.memcpy.p0i8.p0i8.i64(!llvm.ptr<i8>, !llvm.ptr<i8>, i64, i1) attributes {sym_visibility = "private"}
}


[2024-09-09 20:01:42.380] [info] [PluginUtils.h:24] Requesting N5nvqir16CircuitSimulatorE plugin via symbol name getCircuitSimulator.
[2024-09-09 20:01:42.380] [info] [PluginUtils.h:36] Successfully loaded the plugin.
[2024-09-09 20:01:42.499] [info] [NVQIR.cpp:82] Creating the custatevec-fp32 backend.
[2024-09-09 20:01:42.499] [info] [BaseRemoteSimulatorQPU.h:226] BaseRemoteSimulatorQPU::resetExecutionContext QPU 0
[2024-09-09 20:01:42.500] [info] [BaseRestRemoteClient.h:199] After Argument Synth.

module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_state_param(%arg0: !cc.ptr<!cc.state>, %arg1: !cc.charspan) attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 5.000000e-01 : f64
    %0 = call @__nvqpp_cudaq_state_numberOfQubits(%arg0) : (!cc.ptr<!cc.state>) -> i64
    %1 = quake.alloca !quake.veq<?>[%0 : i64]
    %2 = quake.init_state %1, %arg0 : (!quake.veq<?>, !cc.ptr<!cc.state>) -> !quake.veq<?>
    quake.exp_pauli %cst, %2, %arg1 : (f64, !quake.veq<?>, !cc.charspan) -> ()
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
}
// -----// IR Dump Before ArgumentSynthesis (argument-synthesis) ('func.func' operation: @__nvqpp__mlirgen__test_state_param) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_state_param(%arg0: !cc.ptr<!cc.state>, %arg1: !cc.charspan) attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 5.000000e-01 : f64
    %0 = call @__nvqpp_cudaq_state_numberOfQubits(%arg0) : (!cc.ptr<!cc.state>) -> i64
    %1 = quake.alloca !quake.veq<?>[%0 : i64]
    %2 = quake.init_state %1, %arg0 : (!quake.veq<?>, !cc.ptr<!cc.state>) -> !quake.veq<?>
    quake.exp_pauli %cst, %2, %arg1 : (f64, !quake.veq<?>, !cc.charspan) -> ()
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
}


// -----// IR Dump After ArgumentSynthesis (argument-synthesis) ('func.func' operation: @__nvqpp__mlirgen__test_state_param) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_state_param(%arg0: !cc.charspan) attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %0 = cc.address_of @test_state_param.rodata_synth_0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %1 = cc.load %0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %c16_i64 = arith.constant 16 : i64
    %2 = cc.alloca !cc.array<complex<f32> x 16>
    cc.store %1, %2 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %3 = cc.cast %2 : (!cc.ptr<!cc.array<complex<f32> x 16>>) -> !cc.ptr<i8>
    %4 = call @__nvqpp_cudaq_state_createFromData_fp32(%3, %c16_i64) : (!cc.ptr<i8>, i64) -> !cc.ptr<!cc.state>
    %5 = cc.cast %4 : (!cc.ptr<!cc.state>) -> !cc.ptr<!cc.state>
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    %cst = arith.constant 5.000000e-01 : f64
    %6 = call @__nvqpp_cudaq_state_numberOfQubits(%5) : (!cc.ptr<!cc.state>) -> i64
    %7 = quake.alloca !quake.veq<?>[%6 : i64]
    %8 = quake.init_state %7, %5 : (!quake.veq<?>, !cc.ptr<!cc.state>) -> !quake.veq<?>
    quake.exp_pauli %cst, %8, %arg0 : (f64, !quake.veq<?>, !cc.charspan) -> ()
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
  cc.global constant @test_state_param.rodata_synth_0 (dense<[(5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00)]> : tensor<16xcomplex<f32>>) : !cc.array<complex<f32> x 16>
  func.func private @__nvqpp_cudaq_state_createFromData_fp32(!cc.ptr<i8>, i64) -> !cc.ptr<!cc.state>
}


// -----// IR Dump Before ArgumentSynthesis (argument-synthesis) ('func.func' operation: @__nvqpp_cudaq_state_numberOfQubits) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_state_param(%arg0: !cc.charspan) attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %0 = cc.address_of @test_state_param.rodata_synth_0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %1 = cc.load %0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %c16_i64 = arith.constant 16 : i64
    %2 = cc.alloca !cc.array<complex<f32> x 16>
    cc.store %1, %2 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %3 = cc.cast %2 : (!cc.ptr<!cc.array<complex<f32> x 16>>) -> !cc.ptr<i8>
    %4 = call @__nvqpp_cudaq_state_createFromData_fp32(%3, %c16_i64) : (!cc.ptr<i8>, i64) -> !cc.ptr<!cc.state>
    %5 = cc.cast %4 : (!cc.ptr<!cc.state>) -> !cc.ptr<!cc.state>
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    %cst = arith.constant 5.000000e-01 : f64
    %6 = call @__nvqpp_cudaq_state_numberOfQubits(%5) : (!cc.ptr<!cc.state>) -> i64
    %7 = quake.alloca !quake.veq<?>[%6 : i64]
    %8 = quake.init_state %7, %5 : (!quake.veq<?>, !cc.ptr<!cc.state>) -> !quake.veq<?>
    quake.exp_pauli %cst, %8, %arg0 : (f64, !quake.veq<?>, !cc.charspan) -> ()
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
  cc.global constant @test_state_param.rodata_synth_0 (dense<[(5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00)]> : tensor<16xcomplex<f32>>) : !cc.array<complex<f32> x 16>
  func.func private @__nvqpp_cudaq_state_createFromData_fp32(!cc.ptr<i8>, i64) -> !cc.ptr<!cc.state>
}


// -----// IR Dump Before ArgumentSynthesis (argument-synthesis) ('func.func' operation: @streamlinedLaunchKernel) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_state_param(%arg0: !cc.charspan) attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %0 = cc.address_of @test_state_param.rodata_synth_0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %1 = cc.load %0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %c16_i64 = arith.constant 16 : i64
    %2 = cc.alloca !cc.array<complex<f32> x 16>
    cc.store %1, %2 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %3 = cc.cast %2 : (!cc.ptr<!cc.array<complex<f32> x 16>>) -> !cc.ptr<i8>
    %4 = call @__nvqpp_cudaq_state_createFromData_fp32(%3, %c16_i64) : (!cc.ptr<i8>, i64) -> !cc.ptr<!cc.state>
    %5 = cc.cast %4 : (!cc.ptr<!cc.state>) -> !cc.ptr<!cc.state>
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    %cst = arith.constant 5.000000e-01 : f64
    %6 = call @__nvqpp_cudaq_state_numberOfQubits(%5) : (!cc.ptr<!cc.state>) -> i64
    %7 = quake.alloca !quake.veq<?>[%6 : i64]
    %8 = quake.init_state %7, %5 : (!quake.veq<?>, !cc.ptr<!cc.state>) -> !quake.veq<?>
    quake.exp_pauli %cst, %8, %arg0 : (f64, !quake.veq<?>, !cc.charspan) -> ()
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
  cc.global constant @test_state_param.rodata_synth_0 (dense<[(5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00)]> : tensor<16xcomplex<f32>>) : !cc.array<complex<f32> x 16>
  func.func private @__nvqpp_cudaq_state_createFromData_fp32(!cc.ptr<i8>, i64) -> !cc.ptr<!cc.state>
}


// -----// IR Dump Before ArgumentSynthesis (argument-synthesis) ('func.func' operation: @cudaqRegisterKernelName) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_state_param(%arg0: !cc.charspan) attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %0 = cc.address_of @test_state_param.rodata_synth_0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %1 = cc.load %0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %c16_i64 = arith.constant 16 : i64
    %2 = cc.alloca !cc.array<complex<f32> x 16>
    cc.store %1, %2 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %3 = cc.cast %2 : (!cc.ptr<!cc.array<complex<f32> x 16>>) -> !cc.ptr<i8>
    %4 = call @__nvqpp_cudaq_state_createFromData_fp32(%3, %c16_i64) : (!cc.ptr<i8>, i64) -> !cc.ptr<!cc.state>
    %5 = cc.cast %4 : (!cc.ptr<!cc.state>) -> !cc.ptr<!cc.state>
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    %cst = arith.constant 5.000000e-01 : f64
    %6 = call @__nvqpp_cudaq_state_numberOfQubits(%5) : (!cc.ptr<!cc.state>) -> i64
    %7 = quake.alloca !quake.veq<?>[%6 : i64]
    %8 = quake.init_state %7, %5 : (!quake.veq<?>, !cc.ptr<!cc.state>) -> !quake.veq<?>
    quake.exp_pauli %cst, %8, %arg0 : (f64, !quake.veq<?>, !cc.charspan) -> ()
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
  cc.global constant @test_state_param.rodata_synth_0 (dense<[(5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00)]> : tensor<16xcomplex<f32>>) : !cc.array<complex<f32> x 16>
  func.func private @__nvqpp_cudaq_state_createFromData_fp32(!cc.ptr<i8>, i64) -> !cc.ptr<!cc.state>
}


// -----// IR Dump Before ArgumentSynthesis (argument-synthesis) ('func.func' operation: @cudaqRegisterArgsCreator) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_state_param(%arg0: !cc.charspan) attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %0 = cc.address_of @test_state_param.rodata_synth_0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %1 = cc.load %0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %c16_i64 = arith.constant 16 : i64
    %2 = cc.alloca !cc.array<complex<f32> x 16>
    cc.store %1, %2 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %3 = cc.cast %2 : (!cc.ptr<!cc.array<complex<f32> x 16>>) -> !cc.ptr<i8>
    %4 = call @__nvqpp_cudaq_state_createFromData_fp32(%3, %c16_i64) : (!cc.ptr<i8>, i64) -> !cc.ptr<!cc.state>
    %5 = cc.cast %4 : (!cc.ptr<!cc.state>) -> !cc.ptr<!cc.state>
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    %cst = arith.constant 5.000000e-01 : f64
    %6 = call @__nvqpp_cudaq_state_numberOfQubits(%5) : (!cc.ptr<!cc.state>) -> i64
    %7 = quake.alloca !quake.veq<?>[%6 : i64]
    %8 = quake.init_state %7, %5 : (!quake.veq<?>, !cc.ptr<!cc.state>) -> !quake.veq<?>
    quake.exp_pauli %cst, %8, %arg0 : (f64, !quake.veq<?>, !cc.charspan) -> ()
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
  cc.global constant @test_state_param.rodata_synth_0 (dense<[(5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00)]> : tensor<16xcomplex<f32>>) : !cc.array<complex<f32> x 16>
  func.func private @__nvqpp_cudaq_state_createFromData_fp32(!cc.ptr<i8>, i64) -> !cc.ptr<!cc.state>
}


// -----// IR Dump Before ArgumentSynthesis (argument-synthesis) ('func.func' operation: @malloc) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_state_param(%arg0: !cc.charspan) attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %0 = cc.address_of @test_state_param.rodata_synth_0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %1 = cc.load %0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %c16_i64 = arith.constant 16 : i64
    %2 = cc.alloca !cc.array<complex<f32> x 16>
    cc.store %1, %2 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %3 = cc.cast %2 : (!cc.ptr<!cc.array<complex<f32> x 16>>) -> !cc.ptr<i8>
    %4 = call @__nvqpp_cudaq_state_createFromData_fp32(%3, %c16_i64) : (!cc.ptr<i8>, i64) -> !cc.ptr<!cc.state>
    %5 = cc.cast %4 : (!cc.ptr<!cc.state>) -> !cc.ptr<!cc.state>
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    %cst = arith.constant 5.000000e-01 : f64
    %6 = call @__nvqpp_cudaq_state_numberOfQubits(%5) : (!cc.ptr<!cc.state>) -> i64
    %7 = quake.alloca !quake.veq<?>[%6 : i64]
    %8 = quake.init_state %7, %5 : (!quake.veq<?>, !cc.ptr<!cc.state>) -> !quake.veq<?>
    quake.exp_pauli %cst, %8, %arg0 : (f64, !quake.veq<?>, !cc.charspan) -> ()
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
  cc.global constant @test_state_param.rodata_synth_0 (dense<[(5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00)]> : tensor<16xcomplex<f32>>) : !cc.array<complex<f32> x 16>
  func.func private @__nvqpp_cudaq_state_createFromData_fp32(!cc.ptr<i8>, i64) -> !cc.ptr<!cc.state>
}


// -----// IR Dump Before ArgumentSynthesis (argument-synthesis) ('func.func' operation: @free) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_state_param(%arg0: !cc.charspan) attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %0 = cc.address_of @test_state_param.rodata_synth_0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %1 = cc.load %0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %c16_i64 = arith.constant 16 : i64
    %2 = cc.alloca !cc.array<complex<f32> x 16>
    cc.store %1, %2 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %3 = cc.cast %2 : (!cc.ptr<!cc.array<complex<f32> x 16>>) -> !cc.ptr<i8>
    %4 = call @__nvqpp_cudaq_state_createFromData_fp32(%3, %c16_i64) : (!cc.ptr<i8>, i64) -> !cc.ptr<!cc.state>
    %5 = cc.cast %4 : (!cc.ptr<!cc.state>) -> !cc.ptr<!cc.state>
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    %cst = arith.constant 5.000000e-01 : f64
    %6 = call @__nvqpp_cudaq_state_numberOfQubits(%5) : (!cc.ptr<!cc.state>) -> i64
    %7 = quake.alloca !quake.veq<?>[%6 : i64]
    %8 = quake.init_state %7, %5 : (!quake.veq<?>, !cc.ptr<!cc.state>) -> !quake.veq<?>
    quake.exp_pauli %cst, %8, %arg0 : (f64, !quake.veq<?>, !cc.charspan) -> ()
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
  cc.global constant @test_state_param.rodata_synth_0 (dense<[(5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00)]> : tensor<16xcomplex<f32>>) : !cc.array<complex<f32> x 16>
  func.func private @__nvqpp_cudaq_state_createFromData_fp32(!cc.ptr<i8>, i64) -> !cc.ptr<!cc.state>
}


// -----// IR Dump Before ArgumentSynthesis (argument-synthesis) ('func.func' operation: @__nvqpp_initializer_list_to_vector_bool) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_state_param(%arg0: !cc.charspan) attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %0 = cc.address_of @test_state_param.rodata_synth_0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %1 = cc.load %0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %c16_i64 = arith.constant 16 : i64
    %2 = cc.alloca !cc.array<complex<f32> x 16>
    cc.store %1, %2 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %3 = cc.cast %2 : (!cc.ptr<!cc.array<complex<f32> x 16>>) -> !cc.ptr<i8>
    %4 = call @__nvqpp_cudaq_state_createFromData_fp32(%3, %c16_i64) : (!cc.ptr<i8>, i64) -> !cc.ptr<!cc.state>
    %5 = cc.cast %4 : (!cc.ptr<!cc.state>) -> !cc.ptr<!cc.state>
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    %cst = arith.constant 5.000000e-01 : f64
    %6 = call @__nvqpp_cudaq_state_numberOfQubits(%5) : (!cc.ptr<!cc.state>) -> i64
    %7 = quake.alloca !quake.veq<?>[%6 : i64]
    %8 = quake.init_state %7, %5 : (!quake.veq<?>, !cc.ptr<!cc.state>) -> !quake.veq<?>
    quake.exp_pauli %cst, %8, %arg0 : (f64, !quake.veq<?>, !cc.charspan) -> ()
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
  cc.global constant @test_state_param.rodata_synth_0 (dense<[(5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00)]> : tensor<16xcomplex<f32>>) : !cc.array<complex<f32> x 16>
  func.func private @__nvqpp_cudaq_state_createFromData_fp32(!cc.ptr<i8>, i64) -> !cc.ptr<!cc.state>
}


// -----// IR Dump Before ArgumentSynthesis (argument-synthesis) ('func.func' operation: @__nvqpp_vector_bool_to_initializer_list) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_state_param(%arg0: !cc.charspan) attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %0 = cc.address_of @test_state_param.rodata_synth_0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %1 = cc.load %0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %c16_i64 = arith.constant 16 : i64
    %2 = cc.alloca !cc.array<complex<f32> x 16>
    cc.store %1, %2 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %3 = cc.cast %2 : (!cc.ptr<!cc.array<complex<f32> x 16>>) -> !cc.ptr<i8>
    %4 = call @__nvqpp_cudaq_state_createFromData_fp32(%3, %c16_i64) : (!cc.ptr<i8>, i64) -> !cc.ptr<!cc.state>
    %5 = cc.cast %4 : (!cc.ptr<!cc.state>) -> !cc.ptr<!cc.state>
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    %cst = arith.constant 5.000000e-01 : f64
    %6 = call @__nvqpp_cudaq_state_numberOfQubits(%5) : (!cc.ptr<!cc.state>) -> i64
    %7 = quake.alloca !quake.veq<?>[%6 : i64]
    %8 = quake.init_state %7, %5 : (!quake.veq<?>, !cc.ptr<!cc.state>) -> !quake.veq<?>
    quake.exp_pauli %cst, %8, %arg0 : (f64, !quake.veq<?>, !cc.charspan) -> ()
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
  cc.global constant @test_state_param.rodata_synth_0 (dense<[(5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00)]> : tensor<16xcomplex<f32>>) : !cc.array<complex<f32> x 16>
  func.func private @__nvqpp_cudaq_state_createFromData_fp32(!cc.ptr<i8>, i64) -> !cc.ptr<!cc.state>
}


// -----// IR Dump Before ArgumentSynthesis (argument-synthesis) ('func.func' operation: @llvm.memcpy.p0i8.p0i8.i64) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_state_param(%arg0: !cc.charspan) attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %0 = cc.address_of @test_state_param.rodata_synth_0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %1 = cc.load %0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %c16_i64 = arith.constant 16 : i64
    %2 = cc.alloca !cc.array<complex<f32> x 16>
    cc.store %1, %2 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %3 = cc.cast %2 : (!cc.ptr<!cc.array<complex<f32> x 16>>) -> !cc.ptr<i8>
    %4 = call @__nvqpp_cudaq_state_createFromData_fp32(%3, %c16_i64) : (!cc.ptr<i8>, i64) -> !cc.ptr<!cc.state>
    %5 = cc.cast %4 : (!cc.ptr<!cc.state>) -> !cc.ptr<!cc.state>
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    %cst = arith.constant 5.000000e-01 : f64
    %6 = call @__nvqpp_cudaq_state_numberOfQubits(%5) : (!cc.ptr<!cc.state>) -> i64
    %7 = quake.alloca !quake.veq<?>[%6 : i64]
    %8 = quake.init_state %7, %5 : (!quake.veq<?>, !cc.ptr<!cc.state>) -> !quake.veq<?>
    quake.exp_pauli %cst, %8, %arg0 : (f64, !quake.veq<?>, !cc.charspan) -> ()
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
  cc.global constant @test_state_param.rodata_synth_0 (dense<[(5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00)]> : tensor<16xcomplex<f32>>) : !cc.array<complex<f32> x 16>
  func.func private @__nvqpp_cudaq_state_createFromData_fp32(!cc.ptr<i8>, i64) -> !cc.ptr<!cc.state>
}


// -----// IR Dump Before ArgumentSynthesis (argument-synthesis) ('func.func' operation: @__nvqpp_cudaq_state_createFromData_fp32) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_state_param(%arg0: !cc.charspan) attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %0 = cc.address_of @test_state_param.rodata_synth_0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %1 = cc.load %0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %c16_i64 = arith.constant 16 : i64
    %2 = cc.alloca !cc.array<complex<f32> x 16>
    cc.store %1, %2 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %3 = cc.cast %2 : (!cc.ptr<!cc.array<complex<f32> x 16>>) -> !cc.ptr<i8>
    %4 = call @__nvqpp_cudaq_state_createFromData_fp32(%3, %c16_i64) : (!cc.ptr<i8>, i64) -> !cc.ptr<!cc.state>
    %5 = cc.cast %4 : (!cc.ptr<!cc.state>) -> !cc.ptr<!cc.state>
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    %cst = arith.constant 5.000000e-01 : f64
    %6 = call @__nvqpp_cudaq_state_numberOfQubits(%5) : (!cc.ptr<!cc.state>) -> i64
    %7 = quake.alloca !quake.veq<?>[%6 : i64]
    %8 = quake.init_state %7, %5 : (!quake.veq<?>, !cc.ptr<!cc.state>) -> !quake.veq<?>
    quake.exp_pauli %cst, %8, %arg0 : (f64, !quake.veq<?>, !cc.charspan) -> ()
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
  cc.global constant @test_state_param.rodata_synth_0 (dense<[(5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00)]> : tensor<16xcomplex<f32>>) : !cc.array<complex<f32> x 16>
  func.func private @__nvqpp_cudaq_state_createFromData_fp32(!cc.ptr<i8>, i64) -> !cc.ptr<!cc.state>
}


// -----// IR Dump Before Canonicalizer (canonicalize) ('builtin.module' operation) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_state_param(%arg0: !cc.charspan) attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %0 = cc.address_of @test_state_param.rodata_synth_0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %1 = cc.load %0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %c16_i64 = arith.constant 16 : i64
    %2 = cc.alloca !cc.array<complex<f32> x 16>
    cc.store %1, %2 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %3 = cc.cast %2 : (!cc.ptr<!cc.array<complex<f32> x 16>>) -> !cc.ptr<i8>
    %4 = call @__nvqpp_cudaq_state_createFromData_fp32(%3, %c16_i64) : (!cc.ptr<i8>, i64) -> !cc.ptr<!cc.state>
    %5 = cc.cast %4 : (!cc.ptr<!cc.state>) -> !cc.ptr<!cc.state>
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    %cst = arith.constant 5.000000e-01 : f64
    %6 = call @__nvqpp_cudaq_state_numberOfQubits(%5) : (!cc.ptr<!cc.state>) -> i64
    %7 = quake.alloca !quake.veq<?>[%6 : i64]
    %8 = quake.init_state %7, %5 : (!quake.veq<?>, !cc.ptr<!cc.state>) -> !quake.veq<?>
    quake.exp_pauli %cst, %8, %arg0 : (f64, !quake.veq<?>, !cc.charspan) -> ()
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
  cc.global constant @test_state_param.rodata_synth_0 (dense<[(5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00)]> : tensor<16xcomplex<f32>>) : !cc.array<complex<f32> x 16>
  func.func private @__nvqpp_cudaq_state_createFromData_fp32(!cc.ptr<i8>, i64) -> !cc.ptr<!cc.state>
}


// -----// IR Dump After Canonicalizer (canonicalize) ('builtin.module' operation) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_state_param(%arg0: !cc.charspan) attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 5.000000e-01 : f64
    %c16_i64 = arith.constant 16 : i64
    %0 = cc.address_of @test_state_param.rodata_synth_0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %1 = cc.load %0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %2 = cc.alloca !cc.array<complex<f32> x 16>
    cc.store %1, %2 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %3 = cc.cast %2 : (!cc.ptr<!cc.array<complex<f32> x 16>>) -> !cc.ptr<i8>
    %4 = call @__nvqpp_cudaq_state_createFromData_fp32(%3, %c16_i64) : (!cc.ptr<i8>, i64) -> !cc.ptr<!cc.state>
    %5 = call @__nvqpp_cudaq_state_numberOfQubits(%4) : (!cc.ptr<!cc.state>) -> i64
    %6 = quake.alloca !quake.veq<?>[%5 : i64]
    %7 = quake.init_state %6, %4 : (!quake.veq<?>, !cc.ptr<!cc.state>) -> !quake.veq<?>
    quake.exp_pauli %cst, %7, %arg0 : (f64, !quake.veq<?>, !cc.charspan) -> ()
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
  cc.global constant @test_state_param.rodata_synth_0 (dense<[(5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00)]> : tensor<16xcomplex<f32>>) : !cc.array<complex<f32> x 16>
  func.func private @__nvqpp_cudaq_state_createFromData_fp32(!cc.ptr<i8>, i64) -> !cc.ptr<!cc.state>
}


// -----// IR Dump Before DeleteStates (delete-states) ('builtin.module' operation) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_state_param(%arg0: !cc.charspan) attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 5.000000e-01 : f64
    %c16_i64 = arith.constant 16 : i64
    %0 = cc.address_of @test_state_param.rodata_synth_0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %1 = cc.load %0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %2 = cc.alloca !cc.array<complex<f32> x 16>
    cc.store %1, %2 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %3 = cc.cast %2 : (!cc.ptr<!cc.array<complex<f32> x 16>>) -> !cc.ptr<i8>
    %4 = call @__nvqpp_cudaq_state_createFromData_fp32(%3, %c16_i64) : (!cc.ptr<i8>, i64) -> !cc.ptr<!cc.state>
    %5 = call @__nvqpp_cudaq_state_numberOfQubits(%4) : (!cc.ptr<!cc.state>) -> i64
    %6 = quake.alloca !quake.veq<?>[%5 : i64]
    %7 = quake.init_state %6, %4 : (!quake.veq<?>, !cc.ptr<!cc.state>) -> !quake.veq<?>
    quake.exp_pauli %cst, %7, %arg0 : (f64, !quake.veq<?>, !cc.charspan) -> ()
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
  cc.global constant @test_state_param.rodata_synth_0 (dense<[(5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00)]> : tensor<16xcomplex<f32>>) : !cc.array<complex<f32> x 16>
  func.func private @__nvqpp_cudaq_state_createFromData_fp32(!cc.ptr<i8>, i64) -> !cc.ptr<!cc.state>
}


// -----// IR Dump After DeleteStates (delete-states) ('builtin.module' operation) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_state_param(%arg0: !cc.charspan) attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %c4_i64 = arith.constant 4 : i64
    %cst = arith.constant 5.000000e-01 : f64
    %c16_i64 = arith.constant 16 : i64
    %0 = cc.address_of @test_state_param.rodata_synth_0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %1 = cc.load %0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %2 = cc.alloca !cc.array<complex<f32> x 16>
    cc.store %1, %2 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %3 = cc.cast %2 : (!cc.ptr<!cc.array<complex<f32> x 16>>) -> !cc.ptr<i8>
    %4 = quake.alloca !quake.veq<?>[%c4_i64 : i64]
    %5 = quake.init_state %4, %2 : (!quake.veq<?>, !cc.ptr<!cc.array<complex<f32> x 16>>) -> !quake.veq<?>
    quake.exp_pauli %cst, %5, %arg0 : (f64, !quake.veq<?>, !cc.charspan) -> ()
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
  cc.global constant @test_state_param.rodata_synth_0 (dense<[(5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00)]> : tensor<16xcomplex<f32>>) : !cc.array<complex<f32> x 16>
  func.func private @__nvqpp_cudaq_state_createFromData_fp32(!cc.ptr<i8>, i64) -> !cc.ptr<!cc.state>
}


// -----// IR Dump Before Canonicalizer (canonicalize) ('builtin.module' operation) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_state_param(%arg0: !cc.charspan) attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %c4_i64 = arith.constant 4 : i64
    %cst = arith.constant 5.000000e-01 : f64
    %c16_i64 = arith.constant 16 : i64
    %0 = cc.address_of @test_state_param.rodata_synth_0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %1 = cc.load %0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %2 = cc.alloca !cc.array<complex<f32> x 16>
    cc.store %1, %2 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %3 = cc.cast %2 : (!cc.ptr<!cc.array<complex<f32> x 16>>) -> !cc.ptr<i8>
    %4 = quake.alloca !quake.veq<?>[%c4_i64 : i64]
    %5 = quake.init_state %4, %2 : (!quake.veq<?>, !cc.ptr<!cc.array<complex<f32> x 16>>) -> !quake.veq<?>
    quake.exp_pauli %cst, %5, %arg0 : (f64, !quake.veq<?>, !cc.charspan) -> ()
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
  cc.global constant @test_state_param.rodata_synth_0 (dense<[(5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00)]> : tensor<16xcomplex<f32>>) : !cc.array<complex<f32> x 16>
  func.func private @__nvqpp_cudaq_state_createFromData_fp32(!cc.ptr<i8>, i64) -> !cc.ptr<!cc.state>
}


// -----// IR Dump After Canonicalizer (canonicalize) ('builtin.module' operation) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_state_param(%arg0: !cc.charspan) attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 5.000000e-01 : f64
    %0 = cc.address_of @test_state_param.rodata_synth_0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %1 = cc.load %0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %2 = cc.alloca !cc.array<complex<f32> x 16>
    cc.store %1, %2 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %3 = quake.alloca !quake.veq<4>
    %4 = quake.init_state %3, %2 : (!quake.veq<4>, !cc.ptr<!cc.array<complex<f32> x 16>>) -> !quake.veq<4>
    quake.exp_pauli %cst, %4, %arg0 : (f64, !quake.veq<4>, !cc.charspan) -> ()
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
  cc.global constant @test_state_param.rodata_synth_0 (dense<[(5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00)]> : tensor<16xcomplex<f32>>) : !cc.array<complex<f32> x 16>
  func.func private @__nvqpp_cudaq_state_createFromData_fp32(!cc.ptr<i8>, i64) -> !cc.ptr<!cc.state>
}


// -----// IR Dump Before ApplyControlNegations (apply-control-negations) ('func.func' operation: @__nvqpp__mlirgen__test_state_param) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_state_param(%arg0: !cc.charspan) attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 5.000000e-01 : f64
    %0 = cc.address_of @test_state_param.rodata_synth_0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %1 = cc.load %0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %2 = cc.alloca !cc.array<complex<f32> x 16>
    cc.store %1, %2 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %3 = quake.alloca !quake.veq<4>
    %4 = quake.init_state %3, %2 : (!quake.veq<4>, !cc.ptr<!cc.array<complex<f32> x 16>>) -> !quake.veq<4>
    quake.exp_pauli %cst, %4, %arg0 : (f64, !quake.veq<4>, !cc.charspan) -> ()
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
  cc.global constant @test_state_param.rodata_synth_0 (dense<[(5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00)]> : tensor<16xcomplex<f32>>) : !cc.array<complex<f32> x 16>
  func.func private @__nvqpp_cudaq_state_createFromData_fp32(!cc.ptr<i8>, i64) -> !cc.ptr<!cc.state>
}


// -----// IR Dump Before ConvertToDirectCalls (indirect-to-direct-calls) ('func.func' operation: @__nvqpp__mlirgen__test_state_param) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_state_param(%arg0: !cc.charspan) attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 5.000000e-01 : f64
    %0 = cc.address_of @test_state_param.rodata_synth_0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %1 = cc.load %0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %2 = cc.alloca !cc.array<complex<f32> x 16>
    cc.store %1, %2 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %3 = quake.alloca !quake.veq<4>
    %4 = quake.init_state %3, %2 : (!quake.veq<4>, !cc.ptr<!cc.array<complex<f32> x 16>>) -> !quake.veq<4>
    quake.exp_pauli %cst, %4, %arg0 : (f64, !quake.veq<4>, !cc.charspan) -> ()
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
  cc.global constant @test_state_param.rodata_synth_0 (dense<[(5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00)]> : tensor<16xcomplex<f32>>) : !cc.array<complex<f32> x 16>
  func.func private @__nvqpp_cudaq_state_createFromData_fp32(!cc.ptr<i8>, i64) -> !cc.ptr<!cc.state>
}


// -----// IR Dump Before ApplyControlNegations (apply-control-negations) ('func.func' operation: @__nvqpp_cudaq_state_numberOfQubits) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_state_param(%arg0: !cc.charspan) attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 5.000000e-01 : f64
    %0 = cc.address_of @test_state_param.rodata_synth_0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %1 = cc.load %0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %2 = cc.alloca !cc.array<complex<f32> x 16>
    cc.store %1, %2 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %3 = quake.alloca !quake.veq<4>
    %4 = quake.init_state %3, %2 : (!quake.veq<4>, !cc.ptr<!cc.array<complex<f32> x 16>>) -> !quake.veq<4>
    quake.exp_pauli %cst, %4, %arg0 : (f64, !quake.veq<4>, !cc.charspan) -> ()
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
  cc.global constant @test_state_param.rodata_synth_0 (dense<[(5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00)]> : tensor<16xcomplex<f32>>) : !cc.array<complex<f32> x 16>
  func.func private @__nvqpp_cudaq_state_createFromData_fp32(!cc.ptr<i8>, i64) -> !cc.ptr<!cc.state>
}


// -----// IR Dump Before ConvertToDirectCalls (indirect-to-direct-calls) ('func.func' operation: @__nvqpp_cudaq_state_numberOfQubits) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_state_param(%arg0: !cc.charspan) attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 5.000000e-01 : f64
    %0 = cc.address_of @test_state_param.rodata_synth_0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %1 = cc.load %0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %2 = cc.alloca !cc.array<complex<f32> x 16>
    cc.store %1, %2 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %3 = quake.alloca !quake.veq<4>
    %4 = quake.init_state %3, %2 : (!quake.veq<4>, !cc.ptr<!cc.array<complex<f32> x 16>>) -> !quake.veq<4>
    quake.exp_pauli %cst, %4, %arg0 : (f64, !quake.veq<4>, !cc.charspan) -> ()
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
  cc.global constant @test_state_param.rodata_synth_0 (dense<[(5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00)]> : tensor<16xcomplex<f32>>) : !cc.array<complex<f32> x 16>
  func.func private @__nvqpp_cudaq_state_createFromData_fp32(!cc.ptr<i8>, i64) -> !cc.ptr<!cc.state>
}


// -----// IR Dump Before ApplyControlNegations (apply-control-negations) ('func.func' operation: @streamlinedLaunchKernel) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_state_param(%arg0: !cc.charspan) attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 5.000000e-01 : f64
    %0 = cc.address_of @test_state_param.rodata_synth_0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %1 = cc.load %0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %2 = cc.alloca !cc.array<complex<f32> x 16>
    cc.store %1, %2 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %3 = quake.alloca !quake.veq<4>
    %4 = quake.init_state %3, %2 : (!quake.veq<4>, !cc.ptr<!cc.array<complex<f32> x 16>>) -> !quake.veq<4>
    quake.exp_pauli %cst, %4, %arg0 : (f64, !quake.veq<4>, !cc.charspan) -> ()
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
  cc.global constant @test_state_param.rodata_synth_0 (dense<[(5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00)]> : tensor<16xcomplex<f32>>) : !cc.array<complex<f32> x 16>
  func.func private @__nvqpp_cudaq_state_createFromData_fp32(!cc.ptr<i8>, i64) -> !cc.ptr<!cc.state>
}


// -----// IR Dump Before ConvertToDirectCalls (indirect-to-direct-calls) ('func.func' operation: @streamlinedLaunchKernel) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_state_param(%arg0: !cc.charspan) attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 5.000000e-01 : f64
    %0 = cc.address_of @test_state_param.rodata_synth_0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %1 = cc.load %0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %2 = cc.alloca !cc.array<complex<f32> x 16>
    cc.store %1, %2 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %3 = quake.alloca !quake.veq<4>
    %4 = quake.init_state %3, %2 : (!quake.veq<4>, !cc.ptr<!cc.array<complex<f32> x 16>>) -> !quake.veq<4>
    quake.exp_pauli %cst, %4, %arg0 : (f64, !quake.veq<4>, !cc.charspan) -> ()
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
  cc.global constant @test_state_param.rodata_synth_0 (dense<[(5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00)]> : tensor<16xcomplex<f32>>) : !cc.array<complex<f32> x 16>
  func.func private @__nvqpp_cudaq_state_createFromData_fp32(!cc.ptr<i8>, i64) -> !cc.ptr<!cc.state>
}


// -----// IR Dump Before ApplyControlNegations (apply-control-negations) ('func.func' operation: @cudaqRegisterKernelName) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_state_param(%arg0: !cc.charspan) attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 5.000000e-01 : f64
    %0 = cc.address_of @test_state_param.rodata_synth_0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %1 = cc.load %0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %2 = cc.alloca !cc.array<complex<f32> x 16>
    cc.store %1, %2 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %3 = quake.alloca !quake.veq<4>
    %4 = quake.init_state %3, %2 : (!quake.veq<4>, !cc.ptr<!cc.array<complex<f32> x 16>>) -> !quake.veq<4>
    quake.exp_pauli %cst, %4, %arg0 : (f64, !quake.veq<4>, !cc.charspan) -> ()
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
  cc.global constant @test_state_param.rodata_synth_0 (dense<[(5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00)]> : tensor<16xcomplex<f32>>) : !cc.array<complex<f32> x 16>
  func.func private @__nvqpp_cudaq_state_createFromData_fp32(!cc.ptr<i8>, i64) -> !cc.ptr<!cc.state>
}


// -----// IR Dump Before ConvertToDirectCalls (indirect-to-direct-calls) ('func.func' operation: @cudaqRegisterKernelName) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_state_param(%arg0: !cc.charspan) attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 5.000000e-01 : f64
    %0 = cc.address_of @test_state_param.rodata_synth_0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %1 = cc.load %0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %2 = cc.alloca !cc.array<complex<f32> x 16>
    cc.store %1, %2 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %3 = quake.alloca !quake.veq<4>
    %4 = quake.init_state %3, %2 : (!quake.veq<4>, !cc.ptr<!cc.array<complex<f32> x 16>>) -> !quake.veq<4>
    quake.exp_pauli %cst, %4, %arg0 : (f64, !quake.veq<4>, !cc.charspan) -> ()
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
  cc.global constant @test_state_param.rodata_synth_0 (dense<[(5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00)]> : tensor<16xcomplex<f32>>) : !cc.array<complex<f32> x 16>
  func.func private @__nvqpp_cudaq_state_createFromData_fp32(!cc.ptr<i8>, i64) -> !cc.ptr<!cc.state>
}


// -----// IR Dump Before ApplyControlNegations (apply-control-negations) ('func.func' operation: @cudaqRegisterArgsCreator) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_state_param(%arg0: !cc.charspan) attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 5.000000e-01 : f64
    %0 = cc.address_of @test_state_param.rodata_synth_0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %1 = cc.load %0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %2 = cc.alloca !cc.array<complex<f32> x 16>
    cc.store %1, %2 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %3 = quake.alloca !quake.veq<4>
    %4 = quake.init_state %3, %2 : (!quake.veq<4>, !cc.ptr<!cc.array<complex<f32> x 16>>) -> !quake.veq<4>
    quake.exp_pauli %cst, %4, %arg0 : (f64, !quake.veq<4>, !cc.charspan) -> ()
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
  cc.global constant @test_state_param.rodata_synth_0 (dense<[(5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00)]> : tensor<16xcomplex<f32>>) : !cc.array<complex<f32> x 16>
  func.func private @__nvqpp_cudaq_state_createFromData_fp32(!cc.ptr<i8>, i64) -> !cc.ptr<!cc.state>
}


// -----// IR Dump Before ConvertToDirectCalls (indirect-to-direct-calls) ('func.func' operation: @cudaqRegisterArgsCreator) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_state_param(%arg0: !cc.charspan) attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 5.000000e-01 : f64
    %0 = cc.address_of @test_state_param.rodata_synth_0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %1 = cc.load %0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %2 = cc.alloca !cc.array<complex<f32> x 16>
    cc.store %1, %2 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %3 = quake.alloca !quake.veq<4>
    %4 = quake.init_state %3, %2 : (!quake.veq<4>, !cc.ptr<!cc.array<complex<f32> x 16>>) -> !quake.veq<4>
    quake.exp_pauli %cst, %4, %arg0 : (f64, !quake.veq<4>, !cc.charspan) -> ()
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
  cc.global constant @test_state_param.rodata_synth_0 (dense<[(5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00)]> : tensor<16xcomplex<f32>>) : !cc.array<complex<f32> x 16>
  func.func private @__nvqpp_cudaq_state_createFromData_fp32(!cc.ptr<i8>, i64) -> !cc.ptr<!cc.state>
}


// -----// IR Dump Before ApplyControlNegations (apply-control-negations) ('func.func' operation: @malloc) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_state_param(%arg0: !cc.charspan) attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 5.000000e-01 : f64
    %0 = cc.address_of @test_state_param.rodata_synth_0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %1 = cc.load %0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %2 = cc.alloca !cc.array<complex<f32> x 16>
    cc.store %1, %2 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %3 = quake.alloca !quake.veq<4>
    %4 = quake.init_state %3, %2 : (!quake.veq<4>, !cc.ptr<!cc.array<complex<f32> x 16>>) -> !quake.veq<4>
    quake.exp_pauli %cst, %4, %arg0 : (f64, !quake.veq<4>, !cc.charspan) -> ()
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
  cc.global constant @test_state_param.rodata_synth_0 (dense<[(5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00)]> : tensor<16xcomplex<f32>>) : !cc.array<complex<f32> x 16>
  func.func private @__nvqpp_cudaq_state_createFromData_fp32(!cc.ptr<i8>, i64) -> !cc.ptr<!cc.state>
}


// -----// IR Dump Before ConvertToDirectCalls (indirect-to-direct-calls) ('func.func' operation: @malloc) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_state_param(%arg0: !cc.charspan) attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 5.000000e-01 : f64
    %0 = cc.address_of @test_state_param.rodata_synth_0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %1 = cc.load %0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %2 = cc.alloca !cc.array<complex<f32> x 16>
    cc.store %1, %2 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %3 = quake.alloca !quake.veq<4>
    %4 = quake.init_state %3, %2 : (!quake.veq<4>, !cc.ptr<!cc.array<complex<f32> x 16>>) -> !quake.veq<4>
    quake.exp_pauli %cst, %4, %arg0 : (f64, !quake.veq<4>, !cc.charspan) -> ()
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
  cc.global constant @test_state_param.rodata_synth_0 (dense<[(5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00)]> : tensor<16xcomplex<f32>>) : !cc.array<complex<f32> x 16>
  func.func private @__nvqpp_cudaq_state_createFromData_fp32(!cc.ptr<i8>, i64) -> !cc.ptr<!cc.state>
}


// -----// IR Dump Before ApplyControlNegations (apply-control-negations) ('func.func' operation: @free) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_state_param(%arg0: !cc.charspan) attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 5.000000e-01 : f64
    %0 = cc.address_of @test_state_param.rodata_synth_0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %1 = cc.load %0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %2 = cc.alloca !cc.array<complex<f32> x 16>
    cc.store %1, %2 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %3 = quake.alloca !quake.veq<4>
    %4 = quake.init_state %3, %2 : (!quake.veq<4>, !cc.ptr<!cc.array<complex<f32> x 16>>) -> !quake.veq<4>
    quake.exp_pauli %cst, %4, %arg0 : (f64, !quake.veq<4>, !cc.charspan) -> ()
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
  cc.global constant @test_state_param.rodata_synth_0 (dense<[(5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00)]> : tensor<16xcomplex<f32>>) : !cc.array<complex<f32> x 16>
  func.func private @__nvqpp_cudaq_state_createFromData_fp32(!cc.ptr<i8>, i64) -> !cc.ptr<!cc.state>
}


// -----// IR Dump Before ConvertToDirectCalls (indirect-to-direct-calls) ('func.func' operation: @free) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_state_param(%arg0: !cc.charspan) attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 5.000000e-01 : f64
    %0 = cc.address_of @test_state_param.rodata_synth_0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %1 = cc.load %0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %2 = cc.alloca !cc.array<complex<f32> x 16>
    cc.store %1, %2 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %3 = quake.alloca !quake.veq<4>
    %4 = quake.init_state %3, %2 : (!quake.veq<4>, !cc.ptr<!cc.array<complex<f32> x 16>>) -> !quake.veq<4>
    quake.exp_pauli %cst, %4, %arg0 : (f64, !quake.veq<4>, !cc.charspan) -> ()
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
  cc.global constant @test_state_param.rodata_synth_0 (dense<[(5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00)]> : tensor<16xcomplex<f32>>) : !cc.array<complex<f32> x 16>
  func.func private @__nvqpp_cudaq_state_createFromData_fp32(!cc.ptr<i8>, i64) -> !cc.ptr<!cc.state>
}


// -----// IR Dump Before ApplyControlNegations (apply-control-negations) ('func.func' operation: @__nvqpp_initializer_list_to_vector_bool) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_state_param(%arg0: !cc.charspan) attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 5.000000e-01 : f64
    %0 = cc.address_of @test_state_param.rodata_synth_0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %1 = cc.load %0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %2 = cc.alloca !cc.array<complex<f32> x 16>
    cc.store %1, %2 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %3 = quake.alloca !quake.veq<4>
    %4 = quake.init_state %3, %2 : (!quake.veq<4>, !cc.ptr<!cc.array<complex<f32> x 16>>) -> !quake.veq<4>
    quake.exp_pauli %cst, %4, %arg0 : (f64, !quake.veq<4>, !cc.charspan) -> ()
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
  cc.global constant @test_state_param.rodata_synth_0 (dense<[(5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00)]> : tensor<16xcomplex<f32>>) : !cc.array<complex<f32> x 16>
  func.func private @__nvqpp_cudaq_state_createFromData_fp32(!cc.ptr<i8>, i64) -> !cc.ptr<!cc.state>
}


// -----// IR Dump Before ConvertToDirectCalls (indirect-to-direct-calls) ('func.func' operation: @__nvqpp_initializer_list_to_vector_bool) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_state_param(%arg0: !cc.charspan) attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 5.000000e-01 : f64
    %0 = cc.address_of @test_state_param.rodata_synth_0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %1 = cc.load %0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %2 = cc.alloca !cc.array<complex<f32> x 16>
    cc.store %1, %2 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %3 = quake.alloca !quake.veq<4>
    %4 = quake.init_state %3, %2 : (!quake.veq<4>, !cc.ptr<!cc.array<complex<f32> x 16>>) -> !quake.veq<4>
    quake.exp_pauli %cst, %4, %arg0 : (f64, !quake.veq<4>, !cc.charspan) -> ()
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
  cc.global constant @test_state_param.rodata_synth_0 (dense<[(5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00)]> : tensor<16xcomplex<f32>>) : !cc.array<complex<f32> x 16>
  func.func private @__nvqpp_cudaq_state_createFromData_fp32(!cc.ptr<i8>, i64) -> !cc.ptr<!cc.state>
}


// -----// IR Dump Before ApplyControlNegations (apply-control-negations) ('func.func' operation: @__nvqpp_vector_bool_to_initializer_list) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_state_param(%arg0: !cc.charspan) attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 5.000000e-01 : f64
    %0 = cc.address_of @test_state_param.rodata_synth_0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %1 = cc.load %0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %2 = cc.alloca !cc.array<complex<f32> x 16>
    cc.store %1, %2 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %3 = quake.alloca !quake.veq<4>
    %4 = quake.init_state %3, %2 : (!quake.veq<4>, !cc.ptr<!cc.array<complex<f32> x 16>>) -> !quake.veq<4>
    quake.exp_pauli %cst, %4, %arg0 : (f64, !quake.veq<4>, !cc.charspan) -> ()
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
  cc.global constant @test_state_param.rodata_synth_0 (dense<[(5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00)]> : tensor<16xcomplex<f32>>) : !cc.array<complex<f32> x 16>
  func.func private @__nvqpp_cudaq_state_createFromData_fp32(!cc.ptr<i8>, i64) -> !cc.ptr<!cc.state>
}


// -----// IR Dump Before ConvertToDirectCalls (indirect-to-direct-calls) ('func.func' operation: @__nvqpp_vector_bool_to_initializer_list) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_state_param(%arg0: !cc.charspan) attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 5.000000e-01 : f64
    %0 = cc.address_of @test_state_param.rodata_synth_0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %1 = cc.load %0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %2 = cc.alloca !cc.array<complex<f32> x 16>
    cc.store %1, %2 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %3 = quake.alloca !quake.veq<4>
    %4 = quake.init_state %3, %2 : (!quake.veq<4>, !cc.ptr<!cc.array<complex<f32> x 16>>) -> !quake.veq<4>
    quake.exp_pauli %cst, %4, %arg0 : (f64, !quake.veq<4>, !cc.charspan) -> ()
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
  cc.global constant @test_state_param.rodata_synth_0 (dense<[(5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00)]> : tensor<16xcomplex<f32>>) : !cc.array<complex<f32> x 16>
  func.func private @__nvqpp_cudaq_state_createFromData_fp32(!cc.ptr<i8>, i64) -> !cc.ptr<!cc.state>
}


// -----// IR Dump Before ApplyControlNegations (apply-control-negations) ('func.func' operation: @llvm.memcpy.p0i8.p0i8.i64) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_state_param(%arg0: !cc.charspan) attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 5.000000e-01 : f64
    %0 = cc.address_of @test_state_param.rodata_synth_0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %1 = cc.load %0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %2 = cc.alloca !cc.array<complex<f32> x 16>
    cc.store %1, %2 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %3 = quake.alloca !quake.veq<4>
    %4 = quake.init_state %3, %2 : (!quake.veq<4>, !cc.ptr<!cc.array<complex<f32> x 16>>) -> !quake.veq<4>
    quake.exp_pauli %cst, %4, %arg0 : (f64, !quake.veq<4>, !cc.charspan) -> ()
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
  cc.global constant @test_state_param.rodata_synth_0 (dense<[(5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00)]> : tensor<16xcomplex<f32>>) : !cc.array<complex<f32> x 16>
  func.func private @__nvqpp_cudaq_state_createFromData_fp32(!cc.ptr<i8>, i64) -> !cc.ptr<!cc.state>
}


// -----// IR Dump Before ConvertToDirectCalls (indirect-to-direct-calls) ('func.func' operation: @llvm.memcpy.p0i8.p0i8.i64) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_state_param(%arg0: !cc.charspan) attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 5.000000e-01 : f64
    %0 = cc.address_of @test_state_param.rodata_synth_0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %1 = cc.load %0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %2 = cc.alloca !cc.array<complex<f32> x 16>
    cc.store %1, %2 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %3 = quake.alloca !quake.veq<4>
    %4 = quake.init_state %3, %2 : (!quake.veq<4>, !cc.ptr<!cc.array<complex<f32> x 16>>) -> !quake.veq<4>
    quake.exp_pauli %cst, %4, %arg0 : (f64, !quake.veq<4>, !cc.charspan) -> ()
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
  cc.global constant @test_state_param.rodata_synth_0 (dense<[(5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00)]> : tensor<16xcomplex<f32>>) : !cc.array<complex<f32> x 16>
  func.func private @__nvqpp_cudaq_state_createFromData_fp32(!cc.ptr<i8>, i64) -> !cc.ptr<!cc.state>
}


// -----// IR Dump Before ApplyControlNegations (apply-control-negations) ('func.func' operation: @__nvqpp_cudaq_state_createFromData_fp32) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_state_param(%arg0: !cc.charspan) attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 5.000000e-01 : f64
    %0 = cc.address_of @test_state_param.rodata_synth_0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %1 = cc.load %0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %2 = cc.alloca !cc.array<complex<f32> x 16>
    cc.store %1, %2 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %3 = quake.alloca !quake.veq<4>
    %4 = quake.init_state %3, %2 : (!quake.veq<4>, !cc.ptr<!cc.array<complex<f32> x 16>>) -> !quake.veq<4>
    quake.exp_pauli %cst, %4, %arg0 : (f64, !quake.veq<4>, !cc.charspan) -> ()
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
  cc.global constant @test_state_param.rodata_synth_0 (dense<[(5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00)]> : tensor<16xcomplex<f32>>) : !cc.array<complex<f32> x 16>
  func.func private @__nvqpp_cudaq_state_createFromData_fp32(!cc.ptr<i8>, i64) -> !cc.ptr<!cc.state>
}


// -----// IR Dump Before ConvertToDirectCalls (indirect-to-direct-calls) ('func.func' operation: @__nvqpp_cudaq_state_createFromData_fp32) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_state_param(%arg0: !cc.charspan) attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 5.000000e-01 : f64
    %0 = cc.address_of @test_state_param.rodata_synth_0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %1 = cc.load %0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %2 = cc.alloca !cc.array<complex<f32> x 16>
    cc.store %1, %2 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %3 = quake.alloca !quake.veq<4>
    %4 = quake.init_state %3, %2 : (!quake.veq<4>, !cc.ptr<!cc.array<complex<f32> x 16>>) -> !quake.veq<4>
    quake.exp_pauli %cst, %4, %arg0 : (f64, !quake.veq<4>, !cc.charspan) -> ()
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
  cc.global constant @test_state_param.rodata_synth_0 (dense<[(5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00)]> : tensor<16xcomplex<f32>>) : !cc.array<complex<f32> x 16>
  func.func private @__nvqpp_cudaq_state_createFromData_fp32(!cc.ptr<i8>, i64) -> !cc.ptr<!cc.state>
}


// -----// IR Dump Before Inliner (inline) ('builtin.module' operation) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_state_param(%arg0: !cc.charspan) attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 5.000000e-01 : f64
    %0 = cc.address_of @test_state_param.rodata_synth_0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %1 = cc.load %0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %2 = cc.alloca !cc.array<complex<f32> x 16>
    cc.store %1, %2 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %3 = quake.alloca !quake.veq<4>
    %4 = quake.init_state %3, %2 : (!quake.veq<4>, !cc.ptr<!cc.array<complex<f32> x 16>>) -> !quake.veq<4>
    quake.exp_pauli %cst, %4, %arg0 : (f64, !quake.veq<4>, !cc.charspan) -> ()
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
  cc.global constant @test_state_param.rodata_synth_0 (dense<[(5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00)]> : tensor<16xcomplex<f32>>) : !cc.array<complex<f32> x 16>
  func.func private @__nvqpp_cudaq_state_createFromData_fp32(!cc.ptr<i8>, i64) -> !cc.ptr<!cc.state>
}


// -----// IR Dump Before Canonicalizer (canonicalize) ('func.func' operation: @__nvqpp__mlirgen__test_state_param) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_state_param(%arg0: !cc.charspan) attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 5.000000e-01 : f64
    %0 = cc.address_of @test_state_param.rodata_synth_0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %1 = cc.load %0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %2 = cc.alloca !cc.array<complex<f32> x 16>
    cc.store %1, %2 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %3 = quake.alloca !quake.veq<4>
    %4 = quake.init_state %3, %2 : (!quake.veq<4>, !cc.ptr<!cc.array<complex<f32> x 16>>) -> !quake.veq<4>
    quake.exp_pauli %cst, %4, %arg0 : (f64, !quake.veq<4>, !cc.charspan) -> ()
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
  cc.global constant @test_state_param.rodata_synth_0 (dense<[(5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00)]> : tensor<16xcomplex<f32>>) : !cc.array<complex<f32> x 16>
  func.func private @__nvqpp_cudaq_state_createFromData_fp32(!cc.ptr<i8>, i64) -> !cc.ptr<!cc.state>
}


// -----// IR Dump Before CheckKernelCalls (check-kernel-calls) ('func.func' operation: @__nvqpp__mlirgen__test_state_param) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_state_param(%arg0: !cc.charspan) attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 5.000000e-01 : f64
    %0 = cc.address_of @test_state_param.rodata_synth_0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %1 = cc.load %0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %2 = cc.alloca !cc.array<complex<f32> x 16>
    cc.store %1, %2 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %3 = quake.alloca !quake.veq<4>
    %4 = quake.init_state %3, %2 : (!quake.veq<4>, !cc.ptr<!cc.array<complex<f32> x 16>>) -> !quake.veq<4>
    quake.exp_pauli %cst, %4, %arg0 : (f64, !quake.veq<4>, !cc.charspan) -> ()
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
  cc.global constant @test_state_param.rodata_synth_0 (dense<[(5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00)]> : tensor<16xcomplex<f32>>) : !cc.array<complex<f32> x 16>
  func.func private @__nvqpp_cudaq_state_createFromData_fp32(!cc.ptr<i8>, i64) -> !cc.ptr<!cc.state>
}


// -----// IR Dump Before CheckKernelCalls (check-kernel-calls) ('func.func' operation: @__nvqpp_cudaq_state_numberOfQubits) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_state_param(%arg0: !cc.charspan) attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 5.000000e-01 : f64
    %0 = cc.address_of @test_state_param.rodata_synth_0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %1 = cc.load %0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %2 = cc.alloca !cc.array<complex<f32> x 16>
    cc.store %1, %2 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %3 = quake.alloca !quake.veq<4>
    %4 = quake.init_state %3, %2 : (!quake.veq<4>, !cc.ptr<!cc.array<complex<f32> x 16>>) -> !quake.veq<4>
    quake.exp_pauli %cst, %4, %arg0 : (f64, !quake.veq<4>, !cc.charspan) -> ()
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
  cc.global constant @test_state_param.rodata_synth_0 (dense<[(5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00)]> : tensor<16xcomplex<f32>>) : !cc.array<complex<f32> x 16>
  func.func private @__nvqpp_cudaq_state_createFromData_fp32(!cc.ptr<i8>, i64) -> !cc.ptr<!cc.state>
}


// -----// IR Dump Before CheckKernelCalls (check-kernel-calls) ('func.func' operation: @streamlinedLaunchKernel) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_state_param(%arg0: !cc.charspan) attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 5.000000e-01 : f64
    %0 = cc.address_of @test_state_param.rodata_synth_0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %1 = cc.load %0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %2 = cc.alloca !cc.array<complex<f32> x 16>
    cc.store %1, %2 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %3 = quake.alloca !quake.veq<4>
    %4 = quake.init_state %3, %2 : (!quake.veq<4>, !cc.ptr<!cc.array<complex<f32> x 16>>) -> !quake.veq<4>
    quake.exp_pauli %cst, %4, %arg0 : (f64, !quake.veq<4>, !cc.charspan) -> ()
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
  cc.global constant @test_state_param.rodata_synth_0 (dense<[(5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00)]> : tensor<16xcomplex<f32>>) : !cc.array<complex<f32> x 16>
  func.func private @__nvqpp_cudaq_state_createFromData_fp32(!cc.ptr<i8>, i64) -> !cc.ptr<!cc.state>
}


// -----// IR Dump Before CheckKernelCalls (check-kernel-calls) ('func.func' operation: @cudaqRegisterKernelName) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_state_param(%arg0: !cc.charspan) attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 5.000000e-01 : f64
    %0 = cc.address_of @test_state_param.rodata_synth_0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %1 = cc.load %0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %2 = cc.alloca !cc.array<complex<f32> x 16>
    cc.store %1, %2 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %3 = quake.alloca !quake.veq<4>
    %4 = quake.init_state %3, %2 : (!quake.veq<4>, !cc.ptr<!cc.array<complex<f32> x 16>>) -> !quake.veq<4>
    quake.exp_pauli %cst, %4, %arg0 : (f64, !quake.veq<4>, !cc.charspan) -> ()
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
  cc.global constant @test_state_param.rodata_synth_0 (dense<[(5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00)]> : tensor<16xcomplex<f32>>) : !cc.array<complex<f32> x 16>
  func.func private @__nvqpp_cudaq_state_createFromData_fp32(!cc.ptr<i8>, i64) -> !cc.ptr<!cc.state>
}


// -----// IR Dump Before CheckKernelCalls (check-kernel-calls) ('func.func' operation: @cudaqRegisterArgsCreator) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_state_param(%arg0: !cc.charspan) attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 5.000000e-01 : f64
    %0 = cc.address_of @test_state_param.rodata_synth_0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %1 = cc.load %0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %2 = cc.alloca !cc.array<complex<f32> x 16>
    cc.store %1, %2 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %3 = quake.alloca !quake.veq<4>
    %4 = quake.init_state %3, %2 : (!quake.veq<4>, !cc.ptr<!cc.array<complex<f32> x 16>>) -> !quake.veq<4>
    quake.exp_pauli %cst, %4, %arg0 : (f64, !quake.veq<4>, !cc.charspan) -> ()
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
  cc.global constant @test_state_param.rodata_synth_0 (dense<[(5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00)]> : tensor<16xcomplex<f32>>) : !cc.array<complex<f32> x 16>
  func.func private @__nvqpp_cudaq_state_createFromData_fp32(!cc.ptr<i8>, i64) -> !cc.ptr<!cc.state>
}


// -----// IR Dump Before CheckKernelCalls (check-kernel-calls) ('func.func' operation: @malloc) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_state_param(%arg0: !cc.charspan) attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 5.000000e-01 : f64
    %0 = cc.address_of @test_state_param.rodata_synth_0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %1 = cc.load %0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %2 = cc.alloca !cc.array<complex<f32> x 16>
    cc.store %1, %2 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %3 = quake.alloca !quake.veq<4>
    %4 = quake.init_state %3, %2 : (!quake.veq<4>, !cc.ptr<!cc.array<complex<f32> x 16>>) -> !quake.veq<4>
    quake.exp_pauli %cst, %4, %arg0 : (f64, !quake.veq<4>, !cc.charspan) -> ()
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
  cc.global constant @test_state_param.rodata_synth_0 (dense<[(5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00)]> : tensor<16xcomplex<f32>>) : !cc.array<complex<f32> x 16>
  func.func private @__nvqpp_cudaq_state_createFromData_fp32(!cc.ptr<i8>, i64) -> !cc.ptr<!cc.state>
}


// -----// IR Dump Before CheckKernelCalls (check-kernel-calls) ('func.func' operation: @free) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_state_param(%arg0: !cc.charspan) attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 5.000000e-01 : f64
    %0 = cc.address_of @test_state_param.rodata_synth_0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %1 = cc.load %0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %2 = cc.alloca !cc.array<complex<f32> x 16>
    cc.store %1, %2 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %3 = quake.alloca !quake.veq<4>
    %4 = quake.init_state %3, %2 : (!quake.veq<4>, !cc.ptr<!cc.array<complex<f32> x 16>>) -> !quake.veq<4>
    quake.exp_pauli %cst, %4, %arg0 : (f64, !quake.veq<4>, !cc.charspan) -> ()
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
  cc.global constant @test_state_param.rodata_synth_0 (dense<[(5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00)]> : tensor<16xcomplex<f32>>) : !cc.array<complex<f32> x 16>
  func.func private @__nvqpp_cudaq_state_createFromData_fp32(!cc.ptr<i8>, i64) -> !cc.ptr<!cc.state>
}


// -----// IR Dump Before CheckKernelCalls (check-kernel-calls) ('func.func' operation: @__nvqpp_initializer_list_to_vector_bool) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_state_param(%arg0: !cc.charspan) attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 5.000000e-01 : f64
    %0 = cc.address_of @test_state_param.rodata_synth_0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %1 = cc.load %0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %2 = cc.alloca !cc.array<complex<f32> x 16>
    cc.store %1, %2 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %3 = quake.alloca !quake.veq<4>
    %4 = quake.init_state %3, %2 : (!quake.veq<4>, !cc.ptr<!cc.array<complex<f32> x 16>>) -> !quake.veq<4>
    quake.exp_pauli %cst, %4, %arg0 : (f64, !quake.veq<4>, !cc.charspan) -> ()
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
  cc.global constant @test_state_param.rodata_synth_0 (dense<[(5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00)]> : tensor<16xcomplex<f32>>) : !cc.array<complex<f32> x 16>
  func.func private @__nvqpp_cudaq_state_createFromData_fp32(!cc.ptr<i8>, i64) -> !cc.ptr<!cc.state>
}


// -----// IR Dump Before CheckKernelCalls (check-kernel-calls) ('func.func' operation: @__nvqpp_vector_bool_to_initializer_list) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_state_param(%arg0: !cc.charspan) attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 5.000000e-01 : f64
    %0 = cc.address_of @test_state_param.rodata_synth_0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %1 = cc.load %0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %2 = cc.alloca !cc.array<complex<f32> x 16>
    cc.store %1, %2 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %3 = quake.alloca !quake.veq<4>
    %4 = quake.init_state %3, %2 : (!quake.veq<4>, !cc.ptr<!cc.array<complex<f32> x 16>>) -> !quake.veq<4>
    quake.exp_pauli %cst, %4, %arg0 : (f64, !quake.veq<4>, !cc.charspan) -> ()
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
  cc.global constant @test_state_param.rodata_synth_0 (dense<[(5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00)]> : tensor<16xcomplex<f32>>) : !cc.array<complex<f32> x 16>
  func.func private @__nvqpp_cudaq_state_createFromData_fp32(!cc.ptr<i8>, i64) -> !cc.ptr<!cc.state>
}


// -----// IR Dump Before CheckKernelCalls (check-kernel-calls) ('func.func' operation: @llvm.memcpy.p0i8.p0i8.i64) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_state_param(%arg0: !cc.charspan) attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 5.000000e-01 : f64
    %0 = cc.address_of @test_state_param.rodata_synth_0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %1 = cc.load %0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %2 = cc.alloca !cc.array<complex<f32> x 16>
    cc.store %1, %2 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %3 = quake.alloca !quake.veq<4>
    %4 = quake.init_state %3, %2 : (!quake.veq<4>, !cc.ptr<!cc.array<complex<f32> x 16>>) -> !quake.veq<4>
    quake.exp_pauli %cst, %4, %arg0 : (f64, !quake.veq<4>, !cc.charspan) -> ()
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
  cc.global constant @test_state_param.rodata_synth_0 (dense<[(5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00)]> : tensor<16xcomplex<f32>>) : !cc.array<complex<f32> x 16>
  func.func private @__nvqpp_cudaq_state_createFromData_fp32(!cc.ptr<i8>, i64) -> !cc.ptr<!cc.state>
}


// -----// IR Dump Before CheckKernelCalls (check-kernel-calls) ('func.func' operation: @__nvqpp_cudaq_state_createFromData_fp32) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_state_param(%arg0: !cc.charspan) attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 5.000000e-01 : f64
    %0 = cc.address_of @test_state_param.rodata_synth_0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %1 = cc.load %0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %2 = cc.alloca !cc.array<complex<f32> x 16>
    cc.store %1, %2 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %3 = quake.alloca !quake.veq<4>
    %4 = quake.init_state %3, %2 : (!quake.veq<4>, !cc.ptr<!cc.array<complex<f32> x 16>>) -> !quake.veq<4>
    quake.exp_pauli %cst, %4, %arg0 : (f64, !quake.veq<4>, !cc.charspan) -> ()
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
  cc.global constant @test_state_param.rodata_synth_0 (dense<[(5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00)]> : tensor<16xcomplex<f32>>) : !cc.array<complex<f32> x 16>
  func.func private @__nvqpp_cudaq_state_createFromData_fp32(!cc.ptr<i8>, i64) -> !cc.ptr<!cc.state>
}


// -----// IR Dump Before Canonicalizer (canonicalize) ('builtin.module' operation) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_state_param(%arg0: !cc.charspan) attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 5.000000e-01 : f64
    %0 = cc.address_of @test_state_param.rodata_synth_0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %1 = cc.load %0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %2 = cc.alloca !cc.array<complex<f32> x 16>
    cc.store %1, %2 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %3 = quake.alloca !quake.veq<4>
    %4 = quake.init_state %3, %2 : (!quake.veq<4>, !cc.ptr<!cc.array<complex<f32> x 16>>) -> !quake.veq<4>
    quake.exp_pauli %cst, %4, %arg0 : (f64, !quake.veq<4>, !cc.charspan) -> ()
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
  cc.global constant @test_state_param.rodata_synth_0 (dense<[(5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00)]> : tensor<16xcomplex<f32>>) : !cc.array<complex<f32> x 16>
  func.func private @__nvqpp_cudaq_state_createFromData_fp32(!cc.ptr<i8>, i64) -> !cc.ptr<!cc.state>
}


// -----// IR Dump Before UnwindLowering (unwind-lowering) ('func.func' operation: @__nvqpp__mlirgen__test_state_param) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_state_param(%arg0: !cc.charspan) attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 5.000000e-01 : f64
    %0 = cc.address_of @test_state_param.rodata_synth_0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %1 = cc.load %0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %2 = cc.alloca !cc.array<complex<f32> x 16>
    cc.store %1, %2 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %3 = quake.alloca !quake.veq<4>
    %4 = quake.init_state %3, %2 : (!quake.veq<4>, !cc.ptr<!cc.array<complex<f32> x 16>>) -> !quake.veq<4>
    quake.exp_pauli %cst, %4, %arg0 : (f64, !quake.veq<4>, !cc.charspan) -> ()
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
  cc.global constant @test_state_param.rodata_synth_0 (dense<[(5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00)]> : tensor<16xcomplex<f32>>) : !cc.array<complex<f32> x 16>
  func.func private @__nvqpp_cudaq_state_createFromData_fp32(!cc.ptr<i8>, i64) -> !cc.ptr<!cc.state>
}


// -----// IR Dump Before UnwindLowering (unwind-lowering) ('func.func' operation: @__nvqpp_cudaq_state_numberOfQubits) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_state_param(%arg0: !cc.charspan) attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 5.000000e-01 : f64
    %0 = cc.address_of @test_state_param.rodata_synth_0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %1 = cc.load %0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %2 = cc.alloca !cc.array<complex<f32> x 16>
    cc.store %1, %2 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %3 = quake.alloca !quake.veq<4>
    %4 = quake.init_state %3, %2 : (!quake.veq<4>, !cc.ptr<!cc.array<complex<f32> x 16>>) -> !quake.veq<4>
    quake.exp_pauli %cst, %4, %arg0 : (f64, !quake.veq<4>, !cc.charspan) -> ()
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
  cc.global constant @test_state_param.rodata_synth_0 (dense<[(5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00)]> : tensor<16xcomplex<f32>>) : !cc.array<complex<f32> x 16>
  func.func private @__nvqpp_cudaq_state_createFromData_fp32(!cc.ptr<i8>, i64) -> !cc.ptr<!cc.state>
}


// -----// IR Dump Before UnwindLowering (unwind-lowering) ('func.func' operation: @streamlinedLaunchKernel) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_state_param(%arg0: !cc.charspan) attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 5.000000e-01 : f64
    %0 = cc.address_of @test_state_param.rodata_synth_0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %1 = cc.load %0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %2 = cc.alloca !cc.array<complex<f32> x 16>
    cc.store %1, %2 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %3 = quake.alloca !quake.veq<4>
    %4 = quake.init_state %3, %2 : (!quake.veq<4>, !cc.ptr<!cc.array<complex<f32> x 16>>) -> !quake.veq<4>
    quake.exp_pauli %cst, %4, %arg0 : (f64, !quake.veq<4>, !cc.charspan) -> ()
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
  cc.global constant @test_state_param.rodata_synth_0 (dense<[(5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00)]> : tensor<16xcomplex<f32>>) : !cc.array<complex<f32> x 16>
  func.func private @__nvqpp_cudaq_state_createFromData_fp32(!cc.ptr<i8>, i64) -> !cc.ptr<!cc.state>
}


// -----// IR Dump Before UnwindLowering (unwind-lowering) ('func.func' operation: @cudaqRegisterKernelName) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_state_param(%arg0: !cc.charspan) attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 5.000000e-01 : f64
    %0 = cc.address_of @test_state_param.rodata_synth_0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %1 = cc.load %0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %2 = cc.alloca !cc.array<complex<f32> x 16>
    cc.store %1, %2 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %3 = quake.alloca !quake.veq<4>
    %4 = quake.init_state %3, %2 : (!quake.veq<4>, !cc.ptr<!cc.array<complex<f32> x 16>>) -> !quake.veq<4>
    quake.exp_pauli %cst, %4, %arg0 : (f64, !quake.veq<4>, !cc.charspan) -> ()
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
  cc.global constant @test_state_param.rodata_synth_0 (dense<[(5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00)]> : tensor<16xcomplex<f32>>) : !cc.array<complex<f32> x 16>
  func.func private @__nvqpp_cudaq_state_createFromData_fp32(!cc.ptr<i8>, i64) -> !cc.ptr<!cc.state>
}


// -----// IR Dump Before UnwindLowering (unwind-lowering) ('func.func' operation: @cudaqRegisterArgsCreator) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_state_param(%arg0: !cc.charspan) attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 5.000000e-01 : f64
    %0 = cc.address_of @test_state_param.rodata_synth_0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %1 = cc.load %0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %2 = cc.alloca !cc.array<complex<f32> x 16>
    cc.store %1, %2 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %3 = quake.alloca !quake.veq<4>
    %4 = quake.init_state %3, %2 : (!quake.veq<4>, !cc.ptr<!cc.array<complex<f32> x 16>>) -> !quake.veq<4>
    quake.exp_pauli %cst, %4, %arg0 : (f64, !quake.veq<4>, !cc.charspan) -> ()
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
  cc.global constant @test_state_param.rodata_synth_0 (dense<[(5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00)]> : tensor<16xcomplex<f32>>) : !cc.array<complex<f32> x 16>
  func.func private @__nvqpp_cudaq_state_createFromData_fp32(!cc.ptr<i8>, i64) -> !cc.ptr<!cc.state>
}


// -----// IR Dump Before UnwindLowering (unwind-lowering) ('func.func' operation: @malloc) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_state_param(%arg0: !cc.charspan) attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 5.000000e-01 : f64
    %0 = cc.address_of @test_state_param.rodata_synth_0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %1 = cc.load %0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %2 = cc.alloca !cc.array<complex<f32> x 16>
    cc.store %1, %2 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %3 = quake.alloca !quake.veq<4>
    %4 = quake.init_state %3, %2 : (!quake.veq<4>, !cc.ptr<!cc.array<complex<f32> x 16>>) -> !quake.veq<4>
    quake.exp_pauli %cst, %4, %arg0 : (f64, !quake.veq<4>, !cc.charspan) -> ()
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
  cc.global constant @test_state_param.rodata_synth_0 (dense<[(5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00)]> : tensor<16xcomplex<f32>>) : !cc.array<complex<f32> x 16>
  func.func private @__nvqpp_cudaq_state_createFromData_fp32(!cc.ptr<i8>, i64) -> !cc.ptr<!cc.state>
}


// -----// IR Dump Before UnwindLowering (unwind-lowering) ('func.func' operation: @free) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_state_param(%arg0: !cc.charspan) attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 5.000000e-01 : f64
    %0 = cc.address_of @test_state_param.rodata_synth_0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %1 = cc.load %0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %2 = cc.alloca !cc.array<complex<f32> x 16>
    cc.store %1, %2 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %3 = quake.alloca !quake.veq<4>
    %4 = quake.init_state %3, %2 : (!quake.veq<4>, !cc.ptr<!cc.array<complex<f32> x 16>>) -> !quake.veq<4>
    quake.exp_pauli %cst, %4, %arg0 : (f64, !quake.veq<4>, !cc.charspan) -> ()
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
  cc.global constant @test_state_param.rodata_synth_0 (dense<[(5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00)]> : tensor<16xcomplex<f32>>) : !cc.array<complex<f32> x 16>
  func.func private @__nvqpp_cudaq_state_createFromData_fp32(!cc.ptr<i8>, i64) -> !cc.ptr<!cc.state>
}


// -----// IR Dump Before UnwindLowering (unwind-lowering) ('func.func' operation: @__nvqpp_initializer_list_to_vector_bool) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_state_param(%arg0: !cc.charspan) attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 5.000000e-01 : f64
    %0 = cc.address_of @test_state_param.rodata_synth_0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %1 = cc.load %0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %2 = cc.alloca !cc.array<complex<f32> x 16>
    cc.store %1, %2 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %3 = quake.alloca !quake.veq<4>
    %4 = quake.init_state %3, %2 : (!quake.veq<4>, !cc.ptr<!cc.array<complex<f32> x 16>>) -> !quake.veq<4>
    quake.exp_pauli %cst, %4, %arg0 : (f64, !quake.veq<4>, !cc.charspan) -> ()
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
  cc.global constant @test_state_param.rodata_synth_0 (dense<[(5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00)]> : tensor<16xcomplex<f32>>) : !cc.array<complex<f32> x 16>
  func.func private @__nvqpp_cudaq_state_createFromData_fp32(!cc.ptr<i8>, i64) -> !cc.ptr<!cc.state>
}


// -----// IR Dump Before UnwindLowering (unwind-lowering) ('func.func' operation: @__nvqpp_vector_bool_to_initializer_list) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_state_param(%arg0: !cc.charspan) attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 5.000000e-01 : f64
    %0 = cc.address_of @test_state_param.rodata_synth_0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %1 = cc.load %0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %2 = cc.alloca !cc.array<complex<f32> x 16>
    cc.store %1, %2 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %3 = quake.alloca !quake.veq<4>
    %4 = quake.init_state %3, %2 : (!quake.veq<4>, !cc.ptr<!cc.array<complex<f32> x 16>>) -> !quake.veq<4>
    quake.exp_pauli %cst, %4, %arg0 : (f64, !quake.veq<4>, !cc.charspan) -> ()
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
  cc.global constant @test_state_param.rodata_synth_0 (dense<[(5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00)]> : tensor<16xcomplex<f32>>) : !cc.array<complex<f32> x 16>
  func.func private @__nvqpp_cudaq_state_createFromData_fp32(!cc.ptr<i8>, i64) -> !cc.ptr<!cc.state>
}


// -----// IR Dump Before UnwindLowering (unwind-lowering) ('func.func' operation: @llvm.memcpy.p0i8.p0i8.i64) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_state_param(%arg0: !cc.charspan) attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 5.000000e-01 : f64
    %0 = cc.address_of @test_state_param.rodata_synth_0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %1 = cc.load %0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %2 = cc.alloca !cc.array<complex<f32> x 16>
    cc.store %1, %2 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %3 = quake.alloca !quake.veq<4>
    %4 = quake.init_state %3, %2 : (!quake.veq<4>, !cc.ptr<!cc.array<complex<f32> x 16>>) -> !quake.veq<4>
    quake.exp_pauli %cst, %4, %arg0 : (f64, !quake.veq<4>, !cc.charspan) -> ()
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
  cc.global constant @test_state_param.rodata_synth_0 (dense<[(5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00)]> : tensor<16xcomplex<f32>>) : !cc.array<complex<f32> x 16>
  func.func private @__nvqpp_cudaq_state_createFromData_fp32(!cc.ptr<i8>, i64) -> !cc.ptr<!cc.state>
}


// -----// IR Dump Before UnwindLowering (unwind-lowering) ('func.func' operation: @__nvqpp_cudaq_state_createFromData_fp32) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_state_param(%arg0: !cc.charspan) attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 5.000000e-01 : f64
    %0 = cc.address_of @test_state_param.rodata_synth_0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %1 = cc.load %0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %2 = cc.alloca !cc.array<complex<f32> x 16>
    cc.store %1, %2 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %3 = quake.alloca !quake.veq<4>
    %4 = quake.init_state %3, %2 : (!quake.veq<4>, !cc.ptr<!cc.array<complex<f32> x 16>>) -> !quake.veq<4>
    quake.exp_pauli %cst, %4, %arg0 : (f64, !quake.veq<4>, !cc.charspan) -> ()
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
  cc.global constant @test_state_param.rodata_synth_0 (dense<[(5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00)]> : tensor<16xcomplex<f32>>) : !cc.array<complex<f32> x 16>
  func.func private @__nvqpp_cudaq_state_createFromData_fp32(!cc.ptr<i8>, i64) -> !cc.ptr<!cc.state>
}


// -----// IR Dump Before Canonicalizer (canonicalize) ('builtin.module' operation) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_state_param(%arg0: !cc.charspan) attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 5.000000e-01 : f64
    %0 = cc.address_of @test_state_param.rodata_synth_0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %1 = cc.load %0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %2 = cc.alloca !cc.array<complex<f32> x 16>
    cc.store %1, %2 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %3 = quake.alloca !quake.veq<4>
    %4 = quake.init_state %3, %2 : (!quake.veq<4>, !cc.ptr<!cc.array<complex<f32> x 16>>) -> !quake.veq<4>
    quake.exp_pauli %cst, %4, %arg0 : (f64, !quake.veq<4>, !cc.charspan) -> ()
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
  cc.global constant @test_state_param.rodata_synth_0 (dense<[(5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00)]> : tensor<16xcomplex<f32>>) : !cc.array<complex<f32> x 16>
  func.func private @__nvqpp_cudaq_state_createFromData_fp32(!cc.ptr<i8>, i64) -> !cc.ptr<!cc.state>
}


// -----// IR Dump Before ApplySpecialization (apply-op-specialization) ('builtin.module' operation) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_state_param(%arg0: !cc.charspan) attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 5.000000e-01 : f64
    %0 = cc.address_of @test_state_param.rodata_synth_0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %1 = cc.load %0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %2 = cc.alloca !cc.array<complex<f32> x 16>
    cc.store %1, %2 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %3 = quake.alloca !quake.veq<4>
    %4 = quake.init_state %3, %2 : (!quake.veq<4>, !cc.ptr<!cc.array<complex<f32> x 16>>) -> !quake.veq<4>
    quake.exp_pauli %cst, %4, %arg0 : (f64, !quake.veq<4>, !cc.charspan) -> ()
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
  cc.global constant @test_state_param.rodata_synth_0 (dense<[(5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00)]> : tensor<16xcomplex<f32>>) : !cc.array<complex<f32> x 16>
  func.func private @__nvqpp_cudaq_state_createFromData_fp32(!cc.ptr<i8>, i64) -> !cc.ptr<!cc.state>
}


// -----// IR Dump Before ExpandMeasurements (expand-measurements) ('builtin.module' operation) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_state_param(%arg0: !cc.charspan) attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 5.000000e-01 : f64
    %0 = cc.address_of @test_state_param.rodata_synth_0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %1 = cc.load %0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %2 = cc.alloca !cc.array<complex<f32> x 16>
    cc.store %1, %2 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %3 = quake.alloca !quake.veq<4>
    %4 = quake.init_state %3, %2 : (!quake.veq<4>, !cc.ptr<!cc.array<complex<f32> x 16>>) -> !quake.veq<4>
    quake.exp_pauli %cst, %4, %arg0 : (f64, !quake.veq<4>, !cc.charspan) -> ()
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
  cc.global constant @test_state_param.rodata_synth_0 (dense<[(5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00)]> : tensor<16xcomplex<f32>>) : !cc.array<complex<f32> x 16>
  func.func private @__nvqpp_cudaq_state_createFromData_fp32(!cc.ptr<i8>, i64) -> !cc.ptr<!cc.state>
}


// -----// IR Dump Before MemToReg (memtoreg) ('func.func' operation: @__nvqpp__mlirgen__test_state_param) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_state_param(%arg0: !cc.charspan) attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 5.000000e-01 : f64
    %0 = cc.address_of @test_state_param.rodata_synth_0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %1 = cc.load %0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %2 = cc.alloca !cc.array<complex<f32> x 16>
    cc.store %1, %2 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %3 = quake.alloca !quake.veq<4>
    %4 = quake.init_state %3, %2 : (!quake.veq<4>, !cc.ptr<!cc.array<complex<f32> x 16>>) -> !quake.veq<4>
    quake.exp_pauli %cst, %4, %arg0 : (f64, !quake.veq<4>, !cc.charspan) -> ()
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
  cc.global constant @test_state_param.rodata_synth_0 (dense<[(5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00)]> : tensor<16xcomplex<f32>>) : !cc.array<complex<f32> x 16>
  func.func private @__nvqpp_cudaq_state_createFromData_fp32(!cc.ptr<i8>, i64) -> !cc.ptr<!cc.state>
}


// -----// IR Dump Before MemToReg (memtoreg) ('func.func' operation: @__nvqpp_cudaq_state_numberOfQubits) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_state_param(%arg0: !cc.charspan) attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 5.000000e-01 : f64
    %0 = cc.address_of @test_state_param.rodata_synth_0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %1 = cc.load %0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %2 = cc.alloca !cc.array<complex<f32> x 16>
    cc.store %1, %2 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %3 = quake.alloca !quake.veq<4>
    %4 = quake.init_state %3, %2 : (!quake.veq<4>, !cc.ptr<!cc.array<complex<f32> x 16>>) -> !quake.veq<4>
    quake.exp_pauli %cst, %4, %arg0 : (f64, !quake.veq<4>, !cc.charspan) -> ()
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
  cc.global constant @test_state_param.rodata_synth_0 (dense<[(5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00)]> : tensor<16xcomplex<f32>>) : !cc.array<complex<f32> x 16>
  func.func private @__nvqpp_cudaq_state_createFromData_fp32(!cc.ptr<i8>, i64) -> !cc.ptr<!cc.state>
}


// -----// IR Dump Before MemToReg (memtoreg) ('func.func' operation: @streamlinedLaunchKernel) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_state_param(%arg0: !cc.charspan) attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 5.000000e-01 : f64
    %0 = cc.address_of @test_state_param.rodata_synth_0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %1 = cc.load %0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %2 = cc.alloca !cc.array<complex<f32> x 16>
    cc.store %1, %2 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %3 = quake.alloca !quake.veq<4>
    %4 = quake.init_state %3, %2 : (!quake.veq<4>, !cc.ptr<!cc.array<complex<f32> x 16>>) -> !quake.veq<4>
    quake.exp_pauli %cst, %4, %arg0 : (f64, !quake.veq<4>, !cc.charspan) -> ()
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
  cc.global constant @test_state_param.rodata_synth_0 (dense<[(5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00)]> : tensor<16xcomplex<f32>>) : !cc.array<complex<f32> x 16>
  func.func private @__nvqpp_cudaq_state_createFromData_fp32(!cc.ptr<i8>, i64) -> !cc.ptr<!cc.state>
}


// -----// IR Dump Before MemToReg (memtoreg) ('func.func' operation: @cudaqRegisterKernelName) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_state_param(%arg0: !cc.charspan) attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 5.000000e-01 : f64
    %0 = cc.address_of @test_state_param.rodata_synth_0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %1 = cc.load %0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %2 = cc.alloca !cc.array<complex<f32> x 16>
    cc.store %1, %2 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %3 = quake.alloca !quake.veq<4>
    %4 = quake.init_state %3, %2 : (!quake.veq<4>, !cc.ptr<!cc.array<complex<f32> x 16>>) -> !quake.veq<4>
    quake.exp_pauli %cst, %4, %arg0 : (f64, !quake.veq<4>, !cc.charspan) -> ()
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
  cc.global constant @test_state_param.rodata_synth_0 (dense<[(5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00)]> : tensor<16xcomplex<f32>>) : !cc.array<complex<f32> x 16>
  func.func private @__nvqpp_cudaq_state_createFromData_fp32(!cc.ptr<i8>, i64) -> !cc.ptr<!cc.state>
}


// -----// IR Dump Before MemToReg (memtoreg) ('func.func' operation: @cudaqRegisterArgsCreator) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_state_param(%arg0: !cc.charspan) attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 5.000000e-01 : f64
    %0 = cc.address_of @test_state_param.rodata_synth_0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %1 = cc.load %0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %2 = cc.alloca !cc.array<complex<f32> x 16>
    cc.store %1, %2 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %3 = quake.alloca !quake.veq<4>
    %4 = quake.init_state %3, %2 : (!quake.veq<4>, !cc.ptr<!cc.array<complex<f32> x 16>>) -> !quake.veq<4>
    quake.exp_pauli %cst, %4, %arg0 : (f64, !quake.veq<4>, !cc.charspan) -> ()
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
  cc.global constant @test_state_param.rodata_synth_0 (dense<[(5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00)]> : tensor<16xcomplex<f32>>) : !cc.array<complex<f32> x 16>
  func.func private @__nvqpp_cudaq_state_createFromData_fp32(!cc.ptr<i8>, i64) -> !cc.ptr<!cc.state>
}


// -----// IR Dump Before MemToReg (memtoreg) ('func.func' operation: @malloc) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_state_param(%arg0: !cc.charspan) attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 5.000000e-01 : f64
    %0 = cc.address_of @test_state_param.rodata_synth_0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %1 = cc.load %0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %2 = cc.alloca !cc.array<complex<f32> x 16>
    cc.store %1, %2 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %3 = quake.alloca !quake.veq<4>
    %4 = quake.init_state %3, %2 : (!quake.veq<4>, !cc.ptr<!cc.array<complex<f32> x 16>>) -> !quake.veq<4>
    quake.exp_pauli %cst, %4, %arg0 : (f64, !quake.veq<4>, !cc.charspan) -> ()
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
  cc.global constant @test_state_param.rodata_synth_0 (dense<[(5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00)]> : tensor<16xcomplex<f32>>) : !cc.array<complex<f32> x 16>
  func.func private @__nvqpp_cudaq_state_createFromData_fp32(!cc.ptr<i8>, i64) -> !cc.ptr<!cc.state>
}


// -----// IR Dump Before MemToReg (memtoreg) ('func.func' operation: @free) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_state_param(%arg0: !cc.charspan) attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 5.000000e-01 : f64
    %0 = cc.address_of @test_state_param.rodata_synth_0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %1 = cc.load %0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %2 = cc.alloca !cc.array<complex<f32> x 16>
    cc.store %1, %2 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %3 = quake.alloca !quake.veq<4>
    %4 = quake.init_state %3, %2 : (!quake.veq<4>, !cc.ptr<!cc.array<complex<f32> x 16>>) -> !quake.veq<4>
    quake.exp_pauli %cst, %4, %arg0 : (f64, !quake.veq<4>, !cc.charspan) -> ()
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
  cc.global constant @test_state_param.rodata_synth_0 (dense<[(5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00)]> : tensor<16xcomplex<f32>>) : !cc.array<complex<f32> x 16>
  func.func private @__nvqpp_cudaq_state_createFromData_fp32(!cc.ptr<i8>, i64) -> !cc.ptr<!cc.state>
}


// -----// IR Dump Before MemToReg (memtoreg) ('func.func' operation: @__nvqpp_initializer_list_to_vector_bool) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_state_param(%arg0: !cc.charspan) attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 5.000000e-01 : f64
    %0 = cc.address_of @test_state_param.rodata_synth_0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %1 = cc.load %0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %2 = cc.alloca !cc.array<complex<f32> x 16>
    cc.store %1, %2 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %3 = quake.alloca !quake.veq<4>
    %4 = quake.init_state %3, %2 : (!quake.veq<4>, !cc.ptr<!cc.array<complex<f32> x 16>>) -> !quake.veq<4>
    quake.exp_pauli %cst, %4, %arg0 : (f64, !quake.veq<4>, !cc.charspan) -> ()
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
  cc.global constant @test_state_param.rodata_synth_0 (dense<[(5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00)]> : tensor<16xcomplex<f32>>) : !cc.array<complex<f32> x 16>
  func.func private @__nvqpp_cudaq_state_createFromData_fp32(!cc.ptr<i8>, i64) -> !cc.ptr<!cc.state>
}


// -----// IR Dump Before MemToReg (memtoreg) ('func.func' operation: @__nvqpp_vector_bool_to_initializer_list) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_state_param(%arg0: !cc.charspan) attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 5.000000e-01 : f64
    %0 = cc.address_of @test_state_param.rodata_synth_0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %1 = cc.load %0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %2 = cc.alloca !cc.array<complex<f32> x 16>
    cc.store %1, %2 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %3 = quake.alloca !quake.veq<4>
    %4 = quake.init_state %3, %2 : (!quake.veq<4>, !cc.ptr<!cc.array<complex<f32> x 16>>) -> !quake.veq<4>
    quake.exp_pauli %cst, %4, %arg0 : (f64, !quake.veq<4>, !cc.charspan) -> ()
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
  cc.global constant @test_state_param.rodata_synth_0 (dense<[(5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00)]> : tensor<16xcomplex<f32>>) : !cc.array<complex<f32> x 16>
  func.func private @__nvqpp_cudaq_state_createFromData_fp32(!cc.ptr<i8>, i64) -> !cc.ptr<!cc.state>
}


// -----// IR Dump Before MemToReg (memtoreg) ('func.func' operation: @llvm.memcpy.p0i8.p0i8.i64) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_state_param(%arg0: !cc.charspan) attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 5.000000e-01 : f64
    %0 = cc.address_of @test_state_param.rodata_synth_0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %1 = cc.load %0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %2 = cc.alloca !cc.array<complex<f32> x 16>
    cc.store %1, %2 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %3 = quake.alloca !quake.veq<4>
    %4 = quake.init_state %3, %2 : (!quake.veq<4>, !cc.ptr<!cc.array<complex<f32> x 16>>) -> !quake.veq<4>
    quake.exp_pauli %cst, %4, %arg0 : (f64, !quake.veq<4>, !cc.charspan) -> ()
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
  cc.global constant @test_state_param.rodata_synth_0 (dense<[(5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00)]> : tensor<16xcomplex<f32>>) : !cc.array<complex<f32> x 16>
  func.func private @__nvqpp_cudaq_state_createFromData_fp32(!cc.ptr<i8>, i64) -> !cc.ptr<!cc.state>
}


// -----// IR Dump Before MemToReg (memtoreg) ('func.func' operation: @__nvqpp_cudaq_state_createFromData_fp32) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_state_param(%arg0: !cc.charspan) attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 5.000000e-01 : f64
    %0 = cc.address_of @test_state_param.rodata_synth_0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %1 = cc.load %0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %2 = cc.alloca !cc.array<complex<f32> x 16>
    cc.store %1, %2 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %3 = quake.alloca !quake.veq<4>
    %4 = quake.init_state %3, %2 : (!quake.veq<4>, !cc.ptr<!cc.array<complex<f32> x 16>>) -> !quake.veq<4>
    quake.exp_pauli %cst, %4, %arg0 : (f64, !quake.veq<4>, !cc.charspan) -> ()
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
  cc.global constant @test_state_param.rodata_synth_0 (dense<[(5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00)]> : tensor<16xcomplex<f32>>) : !cc.array<complex<f32> x 16>
  func.func private @__nvqpp_cudaq_state_createFromData_fp32(!cc.ptr<i8>, i64) -> !cc.ptr<!cc.state>
}


// -----// IR Dump Before Canonicalizer (canonicalize) ('builtin.module' operation) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_state_param(%arg0: !cc.charspan) attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 5.000000e-01 : f64
    %0 = cc.address_of @test_state_param.rodata_synth_0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %1 = cc.load %0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %2 = cc.alloca !cc.array<complex<f32> x 16>
    cc.store %1, %2 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %3 = quake.alloca !quake.veq<4>
    %4 = quake.init_state %3, %2 : (!quake.veq<4>, !cc.ptr<!cc.array<complex<f32> x 16>>) -> !quake.veq<4>
    quake.exp_pauli %cst, %4, %arg0 : (f64, !quake.veq<4>, !cc.charspan) -> ()
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
  cc.global constant @test_state_param.rodata_synth_0 (dense<[(5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00)]> : tensor<16xcomplex<f32>>) : !cc.array<complex<f32> x 16>
  func.func private @__nvqpp_cudaq_state_createFromData_fp32(!cc.ptr<i8>, i64) -> !cc.ptr<!cc.state>
}


// -----// IR Dump Before CSE (cse) ('builtin.module' operation) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_state_param(%arg0: !cc.charspan) attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 5.000000e-01 : f64
    %0 = cc.address_of @test_state_param.rodata_synth_0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %1 = cc.load %0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %2 = cc.alloca !cc.array<complex<f32> x 16>
    cc.store %1, %2 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %3 = quake.alloca !quake.veq<4>
    %4 = quake.init_state %3, %2 : (!quake.veq<4>, !cc.ptr<!cc.array<complex<f32> x 16>>) -> !quake.veq<4>
    quake.exp_pauli %cst, %4, %arg0 : (f64, !quake.veq<4>, !cc.charspan) -> ()
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
  cc.global constant @test_state_param.rodata_synth_0 (dense<[(5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00)]> : tensor<16xcomplex<f32>>) : !cc.array<complex<f32> x 16>
  func.func private @__nvqpp_cudaq_state_createFromData_fp32(!cc.ptr<i8>, i64) -> !cc.ptr<!cc.state>
}


// -----// IR Dump Before QuakeAddDeallocs (add-dealloc) ('func.func' operation: @__nvqpp__mlirgen__test_state_param) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_state_param(%arg0: !cc.charspan) attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 5.000000e-01 : f64
    %0 = cc.address_of @test_state_param.rodata_synth_0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %1 = cc.load %0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %2 = cc.alloca !cc.array<complex<f32> x 16>
    cc.store %1, %2 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %3 = quake.alloca !quake.veq<4>
    %4 = quake.init_state %3, %2 : (!quake.veq<4>, !cc.ptr<!cc.array<complex<f32> x 16>>) -> !quake.veq<4>
    quake.exp_pauli %cst, %4, %arg0 : (f64, !quake.veq<4>, !cc.charspan) -> ()
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
  cc.global constant @test_state_param.rodata_synth_0 (dense<[(5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00)]> : tensor<16xcomplex<f32>>) : !cc.array<complex<f32> x 16>
  func.func private @__nvqpp_cudaq_state_createFromData_fp32(!cc.ptr<i8>, i64) -> !cc.ptr<!cc.state>
}


// -----// IR Dump After QuakeAddDeallocs (add-dealloc) ('func.func' operation: @__nvqpp__mlirgen__test_state_param) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_state_param(%arg0: !cc.charspan) attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 5.000000e-01 : f64
    %0 = cc.address_of @test_state_param.rodata_synth_0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %1 = cc.load %0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %2 = cc.alloca !cc.array<complex<f32> x 16>
    cc.store %1, %2 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %3 = quake.alloca !quake.veq<4>
    %4 = quake.init_state %3, %2 : (!quake.veq<4>, !cc.ptr<!cc.array<complex<f32> x 16>>) -> !quake.veq<4>
    quake.exp_pauli %cst, %4, %arg0 : (f64, !quake.veq<4>, !cc.charspan) -> ()
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    quake.dealloc %4 : !quake.veq<4>
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
  cc.global constant @test_state_param.rodata_synth_0 (dense<[(5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00)]> : tensor<16xcomplex<f32>>) : !cc.array<complex<f32> x 16>
  func.func private @__nvqpp_cudaq_state_createFromData_fp32(!cc.ptr<i8>, i64) -> !cc.ptr<!cc.state>
}


// -----// IR Dump Before QuakeAddMetadata (quake-add-metadata) ('func.func' operation: @__nvqpp__mlirgen__test_state_param) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_state_param(%arg0: !cc.charspan) attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 5.000000e-01 : f64
    %0 = cc.address_of @test_state_param.rodata_synth_0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %1 = cc.load %0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %2 = cc.alloca !cc.array<complex<f32> x 16>
    cc.store %1, %2 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %3 = quake.alloca !quake.veq<4>
    %4 = quake.init_state %3, %2 : (!quake.veq<4>, !cc.ptr<!cc.array<complex<f32> x 16>>) -> !quake.veq<4>
    quake.exp_pauli %cst, %4, %arg0 : (f64, !quake.veq<4>, !cc.charspan) -> ()
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    quake.dealloc %4 : !quake.veq<4>
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
  cc.global constant @test_state_param.rodata_synth_0 (dense<[(5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00)]> : tensor<16xcomplex<f32>>) : !cc.array<complex<f32> x 16>
  func.func private @__nvqpp_cudaq_state_createFromData_fp32(!cc.ptr<i8>, i64) -> !cc.ptr<!cc.state>
}


// -----// IR Dump Before QuakeAddDeallocs (add-dealloc) ('func.func' operation: @__nvqpp_cudaq_state_numberOfQubits) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_state_param(%arg0: !cc.charspan) attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 5.000000e-01 : f64
    %0 = cc.address_of @test_state_param.rodata_synth_0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %1 = cc.load %0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %2 = cc.alloca !cc.array<complex<f32> x 16>
    cc.store %1, %2 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %3 = quake.alloca !quake.veq<4>
    %4 = quake.init_state %3, %2 : (!quake.veq<4>, !cc.ptr<!cc.array<complex<f32> x 16>>) -> !quake.veq<4>
    quake.exp_pauli %cst, %4, %arg0 : (f64, !quake.veq<4>, !cc.charspan) -> ()
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    quake.dealloc %4 : !quake.veq<4>
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
  cc.global constant @test_state_param.rodata_synth_0 (dense<[(5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00)]> : tensor<16xcomplex<f32>>) : !cc.array<complex<f32> x 16>
  func.func private @__nvqpp_cudaq_state_createFromData_fp32(!cc.ptr<i8>, i64) -> !cc.ptr<!cc.state>
}


// -----// IR Dump Before QuakeAddMetadata (quake-add-metadata) ('func.func' operation: @__nvqpp_cudaq_state_numberOfQubits) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_state_param(%arg0: !cc.charspan) attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 5.000000e-01 : f64
    %0 = cc.address_of @test_state_param.rodata_synth_0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %1 = cc.load %0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %2 = cc.alloca !cc.array<complex<f32> x 16>
    cc.store %1, %2 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %3 = quake.alloca !quake.veq<4>
    %4 = quake.init_state %3, %2 : (!quake.veq<4>, !cc.ptr<!cc.array<complex<f32> x 16>>) -> !quake.veq<4>
    quake.exp_pauli %cst, %4, %arg0 : (f64, !quake.veq<4>, !cc.charspan) -> ()
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    quake.dealloc %4 : !quake.veq<4>
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
  cc.global constant @test_state_param.rodata_synth_0 (dense<[(5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00)]> : tensor<16xcomplex<f32>>) : !cc.array<complex<f32> x 16>
  func.func private @__nvqpp_cudaq_state_createFromData_fp32(!cc.ptr<i8>, i64) -> !cc.ptr<!cc.state>
}


// -----// IR Dump Before QuakeAddDeallocs (add-dealloc) ('func.func' operation: @streamlinedLaunchKernel) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_state_param(%arg0: !cc.charspan) attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 5.000000e-01 : f64
    %0 = cc.address_of @test_state_param.rodata_synth_0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %1 = cc.load %0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %2 = cc.alloca !cc.array<complex<f32> x 16>
    cc.store %1, %2 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %3 = quake.alloca !quake.veq<4>
    %4 = quake.init_state %3, %2 : (!quake.veq<4>, !cc.ptr<!cc.array<complex<f32> x 16>>) -> !quake.veq<4>
    quake.exp_pauli %cst, %4, %arg0 : (f64, !quake.veq<4>, !cc.charspan) -> ()
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    quake.dealloc %4 : !quake.veq<4>
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
  cc.global constant @test_state_param.rodata_synth_0 (dense<[(5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00)]> : tensor<16xcomplex<f32>>) : !cc.array<complex<f32> x 16>
  func.func private @__nvqpp_cudaq_state_createFromData_fp32(!cc.ptr<i8>, i64) -> !cc.ptr<!cc.state>
}


// -----// IR Dump Before QuakeAddMetadata (quake-add-metadata) ('func.func' operation: @streamlinedLaunchKernel) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_state_param(%arg0: !cc.charspan) attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 5.000000e-01 : f64
    %0 = cc.address_of @test_state_param.rodata_synth_0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %1 = cc.load %0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %2 = cc.alloca !cc.array<complex<f32> x 16>
    cc.store %1, %2 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %3 = quake.alloca !quake.veq<4>
    %4 = quake.init_state %3, %2 : (!quake.veq<4>, !cc.ptr<!cc.array<complex<f32> x 16>>) -> !quake.veq<4>
    quake.exp_pauli %cst, %4, %arg0 : (f64, !quake.veq<4>, !cc.charspan) -> ()
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    quake.dealloc %4 : !quake.veq<4>
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
  cc.global constant @test_state_param.rodata_synth_0 (dense<[(5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00)]> : tensor<16xcomplex<f32>>) : !cc.array<complex<f32> x 16>
  func.func private @__nvqpp_cudaq_state_createFromData_fp32(!cc.ptr<i8>, i64) -> !cc.ptr<!cc.state>
}


// -----// IR Dump Before QuakeAddDeallocs (add-dealloc) ('func.func' operation: @cudaqRegisterKernelName) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_state_param(%arg0: !cc.charspan) attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 5.000000e-01 : f64
    %0 = cc.address_of @test_state_param.rodata_synth_0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %1 = cc.load %0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %2 = cc.alloca !cc.array<complex<f32> x 16>
    cc.store %1, %2 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %3 = quake.alloca !quake.veq<4>
    %4 = quake.init_state %3, %2 : (!quake.veq<4>, !cc.ptr<!cc.array<complex<f32> x 16>>) -> !quake.veq<4>
    quake.exp_pauli %cst, %4, %arg0 : (f64, !quake.veq<4>, !cc.charspan) -> ()
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    quake.dealloc %4 : !quake.veq<4>
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
  cc.global constant @test_state_param.rodata_synth_0 (dense<[(5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00)]> : tensor<16xcomplex<f32>>) : !cc.array<complex<f32> x 16>
  func.func private @__nvqpp_cudaq_state_createFromData_fp32(!cc.ptr<i8>, i64) -> !cc.ptr<!cc.state>
}


// -----// IR Dump Before QuakeAddMetadata (quake-add-metadata) ('func.func' operation: @cudaqRegisterKernelName) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_state_param(%arg0: !cc.charspan) attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 5.000000e-01 : f64
    %0 = cc.address_of @test_state_param.rodata_synth_0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %1 = cc.load %0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %2 = cc.alloca !cc.array<complex<f32> x 16>
    cc.store %1, %2 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %3 = quake.alloca !quake.veq<4>
    %4 = quake.init_state %3, %2 : (!quake.veq<4>, !cc.ptr<!cc.array<complex<f32> x 16>>) -> !quake.veq<4>
    quake.exp_pauli %cst, %4, %arg0 : (f64, !quake.veq<4>, !cc.charspan) -> ()
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    quake.dealloc %4 : !quake.veq<4>
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
  cc.global constant @test_state_param.rodata_synth_0 (dense<[(5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00)]> : tensor<16xcomplex<f32>>) : !cc.array<complex<f32> x 16>
  func.func private @__nvqpp_cudaq_state_createFromData_fp32(!cc.ptr<i8>, i64) -> !cc.ptr<!cc.state>
}


// -----// IR Dump Before QuakeAddDeallocs (add-dealloc) ('func.func' operation: @cudaqRegisterArgsCreator) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_state_param(%arg0: !cc.charspan) attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 5.000000e-01 : f64
    %0 = cc.address_of @test_state_param.rodata_synth_0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %1 = cc.load %0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %2 = cc.alloca !cc.array<complex<f32> x 16>
    cc.store %1, %2 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %3 = quake.alloca !quake.veq<4>
    %4 = quake.init_state %3, %2 : (!quake.veq<4>, !cc.ptr<!cc.array<complex<f32> x 16>>) -> !quake.veq<4>
    quake.exp_pauli %cst, %4, %arg0 : (f64, !quake.veq<4>, !cc.charspan) -> ()
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    quake.dealloc %4 : !quake.veq<4>
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
  cc.global constant @test_state_param.rodata_synth_0 (dense<[(5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00)]> : tensor<16xcomplex<f32>>) : !cc.array<complex<f32> x 16>
  func.func private @__nvqpp_cudaq_state_createFromData_fp32(!cc.ptr<i8>, i64) -> !cc.ptr<!cc.state>
}


// -----// IR Dump Before QuakeAddMetadata (quake-add-metadata) ('func.func' operation: @cudaqRegisterArgsCreator) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_state_param(%arg0: !cc.charspan) attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 5.000000e-01 : f64
    %0 = cc.address_of @test_state_param.rodata_synth_0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %1 = cc.load %0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %2 = cc.alloca !cc.array<complex<f32> x 16>
    cc.store %1, %2 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %3 = quake.alloca !quake.veq<4>
    %4 = quake.init_state %3, %2 : (!quake.veq<4>, !cc.ptr<!cc.array<complex<f32> x 16>>) -> !quake.veq<4>
    quake.exp_pauli %cst, %4, %arg0 : (f64, !quake.veq<4>, !cc.charspan) -> ()
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    quake.dealloc %4 : !quake.veq<4>
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
  cc.global constant @test_state_param.rodata_synth_0 (dense<[(5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00)]> : tensor<16xcomplex<f32>>) : !cc.array<complex<f32> x 16>
  func.func private @__nvqpp_cudaq_state_createFromData_fp32(!cc.ptr<i8>, i64) -> !cc.ptr<!cc.state>
}


// -----// IR Dump Before QuakeAddDeallocs (add-dealloc) ('func.func' operation: @malloc) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_state_param(%arg0: !cc.charspan) attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 5.000000e-01 : f64
    %0 = cc.address_of @test_state_param.rodata_synth_0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %1 = cc.load %0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %2 = cc.alloca !cc.array<complex<f32> x 16>
    cc.store %1, %2 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %3 = quake.alloca !quake.veq<4>
    %4 = quake.init_state %3, %2 : (!quake.veq<4>, !cc.ptr<!cc.array<complex<f32> x 16>>) -> !quake.veq<4>
    quake.exp_pauli %cst, %4, %arg0 : (f64, !quake.veq<4>, !cc.charspan) -> ()
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    quake.dealloc %4 : !quake.veq<4>
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
  cc.global constant @test_state_param.rodata_synth_0 (dense<[(5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00)]> : tensor<16xcomplex<f32>>) : !cc.array<complex<f32> x 16>
  func.func private @__nvqpp_cudaq_state_createFromData_fp32(!cc.ptr<i8>, i64) -> !cc.ptr<!cc.state>
}


// -----// IR Dump Before QuakeAddMetadata (quake-add-metadata) ('func.func' operation: @malloc) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_state_param(%arg0: !cc.charspan) attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 5.000000e-01 : f64
    %0 = cc.address_of @test_state_param.rodata_synth_0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %1 = cc.load %0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %2 = cc.alloca !cc.array<complex<f32> x 16>
    cc.store %1, %2 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %3 = quake.alloca !quake.veq<4>
    %4 = quake.init_state %3, %2 : (!quake.veq<4>, !cc.ptr<!cc.array<complex<f32> x 16>>) -> !quake.veq<4>
    quake.exp_pauli %cst, %4, %arg0 : (f64, !quake.veq<4>, !cc.charspan) -> ()
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    quake.dealloc %4 : !quake.veq<4>
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
  cc.global constant @test_state_param.rodata_synth_0 (dense<[(5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00)]> : tensor<16xcomplex<f32>>) : !cc.array<complex<f32> x 16>
  func.func private @__nvqpp_cudaq_state_createFromData_fp32(!cc.ptr<i8>, i64) -> !cc.ptr<!cc.state>
}


// -----// IR Dump Before QuakeAddDeallocs (add-dealloc) ('func.func' operation: @free) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_state_param(%arg0: !cc.charspan) attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 5.000000e-01 : f64
    %0 = cc.address_of @test_state_param.rodata_synth_0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %1 = cc.load %0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %2 = cc.alloca !cc.array<complex<f32> x 16>
    cc.store %1, %2 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %3 = quake.alloca !quake.veq<4>
    %4 = quake.init_state %3, %2 : (!quake.veq<4>, !cc.ptr<!cc.array<complex<f32> x 16>>) -> !quake.veq<4>
    quake.exp_pauli %cst, %4, %arg0 : (f64, !quake.veq<4>, !cc.charspan) -> ()
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    quake.dealloc %4 : !quake.veq<4>
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
  cc.global constant @test_state_param.rodata_synth_0 (dense<[(5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00)]> : tensor<16xcomplex<f32>>) : !cc.array<complex<f32> x 16>
  func.func private @__nvqpp_cudaq_state_createFromData_fp32(!cc.ptr<i8>, i64) -> !cc.ptr<!cc.state>
}


// -----// IR Dump Before QuakeAddMetadata (quake-add-metadata) ('func.func' operation: @free) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_state_param(%arg0: !cc.charspan) attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 5.000000e-01 : f64
    %0 = cc.address_of @test_state_param.rodata_synth_0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %1 = cc.load %0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %2 = cc.alloca !cc.array<complex<f32> x 16>
    cc.store %1, %2 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %3 = quake.alloca !quake.veq<4>
    %4 = quake.init_state %3, %2 : (!quake.veq<4>, !cc.ptr<!cc.array<complex<f32> x 16>>) -> !quake.veq<4>
    quake.exp_pauli %cst, %4, %arg0 : (f64, !quake.veq<4>, !cc.charspan) -> ()
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    quake.dealloc %4 : !quake.veq<4>
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
  cc.global constant @test_state_param.rodata_synth_0 (dense<[(5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00)]> : tensor<16xcomplex<f32>>) : !cc.array<complex<f32> x 16>
  func.func private @__nvqpp_cudaq_state_createFromData_fp32(!cc.ptr<i8>, i64) -> !cc.ptr<!cc.state>
}


// -----// IR Dump Before QuakeAddDeallocs (add-dealloc) ('func.func' operation: @__nvqpp_initializer_list_to_vector_bool) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_state_param(%arg0: !cc.charspan) attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 5.000000e-01 : f64
    %0 = cc.address_of @test_state_param.rodata_synth_0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %1 = cc.load %0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %2 = cc.alloca !cc.array<complex<f32> x 16>
    cc.store %1, %2 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %3 = quake.alloca !quake.veq<4>
    %4 = quake.init_state %3, %2 : (!quake.veq<4>, !cc.ptr<!cc.array<complex<f32> x 16>>) -> !quake.veq<4>
    quake.exp_pauli %cst, %4, %arg0 : (f64, !quake.veq<4>, !cc.charspan) -> ()
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    quake.dealloc %4 : !quake.veq<4>
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
  cc.global constant @test_state_param.rodata_synth_0 (dense<[(5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00)]> : tensor<16xcomplex<f32>>) : !cc.array<complex<f32> x 16>
  func.func private @__nvqpp_cudaq_state_createFromData_fp32(!cc.ptr<i8>, i64) -> !cc.ptr<!cc.state>
}


// -----// IR Dump Before QuakeAddMetadata (quake-add-metadata) ('func.func' operation: @__nvqpp_initializer_list_to_vector_bool) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_state_param(%arg0: !cc.charspan) attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 5.000000e-01 : f64
    %0 = cc.address_of @test_state_param.rodata_synth_0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %1 = cc.load %0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %2 = cc.alloca !cc.array<complex<f32> x 16>
    cc.store %1, %2 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %3 = quake.alloca !quake.veq<4>
    %4 = quake.init_state %3, %2 : (!quake.veq<4>, !cc.ptr<!cc.array<complex<f32> x 16>>) -> !quake.veq<4>
    quake.exp_pauli %cst, %4, %arg0 : (f64, !quake.veq<4>, !cc.charspan) -> ()
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    quake.dealloc %4 : !quake.veq<4>
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
  cc.global constant @test_state_param.rodata_synth_0 (dense<[(5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00)]> : tensor<16xcomplex<f32>>) : !cc.array<complex<f32> x 16>
  func.func private @__nvqpp_cudaq_state_createFromData_fp32(!cc.ptr<i8>, i64) -> !cc.ptr<!cc.state>
}


// -----// IR Dump Before QuakeAddDeallocs (add-dealloc) ('func.func' operation: @__nvqpp_vector_bool_to_initializer_list) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_state_param(%arg0: !cc.charspan) attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 5.000000e-01 : f64
    %0 = cc.address_of @test_state_param.rodata_synth_0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %1 = cc.load %0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %2 = cc.alloca !cc.array<complex<f32> x 16>
    cc.store %1, %2 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %3 = quake.alloca !quake.veq<4>
    %4 = quake.init_state %3, %2 : (!quake.veq<4>, !cc.ptr<!cc.array<complex<f32> x 16>>) -> !quake.veq<4>
    quake.exp_pauli %cst, %4, %arg0 : (f64, !quake.veq<4>, !cc.charspan) -> ()
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    quake.dealloc %4 : !quake.veq<4>
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
  cc.global constant @test_state_param.rodata_synth_0 (dense<[(5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00)]> : tensor<16xcomplex<f32>>) : !cc.array<complex<f32> x 16>
  func.func private @__nvqpp_cudaq_state_createFromData_fp32(!cc.ptr<i8>, i64) -> !cc.ptr<!cc.state>
}


// -----// IR Dump Before QuakeAddMetadata (quake-add-metadata) ('func.func' operation: @__nvqpp_vector_bool_to_initializer_list) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_state_param(%arg0: !cc.charspan) attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 5.000000e-01 : f64
    %0 = cc.address_of @test_state_param.rodata_synth_0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %1 = cc.load %0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %2 = cc.alloca !cc.array<complex<f32> x 16>
    cc.store %1, %2 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %3 = quake.alloca !quake.veq<4>
    %4 = quake.init_state %3, %2 : (!quake.veq<4>, !cc.ptr<!cc.array<complex<f32> x 16>>) -> !quake.veq<4>
    quake.exp_pauli %cst, %4, %arg0 : (f64, !quake.veq<4>, !cc.charspan) -> ()
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    quake.dealloc %4 : !quake.veq<4>
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
  cc.global constant @test_state_param.rodata_synth_0 (dense<[(5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00)]> : tensor<16xcomplex<f32>>) : !cc.array<complex<f32> x 16>
  func.func private @__nvqpp_cudaq_state_createFromData_fp32(!cc.ptr<i8>, i64) -> !cc.ptr<!cc.state>
}


// -----// IR Dump Before QuakeAddDeallocs (add-dealloc) ('func.func' operation: @llvm.memcpy.p0i8.p0i8.i64) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_state_param(%arg0: !cc.charspan) attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 5.000000e-01 : f64
    %0 = cc.address_of @test_state_param.rodata_synth_0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %1 = cc.load %0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %2 = cc.alloca !cc.array<complex<f32> x 16>
    cc.store %1, %2 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %3 = quake.alloca !quake.veq<4>
    %4 = quake.init_state %3, %2 : (!quake.veq<4>, !cc.ptr<!cc.array<complex<f32> x 16>>) -> !quake.veq<4>
    quake.exp_pauli %cst, %4, %arg0 : (f64, !quake.veq<4>, !cc.charspan) -> ()
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    quake.dealloc %4 : !quake.veq<4>
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
  cc.global constant @test_state_param.rodata_synth_0 (dense<[(5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00)]> : tensor<16xcomplex<f32>>) : !cc.array<complex<f32> x 16>
  func.func private @__nvqpp_cudaq_state_createFromData_fp32(!cc.ptr<i8>, i64) -> !cc.ptr<!cc.state>
}


// -----// IR Dump Before QuakeAddMetadata (quake-add-metadata) ('func.func' operation: @llvm.memcpy.p0i8.p0i8.i64) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_state_param(%arg0: !cc.charspan) attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 5.000000e-01 : f64
    %0 = cc.address_of @test_state_param.rodata_synth_0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %1 = cc.load %0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %2 = cc.alloca !cc.array<complex<f32> x 16>
    cc.store %1, %2 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %3 = quake.alloca !quake.veq<4>
    %4 = quake.init_state %3, %2 : (!quake.veq<4>, !cc.ptr<!cc.array<complex<f32> x 16>>) -> !quake.veq<4>
    quake.exp_pauli %cst, %4, %arg0 : (f64, !quake.veq<4>, !cc.charspan) -> ()
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    quake.dealloc %4 : !quake.veq<4>
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
  cc.global constant @test_state_param.rodata_synth_0 (dense<[(5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00)]> : tensor<16xcomplex<f32>>) : !cc.array<complex<f32> x 16>
  func.func private @__nvqpp_cudaq_state_createFromData_fp32(!cc.ptr<i8>, i64) -> !cc.ptr<!cc.state>
}


// -----// IR Dump Before QuakeAddDeallocs (add-dealloc) ('func.func' operation: @__nvqpp_cudaq_state_createFromData_fp32) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_state_param(%arg0: !cc.charspan) attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 5.000000e-01 : f64
    %0 = cc.address_of @test_state_param.rodata_synth_0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %1 = cc.load %0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %2 = cc.alloca !cc.array<complex<f32> x 16>
    cc.store %1, %2 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %3 = quake.alloca !quake.veq<4>
    %4 = quake.init_state %3, %2 : (!quake.veq<4>, !cc.ptr<!cc.array<complex<f32> x 16>>) -> !quake.veq<4>
    quake.exp_pauli %cst, %4, %arg0 : (f64, !quake.veq<4>, !cc.charspan) -> ()
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    quake.dealloc %4 : !quake.veq<4>
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
  cc.global constant @test_state_param.rodata_synth_0 (dense<[(5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00)]> : tensor<16xcomplex<f32>>) : !cc.array<complex<f32> x 16>
  func.func private @__nvqpp_cudaq_state_createFromData_fp32(!cc.ptr<i8>, i64) -> !cc.ptr<!cc.state>
}


// -----// IR Dump Before QuakeAddMetadata (quake-add-metadata) ('func.func' operation: @__nvqpp_cudaq_state_createFromData_fp32) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_state_param(%arg0: !cc.charspan) attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 5.000000e-01 : f64
    %0 = cc.address_of @test_state_param.rodata_synth_0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %1 = cc.load %0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %2 = cc.alloca !cc.array<complex<f32> x 16>
    cc.store %1, %2 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %3 = quake.alloca !quake.veq<4>
    %4 = quake.init_state %3, %2 : (!quake.veq<4>, !cc.ptr<!cc.array<complex<f32> x 16>>) -> !quake.veq<4>
    quake.exp_pauli %cst, %4, %arg0 : (f64, !quake.veq<4>, !cc.charspan) -> ()
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    quake.dealloc %4 : !quake.veq<4>
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
  cc.global constant @test_state_param.rodata_synth_0 (dense<[(5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00)]> : tensor<16xcomplex<f32>>) : !cc.array<complex<f32> x 16>
  func.func private @__nvqpp_cudaq_state_createFromData_fp32(!cc.ptr<i8>, i64) -> !cc.ptr<!cc.state>
}


// -----// IR Dump Before LoopNormalize (cc-loop-normalize) ('builtin.module' operation) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_state_param(%arg0: !cc.charspan) attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 5.000000e-01 : f64
    %0 = cc.address_of @test_state_param.rodata_synth_0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %1 = cc.load %0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %2 = cc.alloca !cc.array<complex<f32> x 16>
    cc.store %1, %2 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %3 = quake.alloca !quake.veq<4>
    %4 = quake.init_state %3, %2 : (!quake.veq<4>, !cc.ptr<!cc.array<complex<f32> x 16>>) -> !quake.veq<4>
    quake.exp_pauli %cst, %4, %arg0 : (f64, !quake.veq<4>, !cc.charspan) -> ()
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    quake.dealloc %4 : !quake.veq<4>
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
  cc.global constant @test_state_param.rodata_synth_0 (dense<[(5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00)]> : tensor<16xcomplex<f32>>) : !cc.array<complex<f32> x 16>
  func.func private @__nvqpp_cudaq_state_createFromData_fp32(!cc.ptr<i8>, i64) -> !cc.ptr<!cc.state>
}


// -----// IR Dump Before LoopUnroll (cc-loop-unroll) ('builtin.module' operation) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_state_param(%arg0: !cc.charspan) attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 5.000000e-01 : f64
    %0 = cc.address_of @test_state_param.rodata_synth_0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %1 = cc.load %0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %2 = cc.alloca !cc.array<complex<f32> x 16>
    cc.store %1, %2 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %3 = quake.alloca !quake.veq<4>
    %4 = quake.init_state %3, %2 : (!quake.veq<4>, !cc.ptr<!cc.array<complex<f32> x 16>>) -> !quake.veq<4>
    quake.exp_pauli %cst, %4, %arg0 : (f64, !quake.veq<4>, !cc.charspan) -> ()
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    quake.dealloc %4 : !quake.veq<4>
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
  cc.global constant @test_state_param.rodata_synth_0 (dense<[(5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00)]> : tensor<16xcomplex<f32>>) : !cc.array<complex<f32> x 16>
  func.func private @__nvqpp_cudaq_state_createFromData_fp32(!cc.ptr<i8>, i64) -> !cc.ptr<!cc.state>
}


// -----// IR Dump Before Canonicalizer (canonicalize) ('builtin.module' operation) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_state_param(%arg0: !cc.charspan) attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 5.000000e-01 : f64
    %0 = cc.address_of @test_state_param.rodata_synth_0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %1 = cc.load %0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %2 = cc.alloca !cc.array<complex<f32> x 16>
    cc.store %1, %2 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %3 = quake.alloca !quake.veq<4>
    %4 = quake.init_state %3, %2 : (!quake.veq<4>, !cc.ptr<!cc.array<complex<f32> x 16>>) -> !quake.veq<4>
    quake.exp_pauli %cst, %4, %arg0 : (f64, !quake.veq<4>, !cc.charspan) -> ()
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    quake.dealloc %4 : !quake.veq<4>
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
  cc.global constant @test_state_param.rodata_synth_0 (dense<[(5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00)]> : tensor<16xcomplex<f32>>) : !cc.array<complex<f32> x 16>
  func.func private @__nvqpp_cudaq_state_createFromData_fp32(!cc.ptr<i8>, i64) -> !cc.ptr<!cc.state>
}


// -----// IR Dump After Canonicalizer (canonicalize) ('builtin.module' operation) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_state_param(%arg0: !cc.charspan) attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 5.000000e-01 : f64
    %0 = cc.address_of @test_state_param.rodata_synth_0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %1 = cc.load %0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %2 = cc.alloca !cc.array<complex<f32> x 16>
    cc.store %1, %2 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %3 = quake.alloca !quake.veq<4>
    %4 = quake.init_state %3, %2 : (!quake.veq<4>, !cc.ptr<!cc.array<complex<f32> x 16>>) -> !quake.veq<4>
    quake.exp_pauli %cst, %4, %arg0 : (f64, !quake.veq<4>, !cc.charspan) -> ()
    quake.dealloc %4 : !quake.veq<4>
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
  cc.global constant @test_state_param.rodata_synth_0 (dense<[(5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00)]> : tensor<16xcomplex<f32>>) : !cc.array<complex<f32> x 16>
  func.func private @__nvqpp_cudaq_state_createFromData_fp32(!cc.ptr<i8>, i64) -> !cc.ptr<!cc.state>
}


// -----// IR Dump Before CSE (cse) ('builtin.module' operation) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_state_param(%arg0: !cc.charspan) attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 5.000000e-01 : f64
    %0 = cc.address_of @test_state_param.rodata_synth_0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %1 = cc.load %0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %2 = cc.alloca !cc.array<complex<f32> x 16>
    cc.store %1, %2 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %3 = quake.alloca !quake.veq<4>
    %4 = quake.init_state %3, %2 : (!quake.veq<4>, !cc.ptr<!cc.array<complex<f32> x 16>>) -> !quake.veq<4>
    quake.exp_pauli %cst, %4, %arg0 : (f64, !quake.veq<4>, !cc.charspan) -> ()
    quake.dealloc %4 : !quake.veq<4>
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
  cc.global constant @test_state_param.rodata_synth_0 (dense<[(5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00)]> : tensor<16xcomplex<f32>>) : !cc.array<complex<f32> x 16>
  func.func private @__nvqpp_cudaq_state_createFromData_fp32(!cc.ptr<i8>, i64) -> !cc.ptr<!cc.state>
}


// -----// IR Dump Before LowerToCFG (lower-to-cfg) ('func.func' operation: @__nvqpp__mlirgen__test_state_param) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_state_param(%arg0: !cc.charspan) attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 5.000000e-01 : f64
    %0 = cc.address_of @test_state_param.rodata_synth_0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %1 = cc.load %0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %2 = cc.alloca !cc.array<complex<f32> x 16>
    cc.store %1, %2 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %3 = quake.alloca !quake.veq<4>
    %4 = quake.init_state %3, %2 : (!quake.veq<4>, !cc.ptr<!cc.array<complex<f32> x 16>>) -> !quake.veq<4>
    quake.exp_pauli %cst, %4, %arg0 : (f64, !quake.veq<4>, !cc.charspan) -> ()
    quake.dealloc %4 : !quake.veq<4>
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
  cc.global constant @test_state_param.rodata_synth_0 (dense<[(5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00)]> : tensor<16xcomplex<f32>>) : !cc.array<complex<f32> x 16>
  func.func private @__nvqpp_cudaq_state_createFromData_fp32(!cc.ptr<i8>, i64) -> !cc.ptr<!cc.state>
}


// -----// IR Dump Before CombineQuantumAllocations (combine-quantum-alloc) ('func.func' operation: @__nvqpp__mlirgen__test_state_param) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_state_param(%arg0: !cc.charspan) attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 5.000000e-01 : f64
    %0 = cc.address_of @test_state_param.rodata_synth_0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %1 = cc.load %0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %2 = cc.alloca !cc.array<complex<f32> x 16>
    cc.store %1, %2 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %3 = quake.alloca !quake.veq<4>
    %4 = quake.init_state %3, %2 : (!quake.veq<4>, !cc.ptr<!cc.array<complex<f32> x 16>>) -> !quake.veq<4>
    quake.exp_pauli %cst, %4, %arg0 : (f64, !quake.veq<4>, !cc.charspan) -> ()
    quake.dealloc %4 : !quake.veq<4>
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
  cc.global constant @test_state_param.rodata_synth_0 (dense<[(5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00)]> : tensor<16xcomplex<f32>>) : !cc.array<complex<f32> x 16>
  func.func private @__nvqpp_cudaq_state_createFromData_fp32(!cc.ptr<i8>, i64) -> !cc.ptr<!cc.state>
}


// -----// IR Dump Before LowerToCFG (lower-to-cfg) ('func.func' operation: @__nvqpp_cudaq_state_numberOfQubits) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_state_param(%arg0: !cc.charspan) attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 5.000000e-01 : f64
    %0 = cc.address_of @test_state_param.rodata_synth_0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %1 = cc.load %0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %2 = cc.alloca !cc.array<complex<f32> x 16>
    cc.store %1, %2 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %3 = quake.alloca !quake.veq<4>
    %4 = quake.init_state %3, %2 : (!quake.veq<4>, !cc.ptr<!cc.array<complex<f32> x 16>>) -> !quake.veq<4>
    quake.exp_pauli %cst, %4, %arg0 : (f64, !quake.veq<4>, !cc.charspan) -> ()
    quake.dealloc %4 : !quake.veq<4>
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
  cc.global constant @test_state_param.rodata_synth_0 (dense<[(5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00)]> : tensor<16xcomplex<f32>>) : !cc.array<complex<f32> x 16>
  func.func private @__nvqpp_cudaq_state_createFromData_fp32(!cc.ptr<i8>, i64) -> !cc.ptr<!cc.state>
}


// -----// IR Dump Before CombineQuantumAllocations (combine-quantum-alloc) ('func.func' operation: @__nvqpp_cudaq_state_numberOfQubits) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_state_param(%arg0: !cc.charspan) attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 5.000000e-01 : f64
    %0 = cc.address_of @test_state_param.rodata_synth_0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %1 = cc.load %0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %2 = cc.alloca !cc.array<complex<f32> x 16>
    cc.store %1, %2 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %3 = quake.alloca !quake.veq<4>
    %4 = quake.init_state %3, %2 : (!quake.veq<4>, !cc.ptr<!cc.array<complex<f32> x 16>>) -> !quake.veq<4>
    quake.exp_pauli %cst, %4, %arg0 : (f64, !quake.veq<4>, !cc.charspan) -> ()
    quake.dealloc %4 : !quake.veq<4>
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
  cc.global constant @test_state_param.rodata_synth_0 (dense<[(5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00)]> : tensor<16xcomplex<f32>>) : !cc.array<complex<f32> x 16>
  func.func private @__nvqpp_cudaq_state_createFromData_fp32(!cc.ptr<i8>, i64) -> !cc.ptr<!cc.state>
}


// -----// IR Dump Before LowerToCFG (lower-to-cfg) ('func.func' operation: @streamlinedLaunchKernel) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_state_param(%arg0: !cc.charspan) attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 5.000000e-01 : f64
    %0 = cc.address_of @test_state_param.rodata_synth_0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %1 = cc.load %0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %2 = cc.alloca !cc.array<complex<f32> x 16>
    cc.store %1, %2 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %3 = quake.alloca !quake.veq<4>
    %4 = quake.init_state %3, %2 : (!quake.veq<4>, !cc.ptr<!cc.array<complex<f32> x 16>>) -> !quake.veq<4>
    quake.exp_pauli %cst, %4, %arg0 : (f64, !quake.veq<4>, !cc.charspan) -> ()
    quake.dealloc %4 : !quake.veq<4>
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
  cc.global constant @test_state_param.rodata_synth_0 (dense<[(5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00)]> : tensor<16xcomplex<f32>>) : !cc.array<complex<f32> x 16>
  func.func private @__nvqpp_cudaq_state_createFromData_fp32(!cc.ptr<i8>, i64) -> !cc.ptr<!cc.state>
}


// -----// IR Dump Before CombineQuantumAllocations (combine-quantum-alloc) ('func.func' operation: @streamlinedLaunchKernel) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_state_param(%arg0: !cc.charspan) attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 5.000000e-01 : f64
    %0 = cc.address_of @test_state_param.rodata_synth_0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %1 = cc.load %0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %2 = cc.alloca !cc.array<complex<f32> x 16>
    cc.store %1, %2 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %3 = quake.alloca !quake.veq<4>
    %4 = quake.init_state %3, %2 : (!quake.veq<4>, !cc.ptr<!cc.array<complex<f32> x 16>>) -> !quake.veq<4>
    quake.exp_pauli %cst, %4, %arg0 : (f64, !quake.veq<4>, !cc.charspan) -> ()
    quake.dealloc %4 : !quake.veq<4>
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
  cc.global constant @test_state_param.rodata_synth_0 (dense<[(5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00)]> : tensor<16xcomplex<f32>>) : !cc.array<complex<f32> x 16>
  func.func private @__nvqpp_cudaq_state_createFromData_fp32(!cc.ptr<i8>, i64) -> !cc.ptr<!cc.state>
}


// -----// IR Dump Before LowerToCFG (lower-to-cfg) ('func.func' operation: @cudaqRegisterKernelName) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_state_param(%arg0: !cc.charspan) attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 5.000000e-01 : f64
    %0 = cc.address_of @test_state_param.rodata_synth_0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %1 = cc.load %0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %2 = cc.alloca !cc.array<complex<f32> x 16>
    cc.store %1, %2 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %3 = quake.alloca !quake.veq<4>
    %4 = quake.init_state %3, %2 : (!quake.veq<4>, !cc.ptr<!cc.array<complex<f32> x 16>>) -> !quake.veq<4>
    quake.exp_pauli %cst, %4, %arg0 : (f64, !quake.veq<4>, !cc.charspan) -> ()
    quake.dealloc %4 : !quake.veq<4>
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
  cc.global constant @test_state_param.rodata_synth_0 (dense<[(5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00)]> : tensor<16xcomplex<f32>>) : !cc.array<complex<f32> x 16>
  func.func private @__nvqpp_cudaq_state_createFromData_fp32(!cc.ptr<i8>, i64) -> !cc.ptr<!cc.state>
}


// -----// IR Dump Before CombineQuantumAllocations (combine-quantum-alloc) ('func.func' operation: @cudaqRegisterKernelName) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_state_param(%arg0: !cc.charspan) attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 5.000000e-01 : f64
    %0 = cc.address_of @test_state_param.rodata_synth_0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %1 = cc.load %0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %2 = cc.alloca !cc.array<complex<f32> x 16>
    cc.store %1, %2 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %3 = quake.alloca !quake.veq<4>
    %4 = quake.init_state %3, %2 : (!quake.veq<4>, !cc.ptr<!cc.array<complex<f32> x 16>>) -> !quake.veq<4>
    quake.exp_pauli %cst, %4, %arg0 : (f64, !quake.veq<4>, !cc.charspan) -> ()
    quake.dealloc %4 : !quake.veq<4>
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
  cc.global constant @test_state_param.rodata_synth_0 (dense<[(5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00)]> : tensor<16xcomplex<f32>>) : !cc.array<complex<f32> x 16>
  func.func private @__nvqpp_cudaq_state_createFromData_fp32(!cc.ptr<i8>, i64) -> !cc.ptr<!cc.state>
}


// -----// IR Dump Before LowerToCFG (lower-to-cfg) ('func.func' operation: @cudaqRegisterArgsCreator) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_state_param(%arg0: !cc.charspan) attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 5.000000e-01 : f64
    %0 = cc.address_of @test_state_param.rodata_synth_0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %1 = cc.load %0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %2 = cc.alloca !cc.array<complex<f32> x 16>
    cc.store %1, %2 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %3 = quake.alloca !quake.veq<4>
    %4 = quake.init_state %3, %2 : (!quake.veq<4>, !cc.ptr<!cc.array<complex<f32> x 16>>) -> !quake.veq<4>
    quake.exp_pauli %cst, %4, %arg0 : (f64, !quake.veq<4>, !cc.charspan) -> ()
    quake.dealloc %4 : !quake.veq<4>
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
  cc.global constant @test_state_param.rodata_synth_0 (dense<[(5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00)]> : tensor<16xcomplex<f32>>) : !cc.array<complex<f32> x 16>
  func.func private @__nvqpp_cudaq_state_createFromData_fp32(!cc.ptr<i8>, i64) -> !cc.ptr<!cc.state>
}


// -----// IR Dump Before CombineQuantumAllocations (combine-quantum-alloc) ('func.func' operation: @cudaqRegisterArgsCreator) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_state_param(%arg0: !cc.charspan) attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 5.000000e-01 : f64
    %0 = cc.address_of @test_state_param.rodata_synth_0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %1 = cc.load %0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %2 = cc.alloca !cc.array<complex<f32> x 16>
    cc.store %1, %2 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %3 = quake.alloca !quake.veq<4>
    %4 = quake.init_state %3, %2 : (!quake.veq<4>, !cc.ptr<!cc.array<complex<f32> x 16>>) -> !quake.veq<4>
    quake.exp_pauli %cst, %4, %arg0 : (f64, !quake.veq<4>, !cc.charspan) -> ()
    quake.dealloc %4 : !quake.veq<4>
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
  cc.global constant @test_state_param.rodata_synth_0 (dense<[(5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00)]> : tensor<16xcomplex<f32>>) : !cc.array<complex<f32> x 16>
  func.func private @__nvqpp_cudaq_state_createFromData_fp32(!cc.ptr<i8>, i64) -> !cc.ptr<!cc.state>
}


// -----// IR Dump Before LowerToCFG (lower-to-cfg) ('func.func' operation: @malloc) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_state_param(%arg0: !cc.charspan) attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 5.000000e-01 : f64
    %0 = cc.address_of @test_state_param.rodata_synth_0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %1 = cc.load %0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %2 = cc.alloca !cc.array<complex<f32> x 16>
    cc.store %1, %2 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %3 = quake.alloca !quake.veq<4>
    %4 = quake.init_state %3, %2 : (!quake.veq<4>, !cc.ptr<!cc.array<complex<f32> x 16>>) -> !quake.veq<4>
    quake.exp_pauli %cst, %4, %arg0 : (f64, !quake.veq<4>, !cc.charspan) -> ()
    quake.dealloc %4 : !quake.veq<4>
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
  cc.global constant @test_state_param.rodata_synth_0 (dense<[(5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00)]> : tensor<16xcomplex<f32>>) : !cc.array<complex<f32> x 16>
  func.func private @__nvqpp_cudaq_state_createFromData_fp32(!cc.ptr<i8>, i64) -> !cc.ptr<!cc.state>
}


// -----// IR Dump Before CombineQuantumAllocations (combine-quantum-alloc) ('func.func' operation: @malloc) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_state_param(%arg0: !cc.charspan) attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 5.000000e-01 : f64
    %0 = cc.address_of @test_state_param.rodata_synth_0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %1 = cc.load %0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %2 = cc.alloca !cc.array<complex<f32> x 16>
    cc.store %1, %2 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %3 = quake.alloca !quake.veq<4>
    %4 = quake.init_state %3, %2 : (!quake.veq<4>, !cc.ptr<!cc.array<complex<f32> x 16>>) -> !quake.veq<4>
    quake.exp_pauli %cst, %4, %arg0 : (f64, !quake.veq<4>, !cc.charspan) -> ()
    quake.dealloc %4 : !quake.veq<4>
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
  cc.global constant @test_state_param.rodata_synth_0 (dense<[(5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00)]> : tensor<16xcomplex<f32>>) : !cc.array<complex<f32> x 16>
  func.func private @__nvqpp_cudaq_state_createFromData_fp32(!cc.ptr<i8>, i64) -> !cc.ptr<!cc.state>
}


// -----// IR Dump Before LowerToCFG (lower-to-cfg) ('func.func' operation: @free) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_state_param(%arg0: !cc.charspan) attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 5.000000e-01 : f64
    %0 = cc.address_of @test_state_param.rodata_synth_0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %1 = cc.load %0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %2 = cc.alloca !cc.array<complex<f32> x 16>
    cc.store %1, %2 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %3 = quake.alloca !quake.veq<4>
    %4 = quake.init_state %3, %2 : (!quake.veq<4>, !cc.ptr<!cc.array<complex<f32> x 16>>) -> !quake.veq<4>
    quake.exp_pauli %cst, %4, %arg0 : (f64, !quake.veq<4>, !cc.charspan) -> ()
    quake.dealloc %4 : !quake.veq<4>
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
  cc.global constant @test_state_param.rodata_synth_0 (dense<[(5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00)]> : tensor<16xcomplex<f32>>) : !cc.array<complex<f32> x 16>
  func.func private @__nvqpp_cudaq_state_createFromData_fp32(!cc.ptr<i8>, i64) -> !cc.ptr<!cc.state>
}


// -----// IR Dump Before CombineQuantumAllocations (combine-quantum-alloc) ('func.func' operation: @free) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_state_param(%arg0: !cc.charspan) attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 5.000000e-01 : f64
    %0 = cc.address_of @test_state_param.rodata_synth_0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %1 = cc.load %0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %2 = cc.alloca !cc.array<complex<f32> x 16>
    cc.store %1, %2 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %3 = quake.alloca !quake.veq<4>
    %4 = quake.init_state %3, %2 : (!quake.veq<4>, !cc.ptr<!cc.array<complex<f32> x 16>>) -> !quake.veq<4>
    quake.exp_pauli %cst, %4, %arg0 : (f64, !quake.veq<4>, !cc.charspan) -> ()
    quake.dealloc %4 : !quake.veq<4>
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
  cc.global constant @test_state_param.rodata_synth_0 (dense<[(5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00)]> : tensor<16xcomplex<f32>>) : !cc.array<complex<f32> x 16>
  func.func private @__nvqpp_cudaq_state_createFromData_fp32(!cc.ptr<i8>, i64) -> !cc.ptr<!cc.state>
}


// -----// IR Dump Before LowerToCFG (lower-to-cfg) ('func.func' operation: @__nvqpp_initializer_list_to_vector_bool) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_state_param(%arg0: !cc.charspan) attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 5.000000e-01 : f64
    %0 = cc.address_of @test_state_param.rodata_synth_0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %1 = cc.load %0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %2 = cc.alloca !cc.array<complex<f32> x 16>
    cc.store %1, %2 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %3 = quake.alloca !quake.veq<4>
    %4 = quake.init_state %3, %2 : (!quake.veq<4>, !cc.ptr<!cc.array<complex<f32> x 16>>) -> !quake.veq<4>
    quake.exp_pauli %cst, %4, %arg0 : (f64, !quake.veq<4>, !cc.charspan) -> ()
    quake.dealloc %4 : !quake.veq<4>
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
  cc.global constant @test_state_param.rodata_synth_0 (dense<[(5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00)]> : tensor<16xcomplex<f32>>) : !cc.array<complex<f32> x 16>
  func.func private @__nvqpp_cudaq_state_createFromData_fp32(!cc.ptr<i8>, i64) -> !cc.ptr<!cc.state>
}


// -----// IR Dump Before CombineQuantumAllocations (combine-quantum-alloc) ('func.func' operation: @__nvqpp_initializer_list_to_vector_bool) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_state_param(%arg0: !cc.charspan) attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 5.000000e-01 : f64
    %0 = cc.address_of @test_state_param.rodata_synth_0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %1 = cc.load %0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %2 = cc.alloca !cc.array<complex<f32> x 16>
    cc.store %1, %2 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %3 = quake.alloca !quake.veq<4>
    %4 = quake.init_state %3, %2 : (!quake.veq<4>, !cc.ptr<!cc.array<complex<f32> x 16>>) -> !quake.veq<4>
    quake.exp_pauli %cst, %4, %arg0 : (f64, !quake.veq<4>, !cc.charspan) -> ()
    quake.dealloc %4 : !quake.veq<4>
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
  cc.global constant @test_state_param.rodata_synth_0 (dense<[(5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00)]> : tensor<16xcomplex<f32>>) : !cc.array<complex<f32> x 16>
  func.func private @__nvqpp_cudaq_state_createFromData_fp32(!cc.ptr<i8>, i64) -> !cc.ptr<!cc.state>
}


// -----// IR Dump Before LowerToCFG (lower-to-cfg) ('func.func' operation: @__nvqpp_vector_bool_to_initializer_list) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_state_param(%arg0: !cc.charspan) attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 5.000000e-01 : f64
    %0 = cc.address_of @test_state_param.rodata_synth_0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %1 = cc.load %0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %2 = cc.alloca !cc.array<complex<f32> x 16>
    cc.store %1, %2 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %3 = quake.alloca !quake.veq<4>
    %4 = quake.init_state %3, %2 : (!quake.veq<4>, !cc.ptr<!cc.array<complex<f32> x 16>>) -> !quake.veq<4>
    quake.exp_pauli %cst, %4, %arg0 : (f64, !quake.veq<4>, !cc.charspan) -> ()
    quake.dealloc %4 : !quake.veq<4>
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
  cc.global constant @test_state_param.rodata_synth_0 (dense<[(5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00)]> : tensor<16xcomplex<f32>>) : !cc.array<complex<f32> x 16>
  func.func private @__nvqpp_cudaq_state_createFromData_fp32(!cc.ptr<i8>, i64) -> !cc.ptr<!cc.state>
}


// -----// IR Dump Before CombineQuantumAllocations (combine-quantum-alloc) ('func.func' operation: @__nvqpp_vector_bool_to_initializer_list) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_state_param(%arg0: !cc.charspan) attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 5.000000e-01 : f64
    %0 = cc.address_of @test_state_param.rodata_synth_0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %1 = cc.load %0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %2 = cc.alloca !cc.array<complex<f32> x 16>
    cc.store %1, %2 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %3 = quake.alloca !quake.veq<4>
    %4 = quake.init_state %3, %2 : (!quake.veq<4>, !cc.ptr<!cc.array<complex<f32> x 16>>) -> !quake.veq<4>
    quake.exp_pauli %cst, %4, %arg0 : (f64, !quake.veq<4>, !cc.charspan) -> ()
    quake.dealloc %4 : !quake.veq<4>
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
  cc.global constant @test_state_param.rodata_synth_0 (dense<[(5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00)]> : tensor<16xcomplex<f32>>) : !cc.array<complex<f32> x 16>
  func.func private @__nvqpp_cudaq_state_createFromData_fp32(!cc.ptr<i8>, i64) -> !cc.ptr<!cc.state>
}


// -----// IR Dump Before LowerToCFG (lower-to-cfg) ('func.func' operation: @llvm.memcpy.p0i8.p0i8.i64) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_state_param(%arg0: !cc.charspan) attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 5.000000e-01 : f64
    %0 = cc.address_of @test_state_param.rodata_synth_0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %1 = cc.load %0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %2 = cc.alloca !cc.array<complex<f32> x 16>
    cc.store %1, %2 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %3 = quake.alloca !quake.veq<4>
    %4 = quake.init_state %3, %2 : (!quake.veq<4>, !cc.ptr<!cc.array<complex<f32> x 16>>) -> !quake.veq<4>
    quake.exp_pauli %cst, %4, %arg0 : (f64, !quake.veq<4>, !cc.charspan) -> ()
    quake.dealloc %4 : !quake.veq<4>
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
  cc.global constant @test_state_param.rodata_synth_0 (dense<[(5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00)]> : tensor<16xcomplex<f32>>) : !cc.array<complex<f32> x 16>
  func.func private @__nvqpp_cudaq_state_createFromData_fp32(!cc.ptr<i8>, i64) -> !cc.ptr<!cc.state>
}


// -----// IR Dump Before CombineQuantumAllocations (combine-quantum-alloc) ('func.func' operation: @llvm.memcpy.p0i8.p0i8.i64) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_state_param(%arg0: !cc.charspan) attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 5.000000e-01 : f64
    %0 = cc.address_of @test_state_param.rodata_synth_0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %1 = cc.load %0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %2 = cc.alloca !cc.array<complex<f32> x 16>
    cc.store %1, %2 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %3 = quake.alloca !quake.veq<4>
    %4 = quake.init_state %3, %2 : (!quake.veq<4>, !cc.ptr<!cc.array<complex<f32> x 16>>) -> !quake.veq<4>
    quake.exp_pauli %cst, %4, %arg0 : (f64, !quake.veq<4>, !cc.charspan) -> ()
    quake.dealloc %4 : !quake.veq<4>
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
  cc.global constant @test_state_param.rodata_synth_0 (dense<[(5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00)]> : tensor<16xcomplex<f32>>) : !cc.array<complex<f32> x 16>
  func.func private @__nvqpp_cudaq_state_createFromData_fp32(!cc.ptr<i8>, i64) -> !cc.ptr<!cc.state>
}


// -----// IR Dump Before LowerToCFG (lower-to-cfg) ('func.func' operation: @__nvqpp_cudaq_state_createFromData_fp32) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_state_param(%arg0: !cc.charspan) attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 5.000000e-01 : f64
    %0 = cc.address_of @test_state_param.rodata_synth_0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %1 = cc.load %0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %2 = cc.alloca !cc.array<complex<f32> x 16>
    cc.store %1, %2 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %3 = quake.alloca !quake.veq<4>
    %4 = quake.init_state %3, %2 : (!quake.veq<4>, !cc.ptr<!cc.array<complex<f32> x 16>>) -> !quake.veq<4>
    quake.exp_pauli %cst, %4, %arg0 : (f64, !quake.veq<4>, !cc.charspan) -> ()
    quake.dealloc %4 : !quake.veq<4>
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
  cc.global constant @test_state_param.rodata_synth_0 (dense<[(5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00)]> : tensor<16xcomplex<f32>>) : !cc.array<complex<f32> x 16>
  func.func private @__nvqpp_cudaq_state_createFromData_fp32(!cc.ptr<i8>, i64) -> !cc.ptr<!cc.state>
}


// -----// IR Dump Before CombineQuantumAllocations (combine-quantum-alloc) ('func.func' operation: @__nvqpp_cudaq_state_createFromData_fp32) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_state_param(%arg0: !cc.charspan) attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 5.000000e-01 : f64
    %0 = cc.address_of @test_state_param.rodata_synth_0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %1 = cc.load %0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %2 = cc.alloca !cc.array<complex<f32> x 16>
    cc.store %1, %2 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %3 = quake.alloca !quake.veq<4>
    %4 = quake.init_state %3, %2 : (!quake.veq<4>, !cc.ptr<!cc.array<complex<f32> x 16>>) -> !quake.veq<4>
    quake.exp_pauli %cst, %4, %arg0 : (f64, !quake.veq<4>, !cc.charspan) -> ()
    quake.dealloc %4 : !quake.veq<4>
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
  cc.global constant @test_state_param.rodata_synth_0 (dense<[(5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00)]> : tensor<16xcomplex<f32>>) : !cc.array<complex<f32> x 16>
  func.func private @__nvqpp_cudaq_state_createFromData_fp32(!cc.ptr<i8>, i64) -> !cc.ptr<!cc.state>
}


// -----// IR Dump Before Canonicalizer (canonicalize) ('builtin.module' operation) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_state_param(%arg0: !cc.charspan) attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 5.000000e-01 : f64
    %0 = cc.address_of @test_state_param.rodata_synth_0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %1 = cc.load %0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %2 = cc.alloca !cc.array<complex<f32> x 16>
    cc.store %1, %2 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %3 = quake.alloca !quake.veq<4>
    %4 = quake.init_state %3, %2 : (!quake.veq<4>, !cc.ptr<!cc.array<complex<f32> x 16>>) -> !quake.veq<4>
    quake.exp_pauli %cst, %4, %arg0 : (f64, !quake.veq<4>, !cc.charspan) -> ()
    quake.dealloc %4 : !quake.veq<4>
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
  cc.global constant @test_state_param.rodata_synth_0 (dense<[(5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00)]> : tensor<16xcomplex<f32>>) : !cc.array<complex<f32> x 16>
  func.func private @__nvqpp_cudaq_state_createFromData_fp32(!cc.ptr<i8>, i64) -> !cc.ptr<!cc.state>
}


// -----// IR Dump Before CSE (cse) ('builtin.module' operation) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_state_param(%arg0: !cc.charspan) attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 5.000000e-01 : f64
    %0 = cc.address_of @test_state_param.rodata_synth_0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %1 = cc.load %0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %2 = cc.alloca !cc.array<complex<f32> x 16>
    cc.store %1, %2 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %3 = quake.alloca !quake.veq<4>
    %4 = quake.init_state %3, %2 : (!quake.veq<4>, !cc.ptr<!cc.array<complex<f32> x 16>>) -> !quake.veq<4>
    quake.exp_pauli %cst, %4, %arg0 : (f64, !quake.veq<4>, !cc.charspan) -> ()
    quake.dealloc %4 : !quake.veq<4>
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
  cc.global constant @test_state_param.rodata_synth_0 (dense<[(5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00)]> : tensor<16xcomplex<f32>>) : !cc.array<complex<f32> x 16>
  func.func private @__nvqpp_cudaq_state_createFromData_fp32(!cc.ptr<i8>, i64) -> !cc.ptr<!cc.state>
}


// -----// IR Dump Before ConvertMathToFuncs (convert-math-to-funcs) ('builtin.module' operation) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_state_param(%arg0: !cc.charspan) attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 5.000000e-01 : f64
    %0 = cc.address_of @test_state_param.rodata_synth_0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %1 = cc.load %0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %2 = cc.alloca !cc.array<complex<f32> x 16>
    cc.store %1, %2 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %3 = quake.alloca !quake.veq<4>
    %4 = quake.init_state %3, %2 : (!quake.veq<4>, !cc.ptr<!cc.array<complex<f32> x 16>>) -> !quake.veq<4>
    quake.exp_pauli %cst, %4, %arg0 : (f64, !quake.veq<4>, !cc.charspan) -> ()
    quake.dealloc %4 : !quake.veq<4>
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
  cc.global constant @test_state_param.rodata_synth_0 (dense<[(5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00)]> : tensor<16xcomplex<f32>>) : !cc.array<complex<f32> x 16>
  func.func private @__nvqpp_cudaq_state_createFromData_fp32(!cc.ptr<i8>, i64) -> !cc.ptr<!cc.state>
}


// -----// IR Dump Before ConvertToQIR (quake-to-qir) ('builtin.module' operation) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  func.func @__nvqpp__mlirgen__test_state_param(%arg0: !cc.charspan) attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %cst = arith.constant 5.000000e-01 : f64
    %0 = cc.address_of @test_state_param.rodata_synth_0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %1 = cc.load %0 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %2 = cc.alloca !cc.array<complex<f32> x 16>
    cc.store %1, %2 : !cc.ptr<!cc.array<complex<f32> x 16>>
    %3 = quake.alloca !quake.veq<4>
    %4 = quake.init_state %3, %2 : (!quake.veq<4>, !cc.ptr<!cc.array<complex<f32> x 16>>) -> !quake.veq<4>
    quake.exp_pauli %cst, %4, %arg0 : (f64, !quake.veq<4>, !cc.charspan) -> ()
    quake.dealloc %4 : !quake.veq<4>
    return
  }
  func.func private @__nvqpp_cudaq_state_numberOfQubits(!cc.ptr<!cc.state>) -> i64
  func.func private @streamlinedLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
  func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
  func.func private @malloc(i64) -> !cc.ptr<i8>
  func.func private @free(!cc.ptr<i8>)
  func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
  func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>)
  func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
  cc.global constant @test_state_param.rodata_synth_0 (dense<[(5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00)]> : tensor<16xcomplex<f32>>) : !cc.array<complex<f32> x 16>
  func.func private @__nvqpp_cudaq_state_createFromData_fp32(!cc.ptr<i8>, i64) -> !cc.ptr<!cc.state>
}


// -----// IR Dump After ConvertToQIR (quake-to-qir) ('builtin.module' operation) //----- //
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__test_init_large_state = "_ZN21test_init_large_stateclEv", __nvqpp__mlirgen__test_init_state = "_ZN15test_init_stateclEv", __nvqpp__mlirgen__test_state_param = "_ZN16test_state_paramclEPN5cudaq5stateENS0_10pauli_wordE"}} {
  llvm.func @__quantum__rt__qubit_release_array(!llvm.ptr<struct<"Array", opaque>>)
  llvm.func @__quantum__qis__exp_pauli(f64, !llvm.ptr<struct<"Array", opaque>>, !llvm.ptr<i8>)
  llvm.func @__quantum__rt__qubit_allocate_array_with_state_complex32(i64, !llvm.ptr<i8>) -> !llvm.ptr<struct<"Array", opaque>>
  llvm.func @__nvqpp__mlirgen__test_state_param(%arg0: !llvm.struct<(ptr<i8>, i64)>) attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %0 = llvm.mlir.constant(1 : i64) : i64
    %1 = llvm.alloca %0 x !llvm.struct<(ptr<i8>, i64)> : (i64) -> !llvm.ptr<struct<(ptr<i8>, i64)>>
    %2 = llvm.mlir.constant(5.000000e-01 : f64) : f64
    %3 = llvm.mlir.addressof @test_state_param.rodata_synth_0 : !llvm.ptr<array<16 x struct<(f32, f32)>>>
    %4 = llvm.load %3 : !llvm.ptr<array<16 x struct<(f32, f32)>>>
    %5 = llvm.mlir.constant(1 : i32) : i32
    %6 = llvm.alloca %5 x !llvm.array<16 x struct<(f32, f32)>> : (i32) -> !llvm.ptr<array<16 x struct<(f32, f32)>>>
    llvm.store %4, %6 : !llvm.ptr<array<16 x struct<(f32, f32)>>>
    %7 = llvm.mlir.constant(4 : i64) : i64
    %8 = llvm.bitcast %6 : !llvm.ptr<array<16 x struct<(f32, f32)>>> to !llvm.ptr<i8>
    %9 = llvm.call @__quantum__rt__qubit_allocate_array_with_state_complex32(%7, %8) : (i64, !llvm.ptr<i8>) -> !llvm.ptr<struct<"Array", opaque>>
    llvm.store %arg0, %1 : !llvm.ptr<struct<(ptr<i8>, i64)>>
    %10 = llvm.bitcast %1 : !llvm.ptr<struct<(ptr<i8>, i64)>> to !llvm.ptr<i8>
    llvm.call @__quantum__qis__exp_pauli(%2, %9, %10) : (f64, !llvm.ptr<struct<"Array", opaque>>, !llvm.ptr<i8>) -> ()
    llvm.call @__quantum__rt__qubit_release_array(%9) : (!llvm.ptr<struct<"Array", opaque>>) -> ()
    llvm.return
  }
  llvm.func @__nvqpp_cudaq_state_numberOfQubits(!llvm.ptr<ptr<i8>>) -> i64 attributes {sym_visibility = "private"}
  llvm.func @streamlinedLaunchKernel(!llvm.ptr<i8>, !llvm.ptr<i8>) attributes {sym_visibility = "private"}
  llvm.func @cudaqRegisterKernelName(!llvm.ptr<i8>) attributes {sym_visibility = "private"}
  llvm.func @cudaqRegisterArgsCreator(!llvm.ptr<i8>, !llvm.ptr<i8>) attributes {sym_visibility = "private"}
  llvm.func @malloc(i64) -> !llvm.ptr<i8> attributes {sym_visibility = "private"}
  llvm.func @free(!llvm.ptr<i8>) attributes {sym_visibility = "private"}
  llvm.func @__nvqpp_initializer_list_to_vector_bool(!llvm.ptr<i8>, !llvm.ptr<i8>, i64) attributes {sym_visibility = "private"}
  llvm.func @__nvqpp_vector_bool_to_initializer_list(!llvm.ptr<struct<(ptr<i1>, ptr<i1>, ptr<i1>)>>, !llvm.ptr<struct<(ptr<i1>, ptr<i1>, ptr<i1>)>>) attributes {sym_visibility = "private"}
  llvm.func @llvm.memcpy.p0i8.p0i8.i64(!llvm.ptr<i8>, !llvm.ptr<i8>, i64, i1) attributes {sym_visibility = "private"}
  llvm.mlir.global private constant @test_state_param.rodata_synth_0(dense<[(5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (5.000000e-01,0.000000e+00), (5.000000e-01,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00)]> : tensor<16xcomplex<f32>>) {addr_space = 0 : i32} : !llvm.array<16 x struct<(f32, f32)>>
  llvm.func @__nvqpp_cudaq_state_createFromData_fp32(!llvm.ptr<i8>, i64) -> !llvm.ptr<ptr<i8>> attributes {sym_visibility = "private"}
}


terminate called after throwing an instance of 'std::runtime_error'
  what():  Failed to launch kernel. Error: Failed to execute the kernel on the remote server: "Failed to process incoming request"
Error message: "std::bad_alloc"


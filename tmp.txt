// -----// IR Dump Before MemToReg (memtoreg) ('func.func' operation: @__nvqpp__mlirgen__kernel) //----- //
module attributes {quake.mangled_name_map = {__nvqpp__mlirgen__kernel = "__nvqpp__mlirgen__kernel_PyKernelEntryPointRewrite"}} {
  func.func @__nvqpp__mlirgen__kernel() attributes {"cudaq-entrypoint"} {
    %c1_i64 = arith.constant 1 : i64
    %c2_i64 = arith.constant 2 : i64
    %c0_i64 = arith.constant 0 : i64
    %c3_i64 = arith.constant 3 : i64
    %0 = quake.alloca !quake.veq<3>
    %1 = cc.alloca !cc.array<i64 x 2>
    %2 = cc.cast %1 : (!cc.ptr<!cc.array<i64 x 2>>) -> !cc.ptr<!cc.array<i64 x ?>>
    %3 = cc.cast %1 : (!cc.ptr<!cc.array<i64 x 2>>) -> !cc.ptr<i64>
    cc.store %c0_i64, %3 : !cc.ptr<i64>
    %4 = cc.compute_ptr %1[1] : (!cc.ptr<!cc.array<i64 x 2>>) -> !cc.ptr<i64>
    cc.store %c3_i64, %4 : !cc.ptr<i64>
    %5 = cc.stdvec_init %2, %c2_i64 : (!cc.ptr<!cc.array<i64 x ?>>, i64) -> !cc.stdvec<i64>
    %6 = cc.alloca !cc.stdvec<i64>
    cc.store %5, %6 : !cc.ptr<!cc.stdvec<i64>>
    %7 = cc.load %6 : !cc.ptr<!cc.stdvec<i64>>
    %8 = cc.stdvec_data %7 : (!cc.stdvec<i64>) -> !cc.ptr<!cc.array<i64 x ?>>
    %9 = cc.compute_ptr %8[1] : (!cc.ptr<!cc.array<i64 x ?>>) -> !cc.ptr<i64>
    %10 = cc.load %9 : !cc.ptr<i64>
    %11 = cc.alloca i64
    cc.store %10, %11 : !cc.ptr<i64>
    %12 = cc.load %11 : !cc.ptr<i64>
    %13 = cc.loop while ((%arg0 = %c0_i64) -> (i64)) {
      %14 = arith.cmpi slt, %arg0, %12 : i64
      cc.condition %14(%arg0 : i64)
    } do {
    ^bb0(%arg0: i64):
      %14 = quake.extract_ref %0[%arg0] : (!quake.veq<3>, i64) -> !quake.ref
      quake.x %14 : (!quake.ref) -> ()
      cc.continue %arg0 : i64
    } step {
    ^bb0(%arg0: i64):
      %14 = arith.addi %arg0, %c1_i64 : i64
      cc.continue %14 : i64
    } {invariant}
    return
  }
}


// -----// IR Dump After MemToReg (memtoreg) ('func.func' operation: @__nvqpp__mlirgen__kernel) //----- //
module attributes {quake.mangled_name_map = {__nvqpp__mlirgen__kernel = "__nvqpp__mlirgen__kernel_PyKernelEntryPointRewrite"}} {
  func.func @__nvqpp__mlirgen__kernel() attributes {"cudaq-entrypoint"} {
    %c1_i64 = arith.constant 1 : i64
    %c2_i64 = arith.constant 2 : i64
    %c0_i64 = arith.constant 0 : i64
    %c3_i64 = arith.constant 3 : i64
    %0 = quake.alloca !quake.veq<3>
    %1 = cc.alloca !cc.array<i64 x 2>
    %2 = cc.cast %1 : (!cc.ptr<!cc.array<i64 x 2>>) -> !cc.ptr<!cc.array<i64 x ?>>
    %3 = cc.cast %1 : (!cc.ptr<!cc.array<i64 x 2>>) -> !cc.ptr<i64>
    cc.store %c0_i64, %3 : !cc.ptr<i64>
    %4 = cc.compute_ptr %1[1] : (!cc.ptr<!cc.array<i64 x 2>>) -> !cc.ptr<i64>
    cc.store %c3_i64, %4 : !cc.ptr<i64>
    %5 = cc.stdvec_init %2, %c2_i64 : (!cc.ptr<!cc.array<i64 x ?>>, i64) -> !cc.stdvec<i64>
    %6 = cc.undef !cc.stdvec<i64>
    %7 = cc.stdvec_data %5 : (!cc.stdvec<i64>) -> !cc.ptr<!cc.array<i64 x ?>>
    %8 = cc.compute_ptr %7[1] : (!cc.ptr<!cc.array<i64 x ?>>) -> !cc.ptr<i64>
    %9 = cc.load %8 : !cc.ptr<i64>
    %10 = cc.undef i64
    %11 = cc.loop while ((%arg0 = %c0_i64) -> (i64)) {
      %12 = arith.cmpi slt, %arg0, %9 : i64
      cc.condition %12(%arg0 : i64)
    } do {
    ^bb0(%arg0: i64):
      %12 = quake.extract_ref %0[%arg0] : (!quake.veq<3>, i64) -> !quake.ref
      quake.x %12 : (!quake.ref) -> ()
      cc.continue %arg0 : i64
    } step {
    ^bb0(%arg0: i64):
      %12 = arith.addi %arg0, %c1_i64 : i64
      cc.continue %12 : i64
    } {invariant}
    return
  }
}


// -----// IR Dump Before Canonicalizer (canonicalize) ('func.func' operation: @__nvqpp__mlirgen__kernel) //----- //
module attributes {quake.mangled_name_map = {__nvqpp__mlirgen__kernel = "__nvqpp__mlirgen__kernel_PyKernelEntryPointRewrite"}} {
  func.func @__nvqpp__mlirgen__kernel() attributes {"cudaq-entrypoint"} {
    %c1_i64 = arith.constant 1 : i64
    %c2_i64 = arith.constant 2 : i64
    %c0_i64 = arith.constant 0 : i64
    %c3_i64 = arith.constant 3 : i64
    %0 = quake.alloca !quake.veq<3>
    %1 = cc.alloca !cc.array<i64 x 2>
    %2 = cc.cast %1 : (!cc.ptr<!cc.array<i64 x 2>>) -> !cc.ptr<!cc.array<i64 x ?>>
    %3 = cc.cast %1 : (!cc.ptr<!cc.array<i64 x 2>>) -> !cc.ptr<i64>
    cc.store %c0_i64, %3 : !cc.ptr<i64>
    %4 = cc.compute_ptr %1[1] : (!cc.ptr<!cc.array<i64 x 2>>) -> !cc.ptr<i64>
    cc.store %c3_i64, %4 : !cc.ptr<i64>
    %5 = cc.stdvec_init %2, %c2_i64 : (!cc.ptr<!cc.array<i64 x ?>>, i64) -> !cc.stdvec<i64>
    %6 = cc.undef !cc.stdvec<i64>
    %7 = cc.stdvec_data %5 : (!cc.stdvec<i64>) -> !cc.ptr<!cc.array<i64 x ?>>
    %8 = cc.compute_ptr %7[1] : (!cc.ptr<!cc.array<i64 x ?>>) -> !cc.ptr<i64>
    %9 = cc.load %8 : !cc.ptr<i64>
    %10 = cc.undef i64
    %11 = cc.loop while ((%arg0 = %c0_i64) -> (i64)) {
      %12 = arith.cmpi slt, %arg0, %9 : i64
      cc.condition %12(%arg0 : i64)
    } do {
    ^bb0(%arg0: i64):
      %12 = quake.extract_ref %0[%arg0] : (!quake.veq<3>, i64) -> !quake.ref
      quake.x %12 : (!quake.ref) -> ()
      cc.continue %arg0 : i64
    } step {
    ^bb0(%arg0: i64):
      %12 = arith.addi %arg0, %c1_i64 : i64
      cc.continue %12 : i64
    } {invariant}
    return
  }
}


// -----// IR Dump After Canonicalizer (canonicalize) ('func.func' operation: @__nvqpp__mlirgen__kernel) //----- //
module attributes {quake.mangled_name_map = {__nvqpp__mlirgen__kernel = "__nvqpp__mlirgen__kernel_PyKernelEntryPointRewrite"}} {
  func.func @__nvqpp__mlirgen__kernel() attributes {"cudaq-entrypoint"} {
    %c1_i64 = arith.constant 1 : i64
    %c0_i64 = arith.constant 0 : i64
    %c3_i64 = arith.constant 3 : i64
    %0 = quake.alloca !quake.veq<3>
    %1 = cc.alloca !cc.array<i64 x 2>
    %2 = cc.cast %1 : (!cc.ptr<!cc.array<i64 x 2>>) -> !cc.ptr<i64>
    cc.store %c0_i64, %2 : !cc.ptr<i64>
    %3 = cc.compute_ptr %1[1] : (!cc.ptr<!cc.array<i64 x 2>>) -> !cc.ptr<i64>
    cc.store %c3_i64, %3 : !cc.ptr<i64>
    %4 = cc.compute_ptr %1[1] : (!cc.ptr<!cc.array<i64 x 2>>) -> !cc.ptr<i64>
    %5 = cc.load %4 : !cc.ptr<i64>
    %6 = cc.loop while ((%arg0 = %c0_i64) -> (i64)) {
      %7 = arith.cmpi slt, %arg0, %5 : i64
      cc.condition %7(%arg0 : i64)
    } do {
    ^bb0(%arg0: i64):
      %7 = quake.extract_ref %0[%arg0] : (!quake.veq<3>, i64) -> !quake.ref
      quake.x %7 : (!quake.ref) -> ()
      cc.continue %arg0 : i64
    } step {
    ^bb0(%arg0: i64):
      %7 = arith.addi %arg0, %c1_i64 : i64
      cc.continue %7 : i64
    } {invariant}
    return
  }
}


// -----// IR Dump Before CSE (cse) ('func.func' operation: @__nvqpp__mlirgen__kernel) //----- //
module attributes {quake.mangled_name_map = {__nvqpp__mlirgen__kernel = "__nvqpp__mlirgen__kernel_PyKernelEntryPointRewrite"}} {
  func.func @__nvqpp__mlirgen__kernel() attributes {"cudaq-entrypoint"} {
    %c1_i64 = arith.constant 1 : i64
    %c0_i64 = arith.constant 0 : i64
    %c3_i64 = arith.constant 3 : i64
    %0 = quake.alloca !quake.veq<3>
    %1 = cc.alloca !cc.array<i64 x 2>
    %2 = cc.cast %1 : (!cc.ptr<!cc.array<i64 x 2>>) -> !cc.ptr<i64>
    cc.store %c0_i64, %2 : !cc.ptr<i64>
    %3 = cc.compute_ptr %1[1] : (!cc.ptr<!cc.array<i64 x 2>>) -> !cc.ptr<i64>
    cc.store %c3_i64, %3 : !cc.ptr<i64>
    %4 = cc.compute_ptr %1[1] : (!cc.ptr<!cc.array<i64 x 2>>) -> !cc.ptr<i64>
    %5 = cc.load %4 : !cc.ptr<i64>
    %6 = cc.loop while ((%arg0 = %c0_i64) -> (i64)) {
      %7 = arith.cmpi slt, %arg0, %5 : i64
      cc.condition %7(%arg0 : i64)
    } do {
    ^bb0(%arg0: i64):
      %7 = quake.extract_ref %0[%arg0] : (!quake.veq<3>, i64) -> !quake.ref
      quake.x %7 : (!quake.ref) -> ()
      cc.continue %arg0 : i64
    } step {
    ^bb0(%arg0: i64):
      %7 = arith.addi %arg0, %c1_i64 : i64
      cc.continue %7 : i64
    } {invariant}
    return
  }
}


// -----// IR Dump After CSE (cse) ('func.func' operation: @__nvqpp__mlirgen__kernel) //----- //
module attributes {quake.mangled_name_map = {__nvqpp__mlirgen__kernel = "__nvqpp__mlirgen__kernel_PyKernelEntryPointRewrite"}} {
  func.func @__nvqpp__mlirgen__kernel() attributes {"cudaq-entrypoint"} {
    %c1_i64 = arith.constant 1 : i64
    %c0_i64 = arith.constant 0 : i64
    %c3_i64 = arith.constant 3 : i64
    %0 = quake.alloca !quake.veq<3>
    %1 = cc.alloca !cc.array<i64 x 2>
    %2 = cc.cast %1 : (!cc.ptr<!cc.array<i64 x 2>>) -> !cc.ptr<i64>
    cc.store %c0_i64, %2 : !cc.ptr<i64>
    %3 = cc.compute_ptr %1[1] : (!cc.ptr<!cc.array<i64 x 2>>) -> !cc.ptr<i64>
    cc.store %c3_i64, %3 : !cc.ptr<i64>
    %4 = cc.load %3 : !cc.ptr<i64>
    %5 = cc.loop while ((%arg0 = %c0_i64) -> (i64)) {
      %6 = arith.cmpi slt, %arg0, %4 : i64
      cc.condition %6(%arg0 : i64)
    } do {
    ^bb0(%arg0: i64):
      %6 = quake.extract_ref %0[%arg0] : (!quake.veq<3>, i64) -> !quake.ref
      quake.x %6 : (!quake.ref) -> ()
      cc.continue %arg0 : i64
    } step {
    ^bb0(%arg0: i64):
      %6 = arith.addi %arg0, %c1_i64 : i64
      cc.continue %6 : i64
    } {invariant}
    return
  }
}


// -----// IR Dump Before LiftArrayAlloc (lift-array-alloc) ('func.func' operation: @__nvqpp__mlirgen__kernel) //----- //
module attributes {quake.mangled_name_map = {__nvqpp__mlirgen__kernel = "__nvqpp__mlirgen__kernel_PyKernelEntryPointRewrite"}} {
  func.func @__nvqpp__mlirgen__kernel() attributes {"cudaq-entrypoint"} {
    %c1_i64 = arith.constant 1 : i64
    %c0_i64 = arith.constant 0 : i64
    %c3_i64 = arith.constant 3 : i64
    %0 = quake.alloca !quake.veq<3>
    %1 = cc.alloca !cc.array<i64 x 2>
    %2 = cc.cast %1 : (!cc.ptr<!cc.array<i64 x 2>>) -> !cc.ptr<i64>
    cc.store %c0_i64, %2 : !cc.ptr<i64>
    %3 = cc.compute_ptr %1[1] : (!cc.ptr<!cc.array<i64 x 2>>) -> !cc.ptr<i64>
    cc.store %c3_i64, %3 : !cc.ptr<i64>
    %4 = cc.load %3 : !cc.ptr<i64>
    %5 = cc.loop while ((%arg0 = %c0_i64) -> (i64)) {
      %6 = arith.cmpi slt, %arg0, %4 : i64
      cc.condition %6(%arg0 : i64)
    } do {
    ^bb0(%arg0: i64):
      %6 = quake.extract_ref %0[%arg0] : (!quake.veq<3>, i64) -> !quake.ref
      quake.x %6 : (!quake.ref) -> ()
      cc.continue %arg0 : i64
    } step {
    ^bb0(%arg0: i64):
      %6 = arith.addi %arg0, %c1_i64 : i64
      cc.continue %6 : i64
    } {invariant}
    return
  }
}


// -----// IR Dump After LiftArrayAlloc (lift-array-alloc) ('func.func' operation: @__nvqpp__mlirgen__kernel) //----- //
module attributes {quake.mangled_name_map = {__nvqpp__mlirgen__kernel = "__nvqpp__mlirgen__kernel_PyKernelEntryPointRewrite"}} {
  func.func @__nvqpp__mlirgen__kernel() attributes {"cudaq-entrypoint"} {
    %c1_i64 = arith.constant 1 : i64
    %c0_i64 = arith.constant 0 : i64
    %0 = quake.alloca !quake.veq<3>
    %1 = cc.const_array [0, 3] : !cc.array<i64 x 2>
    %2 = cc.extract_value %1[1] : (!cc.array<i64 x 2>) -> i64
    %3 = cc.loop while ((%arg0 = %c0_i64) -> (i64)) {
      %4 = arith.cmpi slt, %arg0, %2 : i64
      cc.condition %4(%arg0 : i64)
    } do {
    ^bb0(%arg0: i64):
      %4 = quake.extract_ref %0[%arg0] : (!quake.veq<3>, i64) -> !quake.ref
      quake.x %4 : (!quake.ref) -> ()
      cc.continue %arg0 : i64
    } step {
    ^bb0(%arg0: i64):
      %4 = arith.addi %arg0, %c1_i64 : i64
      cc.continue %4 : i64
    } {invariant}
    return
  }
}


// -----// IR Dump Before CSE (cse) ('func.func' operation: @__nvqpp__mlirgen__kernel) //----- //
module attributes {quake.mangled_name_map = {__nvqpp__mlirgen__kernel = "__nvqpp__mlirgen__kernel_PyKernelEntryPointRewrite"}} {
  func.func @__nvqpp__mlirgen__kernel() attributes {"cudaq-entrypoint"} {
    %c1_i64 = arith.constant 1 : i64
    %c0_i64 = arith.constant 0 : i64
    %0 = quake.alloca !quake.veq<3>
    %1 = cc.const_array [0, 3] : !cc.array<i64 x 2>
    %2 = cc.extract_value %1[1] : (!cc.array<i64 x 2>) -> i64
    %3 = cc.loop while ((%arg0 = %c0_i64) -> (i64)) {
      %4 = arith.cmpi slt, %arg0, %2 : i64
      cc.condition %4(%arg0 : i64)
    } do {
    ^bb0(%arg0: i64):
      %4 = quake.extract_ref %0[%arg0] : (!quake.veq<3>, i64) -> !quake.ref
      quake.x %4 : (!quake.ref) -> ()
      cc.continue %arg0 : i64
    } step {
    ^bb0(%arg0: i64):
      %4 = arith.addi %arg0, %c1_i64 : i64
      cc.continue %4 : i64
    } {invariant}
    return
  }
}


// -----// IR Dump Before Canonicalizer (canonicalize) ('func.func' operation: @__nvqpp__mlirgen__kernel) //----- //
module attributes {quake.mangled_name_map = {__nvqpp__mlirgen__kernel = "__nvqpp__mlirgen__kernel_PyKernelEntryPointRewrite"}} {
  func.func @__nvqpp__mlirgen__kernel() attributes {"cudaq-entrypoint"} {
    %c1_i64 = arith.constant 1 : i64
    %c0_i64 = arith.constant 0 : i64
    %0 = quake.alloca !quake.veq<3>
    %1 = cc.const_array [0, 3] : !cc.array<i64 x 2>
    %2 = cc.extract_value %1[1] : (!cc.array<i64 x 2>) -> i64
    %3 = cc.loop while ((%arg0 = %c0_i64) -> (i64)) {
      %4 = arith.cmpi slt, %arg0, %2 : i64
      cc.condition %4(%arg0 : i64)
    } do {
    ^bb0(%arg0: i64):
      %4 = quake.extract_ref %0[%arg0] : (!quake.veq<3>, i64) -> !quake.ref
      quake.x %4 : (!quake.ref) -> ()
      cc.continue %arg0 : i64
    } step {
    ^bb0(%arg0: i64):
      %4 = arith.addi %arg0, %c1_i64 : i64
      cc.continue %4 : i64
    } {invariant}
    return
  }
}


// -----// IR Dump After Canonicalizer (canonicalize) ('func.func' operation: @__nvqpp__mlirgen__kernel) //----- //
module attributes {quake.mangled_name_map = {__nvqpp__mlirgen__kernel = "__nvqpp__mlirgen__kernel_PyKernelEntryPointRewrite"}} {
  func.func @__nvqpp__mlirgen__kernel() attributes {"cudaq-entrypoint"} {
    %c3_i64 = arith.constant 3 : i64
    %c1_i64 = arith.constant 1 : i64
    %c0_i64 = arith.constant 0 : i64
    %0 = quake.alloca !quake.veq<3>
    %1 = cc.loop while ((%arg0 = %c0_i64) -> (i64)) {
      %2 = arith.cmpi slt, %arg0, %c3_i64 : i64
      cc.condition %2(%arg0 : i64)
    } do {
    ^bb0(%arg0: i64):
      %2 = quake.extract_ref %0[%arg0] : (!quake.veq<3>, i64) -> !quake.ref
      quake.x %2 : (!quake.ref) -> ()
      cc.continue %arg0 : i64
    } step {
    ^bb0(%arg0: i64):
      %2 = arith.addi %arg0, %c1_i64 : i64
      cc.continue %2 : i64
    } {invariant}
    return
  }
}


// -----// IR Dump Before LoopUnroll (cc-loop-unroll) ('builtin.module' operation) //----- //
module attributes {quake.mangled_name_map = {__nvqpp__mlirgen__kernel = "__nvqpp__mlirgen__kernel_PyKernelEntryPointRewrite"}} {
  func.func @__nvqpp__mlirgen__kernel() attributes {"cudaq-entrypoint"} {
    %c3_i64 = arith.constant 3 : i64
    %c1_i64 = arith.constant 1 : i64
    %c0_i64 = arith.constant 0 : i64
    %0 = quake.alloca !quake.veq<3>
    %1 = cc.loop while ((%arg0 = %c0_i64) -> (i64)) {
      %2 = arith.cmpi slt, %arg0, %c3_i64 : i64
      cc.condition %2(%arg0 : i64)
    } do {
    ^bb0(%arg0: i64):
      %2 = quake.extract_ref %0[%arg0] : (!quake.veq<3>, i64) -> !quake.ref
      quake.x %2 : (!quake.ref) -> ()
      cc.continue %arg0 : i64
    } step {
    ^bb0(%arg0: i64):
      %2 = arith.addi %arg0, %c1_i64 : i64
      cc.continue %2 : i64
    } {invariant}
    return
  }
}


// -----// IR Dump After LoopUnroll (cc-loop-unroll) ('builtin.module' operation) //----- //
module attributes {quake.mangled_name_map = {__nvqpp__mlirgen__kernel = "__nvqpp__mlirgen__kernel_PyKernelEntryPointRewrite"}} {
  func.func @__nvqpp__mlirgen__kernel() attributes {"cudaq-entrypoint"} {
    %0 = quake.alloca !quake.veq<3>
    %1 = quake.extract_ref %0[0] : (!quake.veq<3>) -> !quake.ref
    quake.x %1 : (!quake.ref) -> ()
    %2 = quake.extract_ref %0[1] : (!quake.veq<3>) -> !quake.ref
    quake.x %2 : (!quake.ref) -> ()
    %3 = quake.extract_ref %0[2] : (!quake.veq<3>) -> !quake.ref
    quake.x %3 : (!quake.ref) -> ()
    return
  }
}


// -----// IR Dump Before Canonicalizer (canonicalize) ('builtin.module' operation) //----- //
module attributes {quake.mangled_name_map = {__nvqpp__mlirgen__kernel = "__nvqpp__mlirgen__kernel_PyKernelEntryPointRewrite"}} {
  func.func @__nvqpp__mlirgen__kernel() attributes {"cudaq-entrypoint"} {
    %0 = quake.alloca !quake.veq<3>
    %1 = quake.extract_ref %0[0] : (!quake.veq<3>) -> !quake.ref
    quake.x %1 : (!quake.ref) -> ()
    %2 = quake.extract_ref %0[1] : (!quake.veq<3>) -> !quake.ref
    quake.x %2 : (!quake.ref) -> ()
    %3 = quake.extract_ref %0[2] : (!quake.veq<3>) -> !quake.ref
    quake.x %3 : (!quake.ref) -> ()
    return
  }
}


// -----// IR Dump Before ConstPropComplex (const-prop-complex) ('func.func' operation: @__nvqpp__mlirgen__kernel) //----- //
module attributes {quake.mangled_name_map = {__nvqpp__mlirgen__kernel = "__nvqpp__mlirgen__kernel_PyKernelEntryPointRewrite"}} {
  func.func @__nvqpp__mlirgen__kernel() attributes {"cudaq-entrypoint"} {
    %0 = quake.alloca !quake.veq<3>
    %1 = quake.extract_ref %0[0] : (!quake.veq<3>) -> !quake.ref
    quake.x %1 : (!quake.ref) -> ()
    %2 = quake.extract_ref %0[1] : (!quake.veq<3>) -> !quake.ref
    quake.x %2 : (!quake.ref) -> ()
    %3 = quake.extract_ref %0[2] : (!quake.veq<3>) -> !quake.ref
    quake.x %3 : (!quake.ref) -> ()
    return
  }
}


// -----// IR Dump Before Canonicalizer (canonicalize) ('func.func' operation: @__nvqpp__mlirgen__kernel) //----- //
module attributes {quake.mangled_name_map = {__nvqpp__mlirgen__kernel = "__nvqpp__mlirgen__kernel_PyKernelEntryPointRewrite"}} {
  func.func @__nvqpp__mlirgen__kernel() attributes {"cudaq-entrypoint"} {
    %0 = quake.alloca !quake.veq<3>
    %1 = quake.extract_ref %0[0] : (!quake.veq<3>) -> !quake.ref
    quake.x %1 : (!quake.ref) -> ()
    %2 = quake.extract_ref %0[1] : (!quake.veq<3>) -> !quake.ref
    quake.x %2 : (!quake.ref) -> ()
    %3 = quake.extract_ref %0[2] : (!quake.veq<3>) -> !quake.ref
    quake.x %3 : (!quake.ref) -> ()
    return
  }
}


// -----// IR Dump Before CSE (cse) ('func.func' operation: @__nvqpp__mlirgen__kernel) //----- //
module attributes {quake.mangled_name_map = {__nvqpp__mlirgen__kernel = "__nvqpp__mlirgen__kernel_PyKernelEntryPointRewrite"}} {
  func.func @__nvqpp__mlirgen__kernel() attributes {"cudaq-entrypoint"} {
    %0 = quake.alloca !quake.veq<3>
    %1 = quake.extract_ref %0[0] : (!quake.veq<3>) -> !quake.ref
    quake.x %1 : (!quake.ref) -> ()
    %2 = quake.extract_ref %0[1] : (!quake.veq<3>) -> !quake.ref
    quake.x %2 : (!quake.ref) -> ()
    %3 = quake.extract_ref %0[2] : (!quake.veq<3>) -> !quake.ref
    quake.x %3 : (!quake.ref) -> ()
    return
  }
}


// -----// IR Dump Before LiftArrayAlloc (lift-array-alloc) ('func.func' operation: @__nvqpp__mlirgen__kernel) //----- //
module attributes {quake.mangled_name_map = {__nvqpp__mlirgen__kernel = "__nvqpp__mlirgen__kernel_PyKernelEntryPointRewrite"}} {
  func.func @__nvqpp__mlirgen__kernel() attributes {"cudaq-entrypoint"} {
    %0 = quake.alloca !quake.veq<3>
    %1 = quake.extract_ref %0[0] : (!quake.veq<3>) -> !quake.ref
    quake.x %1 : (!quake.ref) -> ()
    %2 = quake.extract_ref %0[1] : (!quake.veq<3>) -> !quake.ref
    quake.x %2 : (!quake.ref) -> ()
    %3 = quake.extract_ref %0[2] : (!quake.veq<3>) -> !quake.ref
    quake.x %3 : (!quake.ref) -> ()
    return
  }
}


// -----// IR Dump Before GlobalizeArrayValues (globalize-array-values) ('builtin.module' operation) //----- //
module attributes {quake.mangled_name_map = {__nvqpp__mlirgen__kernel = "__nvqpp__mlirgen__kernel_PyKernelEntryPointRewrite"}} {
  func.func @__nvqpp__mlirgen__kernel() attributes {"cudaq-entrypoint"} {
    %0 = quake.alloca !quake.veq<3>
    %1 = quake.extract_ref %0[0] : (!quake.veq<3>) -> !quake.ref
    quake.x %1 : (!quake.ref) -> ()
    %2 = quake.extract_ref %0[1] : (!quake.veq<3>) -> !quake.ref
    quake.x %2 : (!quake.ref) -> ()
    %3 = quake.extract_ref %0[2] : (!quake.veq<3>) -> !quake.ref
    quake.x %3 : (!quake.ref) -> ()
    return
  }
}


// -----// IR Dump Before StatePreparation (state-prep) ('builtin.module' operation) //----- //
module attributes {quake.mangled_name_map = {__nvqpp__mlirgen__kernel = "__nvqpp__mlirgen__kernel_PyKernelEntryPointRewrite"}} {
  func.func @__nvqpp__mlirgen__kernel() attributes {"cudaq-entrypoint"} {
    %0 = quake.alloca !quake.veq<3>
    %1 = quake.extract_ref %0[0] : (!quake.veq<3>) -> !quake.ref
    quake.x %1 : (!quake.ref) -> ()
    %2 = quake.extract_ref %0[1] : (!quake.veq<3>) -> !quake.ref
    quake.x %2 : (!quake.ref) -> ()
    %3 = quake.extract_ref %0[2] : (!quake.veq<3>) -> !quake.ref
    quake.x %3 : (!quake.ref) -> ()
    return
  }
}


// -----// IR Dump Before UnitarySynthesis (unitary-synthesis) ('builtin.module' operation) //----- //
module attributes {quake.mangled_name_map = {__nvqpp__mlirgen__kernel = "__nvqpp__mlirgen__kernel_PyKernelEntryPointRewrite"}} {
  func.func @__nvqpp__mlirgen__kernel() attributes {"cudaq-entrypoint"} {
    %0 = quake.alloca !quake.veq<3>
    %1 = quake.extract_ref %0[0] : (!quake.veq<3>) -> !quake.ref
    quake.x %1 : (!quake.ref) -> ()
    %2 = quake.extract_ref %0[1] : (!quake.veq<3>) -> !quake.ref
    quake.x %2 : (!quake.ref) -> ()
    %3 = quake.extract_ref %0[2] : (!quake.veq<3>) -> !quake.ref
    quake.x %3 : (!quake.ref) -> ()
    return
  }
}


// -----// IR Dump Before Canonicalizer (canonicalize) ('builtin.module' operation) //----- //
module attributes {quake.mangled_name_map = {__nvqpp__mlirgen__kernel = "__nvqpp__mlirgen__kernel_PyKernelEntryPointRewrite"}} {
  func.func @__nvqpp__mlirgen__kernel() attributes {"cudaq-entrypoint"} {
    %0 = quake.alloca !quake.veq<3>
    %1 = quake.extract_ref %0[0] : (!quake.veq<3>) -> !quake.ref
    quake.x %1 : (!quake.ref) -> ()
    %2 = quake.extract_ref %0[1] : (!quake.veq<3>) -> !quake.ref
    quake.x %2 : (!quake.ref) -> ()
    %3 = quake.extract_ref %0[2] : (!quake.veq<3>) -> !quake.ref
    quake.x %3 : (!quake.ref) -> ()
    return
  }
}


// -----// IR Dump Before ApplySpecialization (apply-op-specialization) ('builtin.module' operation) //----- //
module attributes {quake.mangled_name_map = {__nvqpp__mlirgen__kernel = "__nvqpp__mlirgen__kernel_PyKernelEntryPointRewrite"}} {
  func.func @__nvqpp__mlirgen__kernel() attributes {"cudaq-entrypoint"} {
    %0 = quake.alloca !quake.veq<3>
    %1 = quake.extract_ref %0[0] : (!quake.veq<3>) -> !quake.ref
    quake.x %1 : (!quake.ref) -> ()
    %2 = quake.extract_ref %0[1] : (!quake.veq<3>) -> !quake.ref
    quake.x %2 : (!quake.ref) -> ()
    %3 = quake.extract_ref %0[2] : (!quake.veq<3>) -> !quake.ref
    quake.x %3 : (!quake.ref) -> ()
    return
  }
}


// -----// IR Dump Before ConvertToDirectCalls (indirect-to-direct-calls) ('builtin.module' operation) //----- //
module attributes {quake.mangled_name_map = {__nvqpp__mlirgen__kernel = "__nvqpp__mlirgen__kernel_PyKernelEntryPointRewrite"}} {
  func.func @__nvqpp__mlirgen__kernel() attributes {"cudaq-entrypoint"} {
    %0 = quake.alloca !quake.veq<3>
    %1 = quake.extract_ref %0[0] : (!quake.veq<3>) -> !quake.ref
    quake.x %1 : (!quake.ref) -> ()
    %2 = quake.extract_ref %0[1] : (!quake.veq<3>) -> !quake.ref
    quake.x %2 : (!quake.ref) -> ()
    %3 = quake.extract_ref %0[2] : (!quake.veq<3>) -> !quake.ref
    quake.x %3 : (!quake.ref) -> ()
    return
  }
}


// -----// IR Dump Before Inliner (inline) ('builtin.module' operation) //----- //
module attributes {quake.mangled_name_map = {__nvqpp__mlirgen__kernel = "__nvqpp__mlirgen__kernel_PyKernelEntryPointRewrite"}} {
  func.func @__nvqpp__mlirgen__kernel() attributes {"cudaq-entrypoint"} {
    %0 = quake.alloca !quake.veq<3>
    %1 = quake.extract_ref %0[0] : (!quake.veq<3>) -> !quake.ref
    quake.x %1 : (!quake.ref) -> ()
    %2 = quake.extract_ref %0[1] : (!quake.veq<3>) -> !quake.ref
    quake.x %2 : (!quake.ref) -> ()
    %3 = quake.extract_ref %0[2] : (!quake.veq<3>) -> !quake.ref
    quake.x %3 : (!quake.ref) -> ()
    return
  }
}


// -----// IR Dump Before Canonicalizer (canonicalize) ('func.func' operation: @__nvqpp__mlirgen__kernel) //----- //
module attributes {quake.mangled_name_map = {__nvqpp__mlirgen__kernel = "__nvqpp__mlirgen__kernel_PyKernelEntryPointRewrite"}} {
  func.func @__nvqpp__mlirgen__kernel() attributes {"cudaq-entrypoint"} {
    %0 = quake.alloca !quake.veq<3>
    %1 = quake.extract_ref %0[0] : (!quake.veq<3>) -> !quake.ref
    quake.x %1 : (!quake.ref) -> ()
    %2 = quake.extract_ref %0[1] : (!quake.veq<3>) -> !quake.ref
    quake.x %2 : (!quake.ref) -> ()
    %3 = quake.extract_ref %0[2] : (!quake.veq<3>) -> !quake.ref
    quake.x %3 : (!quake.ref) -> ()
    return
  }
}


// -----// IR Dump Before CheckKernelCalls (check-kernel-calls) ('func.func' operation: @__nvqpp__mlirgen__kernel) //----- //
module attributes {quake.mangled_name_map = {__nvqpp__mlirgen__kernel = "__nvqpp__mlirgen__kernel_PyKernelEntryPointRewrite"}} {
  func.func @__nvqpp__mlirgen__kernel() attributes {"cudaq-entrypoint"} {
    %0 = quake.alloca !quake.veq<3>
    %1 = quake.extract_ref %0[0] : (!quake.veq<3>) -> !quake.ref
    quake.x %1 : (!quake.ref) -> ()
    %2 = quake.extract_ref %0[1] : (!quake.veq<3>) -> !quake.ref
    quake.x %2 : (!quake.ref) -> ()
    %3 = quake.extract_ref %0[2] : (!quake.veq<3>) -> !quake.ref
    quake.x %3 : (!quake.ref) -> ()
    return
  }
}


// -----// IR Dump Before ExpandMeasurements (expand-measurements) ('builtin.module' operation) //----- //
module attributes {quake.mangled_name_map = {__nvqpp__mlirgen__kernel = "__nvqpp__mlirgen__kernel_PyKernelEntryPointRewrite"}} {
  func.func @__nvqpp__mlirgen__kernel() attributes {"cudaq-entrypoint"} {
    %0 = quake.alloca !quake.veq<3>
    %1 = quake.extract_ref %0[0] : (!quake.veq<3>) -> !quake.ref
    quake.x %1 : (!quake.ref) -> ()
    %2 = quake.extract_ref %0[1] : (!quake.veq<3>) -> !quake.ref
    quake.x %2 : (!quake.ref) -> ()
    %3 = quake.extract_ref %0[2] : (!quake.veq<3>) -> !quake.ref
    quake.x %3 : (!quake.ref) -> ()
    return
  }
}


// -----// IR Dump Before Canonicalizer (canonicalize) ('builtin.module' operation) //----- //
module attributes {quake.mangled_name_map = {__nvqpp__mlirgen__kernel = "__nvqpp__mlirgen__kernel_PyKernelEntryPointRewrite"}} {
  func.func @__nvqpp__mlirgen__kernel() attributes {"cudaq-entrypoint"} {
    %0 = quake.alloca !quake.veq<3>
    %1 = quake.extract_ref %0[0] : (!quake.veq<3>) -> !quake.ref
    quake.x %1 : (!quake.ref) -> ()
    %2 = quake.extract_ref %0[1] : (!quake.veq<3>) -> !quake.ref
    quake.x %2 : (!quake.ref) -> ()
    %3 = quake.extract_ref %0[2] : (!quake.veq<3>) -> !quake.ref
    quake.x %3 : (!quake.ref) -> ()
    return
  }
}


// -----// IR Dump Before MemToReg (memtoreg) ('func.func' operation: @__nvqpp__mlirgen__kernel) //----- //
module attributes {quake.mangled_name_map = {__nvqpp__mlirgen__kernel = "__nvqpp__mlirgen__kernel_PyKernelEntryPointRewrite"}} {
  func.func @__nvqpp__mlirgen__kernel() attributes {"cudaq-entrypoint"} {
    %0 = quake.alloca !quake.veq<3>
    %1 = quake.extract_ref %0[0] : (!quake.veq<3>) -> !quake.ref
    quake.x %1 : (!quake.ref) -> ()
    %2 = quake.extract_ref %0[1] : (!quake.veq<3>) -> !quake.ref
    quake.x %2 : (!quake.ref) -> ()
    %3 = quake.extract_ref %0[2] : (!quake.veq<3>) -> !quake.ref
    quake.x %3 : (!quake.ref) -> ()
    return
  }
}


// -----// IR Dump Before Canonicalizer (canonicalize) ('builtin.module' operation) //----- //
module attributes {quake.mangled_name_map = {__nvqpp__mlirgen__kernel = "__nvqpp__mlirgen__kernel_PyKernelEntryPointRewrite"}} {
  func.func @__nvqpp__mlirgen__kernel() attributes {"cudaq-entrypoint"} {
    %0 = quake.alloca !quake.veq<3>
    %1 = quake.extract_ref %0[0] : (!quake.veq<3>) -> !quake.ref
    quake.x %1 : (!quake.ref) -> ()
    %2 = quake.extract_ref %0[1] : (!quake.veq<3>) -> !quake.ref
    quake.x %2 : (!quake.ref) -> ()
    %3 = quake.extract_ref %0[2] : (!quake.veq<3>) -> !quake.ref
    quake.x %3 : (!quake.ref) -> ()
    return
  }
}


// -----// IR Dump Before LoopNormalize (cc-loop-normalize) ('builtin.module' operation) //----- //
module attributes {quake.mangled_name_map = {__nvqpp__mlirgen__kernel = "__nvqpp__mlirgen__kernel_PyKernelEntryPointRewrite"}} {
  func.func @__nvqpp__mlirgen__kernel() attributes {"cudaq-entrypoint"} {
    %0 = quake.alloca !quake.veq<3>
    %1 = quake.extract_ref %0[0] : (!quake.veq<3>) -> !quake.ref
    quake.x %1 : (!quake.ref) -> ()
    %2 = quake.extract_ref %0[1] : (!quake.veq<3>) -> !quake.ref
    quake.x %2 : (!quake.ref) -> ()
    %3 = quake.extract_ref %0[2] : (!quake.veq<3>) -> !quake.ref
    quake.x %3 : (!quake.ref) -> ()
    return
  }
}


// -----// IR Dump Before Canonicalizer (canonicalize) ('builtin.module' operation) //----- //
module attributes {quake.mangled_name_map = {__nvqpp__mlirgen__kernel = "__nvqpp__mlirgen__kernel_PyKernelEntryPointRewrite"}} {
  func.func @__nvqpp__mlirgen__kernel() attributes {"cudaq-entrypoint"} {
    %0 = quake.alloca !quake.veq<3>
    %1 = quake.extract_ref %0[0] : (!quake.veq<3>) -> !quake.ref
    quake.x %1 : (!quake.ref) -> ()
    %2 = quake.extract_ref %0[1] : (!quake.veq<3>) -> !quake.ref
    quake.x %2 : (!quake.ref) -> ()
    %3 = quake.extract_ref %0[2] : (!quake.veq<3>) -> !quake.ref
    quake.x %3 : (!quake.ref) -> ()
    return
  }
}


// -----// IR Dump Before LoopUnroll (cc-loop-unroll) ('builtin.module' operation) //----- //
module attributes {quake.mangled_name_map = {__nvqpp__mlirgen__kernel = "__nvqpp__mlirgen__kernel_PyKernelEntryPointRewrite"}} {
  func.func @__nvqpp__mlirgen__kernel() attributes {"cudaq-entrypoint"} {
    %0 = quake.alloca !quake.veq<3>
    %1 = quake.extract_ref %0[0] : (!quake.veq<3>) -> !quake.ref
    quake.x %1 : (!quake.ref) -> ()
    %2 = quake.extract_ref %0[1] : (!quake.veq<3>) -> !quake.ref
    quake.x %2 : (!quake.ref) -> ()
    %3 = quake.extract_ref %0[2] : (!quake.veq<3>) -> !quake.ref
    quake.x %3 : (!quake.ref) -> ()
    return
  }
}


// -----// IR Dump Before UpdateRegisterNames (update-register-names) ('builtin.module' operation) //----- //
module attributes {quake.mangled_name_map = {__nvqpp__mlirgen__kernel = "__nvqpp__mlirgen__kernel_PyKernelEntryPointRewrite"}} {
  func.func @__nvqpp__mlirgen__kernel() attributes {"cudaq-entrypoint"} {
    %0 = quake.alloca !quake.veq<3>
    %1 = quake.extract_ref %0[0] : (!quake.veq<3>) -> !quake.ref
    quake.x %1 : (!quake.ref) -> ()
    %2 = quake.extract_ref %0[1] : (!quake.veq<3>) -> !quake.ref
    quake.x %2 : (!quake.ref) -> ()
    %3 = quake.extract_ref %0[2] : (!quake.veq<3>) -> !quake.ref
    quake.x %3 : (!quake.ref) -> ()
    return
  }
}


// -----// IR Dump Before DecompositionPass (decomposition) ('builtin.module' operation) //----- //
module attributes {quake.mangled_name_map = {__nvqpp__mlirgen__kernel = "__nvqpp__mlirgen__kernel_PyKernelEntryPointRewrite"}} {
  func.func @__nvqpp__mlirgen__kernel() attributes {"cudaq-entrypoint"} {
    %0 = quake.alloca !quake.veq<3>
    %1 = quake.extract_ref %0[0] : (!quake.veq<3>) -> !quake.ref
    quake.x %1 : (!quake.ref) -> ()
    %2 = quake.extract_ref %0[1] : (!quake.veq<3>) -> !quake.ref
    quake.x %2 : (!quake.ref) -> ()
    %3 = quake.extract_ref %0[2] : (!quake.veq<3>) -> !quake.ref
    quake.x %3 : (!quake.ref) -> ()
    return
  }
}


// -----// IR Dump Before LowerToCFG (lower-to-cfg) ('func.func' operation: @__nvqpp__mlirgen__kernel) //----- //
module attributes {quake.mangled_name_map = {__nvqpp__mlirgen__kernel = "__nvqpp__mlirgen__kernel_PyKernelEntryPointRewrite"}} {
  func.func @__nvqpp__mlirgen__kernel() attributes {"cudaq-entrypoint"} {
    %0 = quake.alloca !quake.veq<3>
    %1 = quake.extract_ref %0[0] : (!quake.veq<3>) -> !quake.ref
    quake.x %1 : (!quake.ref) -> ()
    %2 = quake.extract_ref %0[1] : (!quake.veq<3>) -> !quake.ref
    quake.x %2 : (!quake.ref) -> ()
    %3 = quake.extract_ref %0[2] : (!quake.veq<3>) -> !quake.ref
    quake.x %3 : (!quake.ref) -> ()
    return
  }
}


// -----// IR Dump Before Canonicalizer (canonicalize) ('builtin.module' operation) //----- //
module attributes {quake.mangled_name_map = {__nvqpp__mlirgen__kernel = "__nvqpp__mlirgen__kernel_PyKernelEntryPointRewrite"}} {
  func.func @__nvqpp__mlirgen__kernel() attributes {"cudaq-entrypoint"} {
    %0 = quake.alloca !quake.veq<3>
    %1 = quake.extract_ref %0[0] : (!quake.veq<3>) -> !quake.ref
    quake.x %1 : (!quake.ref) -> ()
    %2 = quake.extract_ref %0[1] : (!quake.veq<3>) -> !quake.ref
    quake.x %2 : (!quake.ref) -> ()
    %3 = quake.extract_ref %0[2] : (!quake.veq<3>) -> !quake.ref
    quake.x %3 : (!quake.ref) -> ()
    return
  }
}


// -----// IR Dump Before MultiControlDecompositionPass (multicontrol-decomposition) ('func.func' operation: @__nvqpp__mlirgen__kernel) //----- //
module attributes {quake.mangled_name_map = {__nvqpp__mlirgen__kernel = "__nvqpp__mlirgen__kernel_PyKernelEntryPointRewrite"}} {
  func.func @__nvqpp__mlirgen__kernel() attributes {"cudaq-entrypoint"} {
    %0 = quake.alloca !quake.veq<3>
    %1 = quake.extract_ref %0[0] : (!quake.veq<3>) -> !quake.ref
    quake.x %1 : (!quake.ref) -> ()
    %2 = quake.extract_ref %0[1] : (!quake.veq<3>) -> !quake.ref
    quake.x %2 : (!quake.ref) -> ()
    %3 = quake.extract_ref %0[2] : (!quake.veq<3>) -> !quake.ref
    quake.x %3 : (!quake.ref) -> ()
    return
  }
}


// -----// IR Dump Before BasisConversionPass (basis-conversion) ('builtin.module' operation) //----- //
module attributes {quake.mangled_name_map = {__nvqpp__mlirgen__kernel = "__nvqpp__mlirgen__kernel_PyKernelEntryPointRewrite"}} {
  func.func @__nvqpp__mlirgen__kernel() attributes {"cudaq-entrypoint"} {
    %0 = quake.alloca !quake.veq<3>
    %1 = quake.extract_ref %0[0] : (!quake.veq<3>) -> !quake.ref
    quake.x %1 : (!quake.ref) -> ()
    %2 = quake.extract_ref %0[1] : (!quake.veq<3>) -> !quake.ref
    quake.x %2 : (!quake.ref) -> ()
    %3 = quake.extract_ref %0[2] : (!quake.veq<3>) -> !quake.ref
    quake.x %3 : (!quake.ref) -> ()
    return
  }
}


// -----// IR Dump Before ApplyControlNegations (apply-control-negations) ('func.func' operation: @__nvqpp__mlirgen__kernel) //----- //
module attributes {quake.mangled_name_map = {__nvqpp__mlirgen__kernel = "__nvqpp__mlirgen__kernel_PyKernelEntryPointRewrite"}} {
  func.func @__nvqpp__mlirgen__kernel() attributes {"cudaq-entrypoint"} {
    %0 = quake.alloca !quake.veq<3>
    %1 = quake.extract_ref %0[0] : (!quake.veq<3>) -> !quake.ref
    quake.x %1 : (!quake.ref) -> ()
    %2 = quake.extract_ref %0[1] : (!quake.veq<3>) -> !quake.ref
    quake.x %2 : (!quake.ref) -> ()
    %3 = quake.extract_ref %0[2] : (!quake.veq<3>) -> !quake.ref
    quake.x %3 : (!quake.ref) -> ()
    return
  }
}


// -----// IR Dump Before ConvertToDirectCalls (indirect-to-direct-calls) ('builtin.module' operation) //----- //
module attributes {quake.mangled_name_map = {__nvqpp__mlirgen__kernel = "__nvqpp__mlirgen__kernel_PyKernelEntryPointRewrite"}} {
  func.func @__nvqpp__mlirgen__kernel() attributes {"cudaq-entrypoint"} {
    %0 = quake.alloca !quake.veq<3>
    %1 = quake.extract_ref %0[0] : (!quake.veq<3>) -> !quake.ref
    quake.x %1 : (!quake.ref) -> ()
    %2 = quake.extract_ref %0[1] : (!quake.veq<3>) -> !quake.ref
    quake.x %2 : (!quake.ref) -> ()
    %3 = quake.extract_ref %0[2] : (!quake.veq<3>) -> !quake.ref
    quake.x %3 : (!quake.ref) -> ()
    return
  }
}


// -----// IR Dump Before Inliner (inline) ('builtin.module' operation) //----- //
module attributes {quake.mangled_name_map = {__nvqpp__mlirgen__kernel = "__nvqpp__mlirgen__kernel_PyKernelEntryPointRewrite"}} {
  func.func @__nvqpp__mlirgen__kernel() attributes {"cudaq-entrypoint"} {
    %0 = quake.alloca !quake.veq<3>
    %1 = quake.extract_ref %0[0] : (!quake.veq<3>) -> !quake.ref
    quake.x %1 : (!quake.ref) -> ()
    %2 = quake.extract_ref %0[1] : (!quake.veq<3>) -> !quake.ref
    quake.x %2 : (!quake.ref) -> ()
    %3 = quake.extract_ref %0[2] : (!quake.veq<3>) -> !quake.ref
    quake.x %3 : (!quake.ref) -> ()
    return
  }
}


// -----// IR Dump Before Canonicalizer (canonicalize) ('func.func' operation: @__nvqpp__mlirgen__kernel) //----- //
module attributes {quake.mangled_name_map = {__nvqpp__mlirgen__kernel = "__nvqpp__mlirgen__kernel_PyKernelEntryPointRewrite"}} {
  func.func @__nvqpp__mlirgen__kernel() attributes {"cudaq-entrypoint"} {
    %0 = quake.alloca !quake.veq<3>
    %1 = quake.extract_ref %0[0] : (!quake.veq<3>) -> !quake.ref
    quake.x %1 : (!quake.ref) -> ()
    %2 = quake.extract_ref %0[1] : (!quake.veq<3>) -> !quake.ref
    quake.x %2 : (!quake.ref) -> ()
    %3 = quake.extract_ref %0[2] : (!quake.veq<3>) -> !quake.ref
    quake.x %3 : (!quake.ref) -> ()
    return
  }
}


// -----// IR Dump Before CheckKernelCalls (check-kernel-calls) ('func.func' operation: @__nvqpp__mlirgen__kernel) //----- //
module attributes {quake.mangled_name_map = {__nvqpp__mlirgen__kernel = "__nvqpp__mlirgen__kernel_PyKernelEntryPointRewrite"}} {
  func.func @__nvqpp__mlirgen__kernel() attributes {"cudaq-entrypoint"} {
    %0 = quake.alloca !quake.veq<3>
    %1 = quake.extract_ref %0[0] : (!quake.veq<3>) -> !quake.ref
    quake.x %1 : (!quake.ref) -> ()
    %2 = quake.extract_ref %0[1] : (!quake.veq<3>) -> !quake.ref
    quake.x %2 : (!quake.ref) -> ()
    %3 = quake.extract_ref %0[2] : (!quake.veq<3>) -> !quake.ref
    quake.x %3 : (!quake.ref) -> ()
    return
  }
}


// -----// IR Dump Before Canonicalizer (canonicalize) ('builtin.module' operation) //----- //
module attributes {quake.mangled_name_map = {__nvqpp__mlirgen__kernel = "__nvqpp__mlirgen__kernel_PyKernelEntryPointRewrite"}} {
  func.func @__nvqpp__mlirgen__kernel() attributes {"cudaq-entrypoint"} {
    %0 = quake.alloca !quake.veq<3>
    %1 = quake.extract_ref %0[0] : (!quake.veq<3>) -> !quake.ref
    quake.x %1 : (!quake.ref) -> ()
    %2 = quake.extract_ref %0[1] : (!quake.veq<3>) -> !quake.ref
    quake.x %2 : (!quake.ref) -> ()
    %3 = quake.extract_ref %0[2] : (!quake.veq<3>) -> !quake.ref
    quake.x %3 : (!quake.ref) -> ()
    return
  }
}


// -----// IR Dump Before UnwindLowering (unwind-lowering) ('func.func' operation: @__nvqpp__mlirgen__kernel) //----- //
module attributes {quake.mangled_name_map = {__nvqpp__mlirgen__kernel = "__nvqpp__mlirgen__kernel_PyKernelEntryPointRewrite"}} {
  func.func @__nvqpp__mlirgen__kernel() attributes {"cudaq-entrypoint"} {
    %0 = quake.alloca !quake.veq<3>
    %1 = quake.extract_ref %0[0] : (!quake.veq<3>) -> !quake.ref
    quake.x %1 : (!quake.ref) -> ()
    %2 = quake.extract_ref %0[1] : (!quake.veq<3>) -> !quake.ref
    quake.x %2 : (!quake.ref) -> ()
    %3 = quake.extract_ref %0[2] : (!quake.veq<3>) -> !quake.ref
    quake.x %3 : (!quake.ref) -> ()
    return
  }
}


// -----// IR Dump Before Canonicalizer (canonicalize) ('builtin.module' operation) //----- //
module attributes {quake.mangled_name_map = {__nvqpp__mlirgen__kernel = "__nvqpp__mlirgen__kernel_PyKernelEntryPointRewrite"}} {
  func.func @__nvqpp__mlirgen__kernel() attributes {"cudaq-entrypoint"} {
    %0 = quake.alloca !quake.veq<3>
    %1 = quake.extract_ref %0[0] : (!quake.veq<3>) -> !quake.ref
    quake.x %1 : (!quake.ref) -> ()
    %2 = quake.extract_ref %0[1] : (!quake.veq<3>) -> !quake.ref
    quake.x %2 : (!quake.ref) -> ()
    %3 = quake.extract_ref %0[2] : (!quake.veq<3>) -> !quake.ref
    quake.x %3 : (!quake.ref) -> ()
    return
  }
}


// -----// IR Dump Before ApplySpecialization (apply-op-specialization) ('builtin.module' operation) //----- //
module attributes {quake.mangled_name_map = {__nvqpp__mlirgen__kernel = "__nvqpp__mlirgen__kernel_PyKernelEntryPointRewrite"}} {
  func.func @__nvqpp__mlirgen__kernel() attributes {"cudaq-entrypoint"} {
    %0 = quake.alloca !quake.veq<3>
    %1 = quake.extract_ref %0[0] : (!quake.veq<3>) -> !quake.ref
    quake.x %1 : (!quake.ref) -> ()
    %2 = quake.extract_ref %0[1] : (!quake.veq<3>) -> !quake.ref
    quake.x %2 : (!quake.ref) -> ()
    %3 = quake.extract_ref %0[2] : (!quake.veq<3>) -> !quake.ref
    quake.x %3 : (!quake.ref) -> ()
    return
  }
}


// -----// IR Dump Before ExpandMeasurements (expand-measurements) ('builtin.module' operation) //----- //
module attributes {quake.mangled_name_map = {__nvqpp__mlirgen__kernel = "__nvqpp__mlirgen__kernel_PyKernelEntryPointRewrite"}} {
  func.func @__nvqpp__mlirgen__kernel() attributes {"cudaq-entrypoint"} {
    %0 = quake.alloca !quake.veq<3>
    %1 = quake.extract_ref %0[0] : (!quake.veq<3>) -> !quake.ref
    quake.x %1 : (!quake.ref) -> ()
    %2 = quake.extract_ref %0[1] : (!quake.veq<3>) -> !quake.ref
    quake.x %2 : (!quake.ref) -> ()
    %3 = quake.extract_ref %0[2] : (!quake.veq<3>) -> !quake.ref
    quake.x %3 : (!quake.ref) -> ()
    return
  }
}


// -----// IR Dump Before MemToReg (memtoreg) ('func.func' operation: @__nvqpp__mlirgen__kernel) //----- //
module attributes {quake.mangled_name_map = {__nvqpp__mlirgen__kernel = "__nvqpp__mlirgen__kernel_PyKernelEntryPointRewrite"}} {
  func.func @__nvqpp__mlirgen__kernel() attributes {"cudaq-entrypoint"} {
    %0 = quake.alloca !quake.veq<3>
    %1 = quake.extract_ref %0[0] : (!quake.veq<3>) -> !quake.ref
    quake.x %1 : (!quake.ref) -> ()
    %2 = quake.extract_ref %0[1] : (!quake.veq<3>) -> !quake.ref
    quake.x %2 : (!quake.ref) -> ()
    %3 = quake.extract_ref %0[2] : (!quake.veq<3>) -> !quake.ref
    quake.x %3 : (!quake.ref) -> ()
    return
  }
}


// -----// IR Dump Before Canonicalizer (canonicalize) ('builtin.module' operation) //----- //
module attributes {quake.mangled_name_map = {__nvqpp__mlirgen__kernel = "__nvqpp__mlirgen__kernel_PyKernelEntryPointRewrite"}} {
  func.func @__nvqpp__mlirgen__kernel() attributes {"cudaq-entrypoint"} {
    %0 = quake.alloca !quake.veq<3>
    %1 = quake.extract_ref %0[0] : (!quake.veq<3>) -> !quake.ref
    quake.x %1 : (!quake.ref) -> ()
    %2 = quake.extract_ref %0[1] : (!quake.veq<3>) -> !quake.ref
    quake.x %2 : (!quake.ref) -> ()
    %3 = quake.extract_ref %0[2] : (!quake.veq<3>) -> !quake.ref
    quake.x %3 : (!quake.ref) -> ()
    return
  }
}


// -----// IR Dump Before CSE (cse) ('builtin.module' operation) //----- //
module attributes {quake.mangled_name_map = {__nvqpp__mlirgen__kernel = "__nvqpp__mlirgen__kernel_PyKernelEntryPointRewrite"}} {
  func.func @__nvqpp__mlirgen__kernel() attributes {"cudaq-entrypoint"} {
    %0 = quake.alloca !quake.veq<3>
    %1 = quake.extract_ref %0[0] : (!quake.veq<3>) -> !quake.ref
    quake.x %1 : (!quake.ref) -> ()
    %2 = quake.extract_ref %0[1] : (!quake.veq<3>) -> !quake.ref
    quake.x %2 : (!quake.ref) -> ()
    %3 = quake.extract_ref %0[2] : (!quake.veq<3>) -> !quake.ref
    quake.x %3 : (!quake.ref) -> ()
    return
  }
}


// -----// IR Dump Before QuakeAddDeallocs (add-dealloc) ('func.func' operation: @__nvqpp__mlirgen__kernel) //----- //
module attributes {quake.mangled_name_map = {__nvqpp__mlirgen__kernel = "__nvqpp__mlirgen__kernel_PyKernelEntryPointRewrite"}} {
  func.func @__nvqpp__mlirgen__kernel() attributes {"cudaq-entrypoint"} {
    %0 = quake.alloca !quake.veq<3>
    %1 = quake.extract_ref %0[0] : (!quake.veq<3>) -> !quake.ref
    quake.x %1 : (!quake.ref) -> ()
    %2 = quake.extract_ref %0[1] : (!quake.veq<3>) -> !quake.ref
    quake.x %2 : (!quake.ref) -> ()
    %3 = quake.extract_ref %0[2] : (!quake.veq<3>) -> !quake.ref
    quake.x %3 : (!quake.ref) -> ()
    return
  }
}


// -----// IR Dump After QuakeAddDeallocs (add-dealloc) ('func.func' operation: @__nvqpp__mlirgen__kernel) //----- //
module attributes {quake.mangled_name_map = {__nvqpp__mlirgen__kernel = "__nvqpp__mlirgen__kernel_PyKernelEntryPointRewrite"}} {
  func.func @__nvqpp__mlirgen__kernel() attributes {"cudaq-entrypoint"} {
    %0 = quake.alloca !quake.veq<3>
    %1 = quake.extract_ref %0[0] : (!quake.veq<3>) -> !quake.ref
    quake.x %1 : (!quake.ref) -> ()
    %2 = quake.extract_ref %0[1] : (!quake.veq<3>) -> !quake.ref
    quake.x %2 : (!quake.ref) -> ()
    %3 = quake.extract_ref %0[2] : (!quake.veq<3>) -> !quake.ref
    quake.x %3 : (!quake.ref) -> ()
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    quake.dealloc %0 : !quake.veq<3>
    return
  }
}


// -----// IR Dump Before QuakeAddMetadata (quake-add-metadata) ('func.func' operation: @__nvqpp__mlirgen__kernel) //----- //
module attributes {quake.mangled_name_map = {__nvqpp__mlirgen__kernel = "__nvqpp__mlirgen__kernel_PyKernelEntryPointRewrite"}} {
  func.func @__nvqpp__mlirgen__kernel() attributes {"cudaq-entrypoint"} {
    %0 = quake.alloca !quake.veq<3>
    %1 = quake.extract_ref %0[0] : (!quake.veq<3>) -> !quake.ref
    quake.x %1 : (!quake.ref) -> ()
    %2 = quake.extract_ref %0[1] : (!quake.veq<3>) -> !quake.ref
    quake.x %2 : (!quake.ref) -> ()
    %3 = quake.extract_ref %0[2] : (!quake.veq<3>) -> !quake.ref
    quake.x %3 : (!quake.ref) -> ()
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    quake.dealloc %0 : !quake.veq<3>
    return
  }
}


// -----// IR Dump Before LoopNormalize (cc-loop-normalize) ('builtin.module' operation) //----- //
module attributes {quake.mangled_name_map = {__nvqpp__mlirgen__kernel = "__nvqpp__mlirgen__kernel_PyKernelEntryPointRewrite"}} {
  func.func @__nvqpp__mlirgen__kernel() attributes {"cudaq-entrypoint"} {
    %0 = quake.alloca !quake.veq<3>
    %1 = quake.extract_ref %0[0] : (!quake.veq<3>) -> !quake.ref
    quake.x %1 : (!quake.ref) -> ()
    %2 = quake.extract_ref %0[1] : (!quake.veq<3>) -> !quake.ref
    quake.x %2 : (!quake.ref) -> ()
    %3 = quake.extract_ref %0[2] : (!quake.veq<3>) -> !quake.ref
    quake.x %3 : (!quake.ref) -> ()
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    quake.dealloc %0 : !quake.veq<3>
    return
  }
}


// -----// IR Dump Before LoopUnroll (cc-loop-unroll) ('builtin.module' operation) //----- //
module attributes {quake.mangled_name_map = {__nvqpp__mlirgen__kernel = "__nvqpp__mlirgen__kernel_PyKernelEntryPointRewrite"}} {
  func.func @__nvqpp__mlirgen__kernel() attributes {"cudaq-entrypoint"} {
    %0 = quake.alloca !quake.veq<3>
    %1 = quake.extract_ref %0[0] : (!quake.veq<3>) -> !quake.ref
    quake.x %1 : (!quake.ref) -> ()
    %2 = quake.extract_ref %0[1] : (!quake.veq<3>) -> !quake.ref
    quake.x %2 : (!quake.ref) -> ()
    %3 = quake.extract_ref %0[2] : (!quake.veq<3>) -> !quake.ref
    quake.x %3 : (!quake.ref) -> ()
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    quake.dealloc %0 : !quake.veq<3>
    return
  }
}


// -----// IR Dump Before Canonicalizer (canonicalize) ('builtin.module' operation) //----- //
module attributes {quake.mangled_name_map = {__nvqpp__mlirgen__kernel = "__nvqpp__mlirgen__kernel_PyKernelEntryPointRewrite"}} {
  func.func @__nvqpp__mlirgen__kernel() attributes {"cudaq-entrypoint"} {
    %0 = quake.alloca !quake.veq<3>
    %1 = quake.extract_ref %0[0] : (!quake.veq<3>) -> !quake.ref
    quake.x %1 : (!quake.ref) -> ()
    %2 = quake.extract_ref %0[1] : (!quake.veq<3>) -> !quake.ref
    quake.x %2 : (!quake.ref) -> ()
    %3 = quake.extract_ref %0[2] : (!quake.veq<3>) -> !quake.ref
    quake.x %3 : (!quake.ref) -> ()
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    quake.dealloc %0 : !quake.veq<3>
    return
  }
}


// -----// IR Dump After Canonicalizer (canonicalize) ('builtin.module' operation) //----- //
module attributes {quake.mangled_name_map = {__nvqpp__mlirgen__kernel = "__nvqpp__mlirgen__kernel_PyKernelEntryPointRewrite"}} {
  func.func @__nvqpp__mlirgen__kernel() attributes {"cudaq-entrypoint"} {
    %0 = quake.alloca !quake.veq<3>
    %1 = quake.extract_ref %0[0] : (!quake.veq<3>) -> !quake.ref
    quake.x %1 : (!quake.ref) -> ()
    %2 = quake.extract_ref %0[1] : (!quake.veq<3>) -> !quake.ref
    quake.x %2 : (!quake.ref) -> ()
    %3 = quake.extract_ref %0[2] : (!quake.veq<3>) -> !quake.ref
    quake.x %3 : (!quake.ref) -> ()
    quake.dealloc %0 : !quake.veq<3>
    return
  }
}


// -----// IR Dump Before CSE (cse) ('builtin.module' operation) //----- //
module attributes {quake.mangled_name_map = {__nvqpp__mlirgen__kernel = "__nvqpp__mlirgen__kernel_PyKernelEntryPointRewrite"}} {
  func.func @__nvqpp__mlirgen__kernel() attributes {"cudaq-entrypoint"} {
    %0 = quake.alloca !quake.veq<3>
    %1 = quake.extract_ref %0[0] : (!quake.veq<3>) -> !quake.ref
    quake.x %1 : (!quake.ref) -> ()
    %2 = quake.extract_ref %0[1] : (!quake.veq<3>) -> !quake.ref
    quake.x %2 : (!quake.ref) -> ()
    %3 = quake.extract_ref %0[2] : (!quake.veq<3>) -> !quake.ref
    quake.x %3 : (!quake.ref) -> ()
    quake.dealloc %0 : !quake.veq<3>
    return
  }
}


// -----// IR Dump Before LowerToCFG (lower-to-cfg) ('func.func' operation: @__nvqpp__mlirgen__kernel) //----- //
module attributes {quake.mangled_name_map = {__nvqpp__mlirgen__kernel = "__nvqpp__mlirgen__kernel_PyKernelEntryPointRewrite"}} {
  func.func @__nvqpp__mlirgen__kernel() attributes {"cudaq-entrypoint"} {
    %0 = quake.alloca !quake.veq<3>
    %1 = quake.extract_ref %0[0] : (!quake.veq<3>) -> !quake.ref
    quake.x %1 : (!quake.ref) -> ()
    %2 = quake.extract_ref %0[1] : (!quake.veq<3>) -> !quake.ref
    quake.x %2 : (!quake.ref) -> ()
    %3 = quake.extract_ref %0[2] : (!quake.veq<3>) -> !quake.ref
    quake.x %3 : (!quake.ref) -> ()
    quake.dealloc %0 : !quake.veq<3>
    return
  }
}


// -----// IR Dump Before CombineQuantumAllocations (combine-quantum-alloc) ('func.func' operation: @__nvqpp__mlirgen__kernel) //----- //
module attributes {quake.mangled_name_map = {__nvqpp__mlirgen__kernel = "__nvqpp__mlirgen__kernel_PyKernelEntryPointRewrite"}} {
  func.func @__nvqpp__mlirgen__kernel() attributes {"cudaq-entrypoint"} {
    %0 = quake.alloca !quake.veq<3>
    %1 = quake.extract_ref %0[0] : (!quake.veq<3>) -> !quake.ref
    quake.x %1 : (!quake.ref) -> ()
    %2 = quake.extract_ref %0[1] : (!quake.veq<3>) -> !quake.ref
    quake.x %2 : (!quake.ref) -> ()
    %3 = quake.extract_ref %0[2] : (!quake.veq<3>) -> !quake.ref
    quake.x %3 : (!quake.ref) -> ()
    quake.dealloc %0 : !quake.veq<3>
    return
  }
}


// -----// IR Dump After CombineQuantumAllocations (combine-quantum-alloc) ('func.func' operation: @__nvqpp__mlirgen__kernel) //----- //
module attributes {quake.mangled_name_map = {__nvqpp__mlirgen__kernel = "__nvqpp__mlirgen__kernel_PyKernelEntryPointRewrite"}} {
  func.func @__nvqpp__mlirgen__kernel() attributes {"cudaq-entrypoint"} {
    %c0_i64 = arith.constant 0 : i64
    %c2_i64 = arith.constant 2 : i64
    %c1_i64 = arith.constant 1 : i64
    %0 = quake.alloca !quake.veq<3>
    %1 = quake.subveq %0, %c0_i64, %c2_i64 : (!quake.veq<3>, i64, i64) -> !quake.veq<3>
    %2 = quake.extract_ref %0[%c0_i64] : (!quake.veq<3>, i64) -> !quake.ref
    quake.x %2 : (!quake.ref) -> ()
    %3 = quake.extract_ref %0[%c1_i64] : (!quake.veq<3>, i64) -> !quake.ref
    quake.x %3 : (!quake.ref) -> ()
    %4 = quake.extract_ref %0[%c2_i64] : (!quake.veq<3>, i64) -> !quake.ref
    quake.x %4 : (!quake.ref) -> ()
    quake.dealloc %0 : !quake.veq<3>
    return
  }
}


// -----// IR Dump Before Canonicalizer (canonicalize) ('builtin.module' operation) //----- //
module attributes {quake.mangled_name_map = {__nvqpp__mlirgen__kernel = "__nvqpp__mlirgen__kernel_PyKernelEntryPointRewrite"}} {
  func.func @__nvqpp__mlirgen__kernel() attributes {"cudaq-entrypoint"} {
    %c0_i64 = arith.constant 0 : i64
    %c2_i64 = arith.constant 2 : i64
    %c1_i64 = arith.constant 1 : i64
    %0 = quake.alloca !quake.veq<3>
    %1 = quake.subveq %0, %c0_i64, %c2_i64 : (!quake.veq<3>, i64, i64) -> !quake.veq<3>
    %2 = quake.extract_ref %0[%c0_i64] : (!quake.veq<3>, i64) -> !quake.ref
    quake.x %2 : (!quake.ref) -> ()
    %3 = quake.extract_ref %0[%c1_i64] : (!quake.veq<3>, i64) -> !quake.ref
    quake.x %3 : (!quake.ref) -> ()
    %4 = quake.extract_ref %0[%c2_i64] : (!quake.veq<3>, i64) -> !quake.ref
    quake.x %4 : (!quake.ref) -> ()
    quake.dealloc %0 : !quake.veq<3>
    return
  }
}


// -----// IR Dump After Canonicalizer (canonicalize) ('builtin.module' operation) //----- //
module attributes {quake.mangled_name_map = {__nvqpp__mlirgen__kernel = "__nvqpp__mlirgen__kernel_PyKernelEntryPointRewrite"}} {
  func.func @__nvqpp__mlirgen__kernel() attributes {"cudaq-entrypoint"} {
    %0 = quake.alloca !quake.veq<3>
    %1 = quake.extract_ref %0[0] : (!quake.veq<3>) -> !quake.ref
    quake.x %1 : (!quake.ref) -> ()
    %2 = quake.extract_ref %0[1] : (!quake.veq<3>) -> !quake.ref
    quake.x %2 : (!quake.ref) -> ()
    %3 = quake.extract_ref %0[2] : (!quake.veq<3>) -> !quake.ref
    quake.x %3 : (!quake.ref) -> ()
    quake.dealloc %0 : !quake.veq<3>
    return
  }
}


// -----// IR Dump Before CSE (cse) ('builtin.module' operation) //----- //
module attributes {quake.mangled_name_map = {__nvqpp__mlirgen__kernel = "__nvqpp__mlirgen__kernel_PyKernelEntryPointRewrite"}} {
  func.func @__nvqpp__mlirgen__kernel() attributes {"cudaq-entrypoint"} {
    %0 = quake.alloca !quake.veq<3>
    %1 = quake.extract_ref %0[0] : (!quake.veq<3>) -> !quake.ref
    quake.x %1 : (!quake.ref) -> ()
    %2 = quake.extract_ref %0[1] : (!quake.veq<3>) -> !quake.ref
    quake.x %2 : (!quake.ref) -> ()
    %3 = quake.extract_ref %0[2] : (!quake.veq<3>) -> !quake.ref
    quake.x %3 : (!quake.ref) -> ()
    quake.dealloc %0 : !quake.veq<3>
    return
  }
}


// -----// IR Dump Before DelayMeasurements (delay-measurements) ('func.func' operation: @__nvqpp__mlirgen__kernel) //----- //
module attributes {quake.mangled_name_map = {__nvqpp__mlirgen__kernel = "__nvqpp__mlirgen__kernel_PyKernelEntryPointRewrite"}} {
  func.func @__nvqpp__mlirgen__kernel() attributes {"cudaq-entrypoint"} {
    %0 = quake.alloca !quake.veq<3>
    %1 = quake.extract_ref %0[0] : (!quake.veq<3>) -> !quake.ref
    quake.x %1 : (!quake.ref) -> ()
    %2 = quake.extract_ref %0[1] : (!quake.veq<3>) -> !quake.ref
    quake.x %2 : (!quake.ref) -> ()
    %3 = quake.extract_ref %0[2] : (!quake.veq<3>) -> !quake.ref
    quake.x %3 : (!quake.ref) -> ()
    quake.dealloc %0 : !quake.veq<3>
    return
  }
}


// -----// IR Dump Before ConvertMathToFuncs (convert-math-to-funcs) ('builtin.module' operation) //----- //
module attributes {quake.mangled_name_map = {__nvqpp__mlirgen__kernel = "__nvqpp__mlirgen__kernel_PyKernelEntryPointRewrite"}} {
  func.func @__nvqpp__mlirgen__kernel() attributes {"cudaq-entrypoint"} {
    %0 = quake.alloca !quake.veq<3>
    %1 = quake.extract_ref %0[0] : (!quake.veq<3>) -> !quake.ref
    quake.x %1 : (!quake.ref) -> ()
    %2 = quake.extract_ref %0[1] : (!quake.veq<3>) -> !quake.ref
    quake.x %2 : (!quake.ref) -> ()
    %3 = quake.extract_ref %0[2] : (!quake.veq<3>) -> !quake.ref
    quake.x %3 : (!quake.ref) -> ()
    quake.dealloc %0 : !quake.veq<3>
    return
  }
}


// -----// IR Dump Before SymbolDCE (symbol-dce) ('builtin.module' operation) //----- //
module attributes {quake.mangled_name_map = {__nvqpp__mlirgen__kernel = "__nvqpp__mlirgen__kernel_PyKernelEntryPointRewrite"}} {
  func.func @__nvqpp__mlirgen__kernel() attributes {"cudaq-entrypoint"} {
    %0 = quake.alloca !quake.veq<3>
    %1 = quake.extract_ref %0[0] : (!quake.veq<3>) -> !quake.ref
    quake.x %1 : (!quake.ref) -> ()
    %2 = quake.extract_ref %0[1] : (!quake.veq<3>) -> !quake.ref
    quake.x %2 : (!quake.ref) -> ()
    %3 = quake.extract_ref %0[2] : (!quake.veq<3>) -> !quake.ref
    quake.x %3 : (!quake.ref) -> ()
    quake.dealloc %0 : !quake.veq<3>
    return
  }
}


// -----// IR Dump Before ConvertToQIR (quake-to-qir) ('builtin.module' operation) //----- //
module attributes {quake.mangled_name_map = {__nvqpp__mlirgen__kernel = "__nvqpp__mlirgen__kernel_PyKernelEntryPointRewrite"}} {
  func.func @__nvqpp__mlirgen__kernel() attributes {"cudaq-entrypoint"} {
    %0 = quake.alloca !quake.veq<3>
    %1 = quake.extract_ref %0[0] : (!quake.veq<3>) -> !quake.ref
    quake.x %1 : (!quake.ref) -> ()
    %2 = quake.extract_ref %0[1] : (!quake.veq<3>) -> !quake.ref
    quake.x %2 : (!quake.ref) -> ()
    %3 = quake.extract_ref %0[2] : (!quake.veq<3>) -> !quake.ref
    quake.x %3 : (!quake.ref) -> ()
    quake.dealloc %0 : !quake.veq<3>
    return
  }
}


// -----// IR Dump After ConvertToQIR (quake-to-qir) ('builtin.module' operation) //----- //
module attributes {quake.mangled_name_map = {__nvqpp__mlirgen__kernel = "__nvqpp__mlirgen__kernel_PyKernelEntryPointRewrite"}} {
  llvm.func @__quantum__rt__qubit_release_array(!llvm.ptr<struct<"Array", opaque>>)
  llvm.func @__quantum__qis__x(!llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__rt__array_get_element_ptr_1d(!llvm.ptr<struct<"Array", opaque>>, i64) -> !llvm.ptr<i8>
  llvm.func @__quantum__rt__qubit_allocate_array(i64) -> !llvm.ptr<struct<"Array", opaque>>
  llvm.func @__nvqpp__mlirgen__kernel() attributes {"cudaq-entrypoint"} {
    %0 = llvm.mlir.constant(3 : i64) : i64
    %1 = llvm.call @__quantum__rt__qubit_allocate_array(%0) : (i64) -> !llvm.ptr<struct<"Array", opaque>>
    %2 = llvm.mlir.constant(0 : i64) : i64
    %3 = llvm.call @__quantum__rt__array_get_element_ptr_1d(%1, %2) : (!llvm.ptr<struct<"Array", opaque>>, i64) -> !llvm.ptr<i8>
    %4 = llvm.bitcast %3 : !llvm.ptr<i8> to !llvm.ptr<ptr<struct<"Qubit", opaque>>>
    %5 = llvm.load %4 : !llvm.ptr<ptr<struct<"Qubit", opaque>>>
    llvm.call @__quantum__qis__x(%5) : (!llvm.ptr<struct<"Qubit", opaque>>) -> ()
    %6 = llvm.mlir.constant(1 : i64) : i64
    %7 = llvm.call @__quantum__rt__array_get_element_ptr_1d(%1, %6) : (!llvm.ptr<struct<"Array", opaque>>, i64) -> !llvm.ptr<i8>
    %8 = llvm.bitcast %7 : !llvm.ptr<i8> to !llvm.ptr<ptr<struct<"Qubit", opaque>>>
    %9 = llvm.load %8 : !llvm.ptr<ptr<struct<"Qubit", opaque>>>
    llvm.call @__quantum__qis__x(%9) : (!llvm.ptr<struct<"Qubit", opaque>>) -> ()
    %10 = llvm.mlir.constant(2 : i64) : i64
    %11 = llvm.call @__quantum__rt__array_get_element_ptr_1d(%1, %10) : (!llvm.ptr<struct<"Array", opaque>>, i64) -> !llvm.ptr<i8>
    %12 = llvm.bitcast %11 : !llvm.ptr<i8> to !llvm.ptr<ptr<struct<"Qubit", opaque>>>
    %13 = llvm.load %12 : !llvm.ptr<ptr<struct<"Qubit", opaque>>>
    llvm.call @__quantum__qis__x(%13) : (!llvm.ptr<struct<"Qubit", opaque>>) -> ()
    llvm.call @__quantum__rt__qubit_release_array(%1) : (!llvm.ptr<struct<"Array", opaque>>) -> ()
    llvm.return
  }
}


// -----// IR Dump Before QIRToQIRProfilePrep (qir-profile-prep) ('builtin.module' operation) //----- //
module attributes {quake.mangled_name_map = {__nvqpp__mlirgen__kernel = "__nvqpp__mlirgen__kernel_PyKernelEntryPointRewrite"}} {
  llvm.func @__quantum__rt__qubit_release_array(!llvm.ptr<struct<"Array", opaque>>)
  llvm.func @__quantum__qis__x(!llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__rt__array_get_element_ptr_1d(!llvm.ptr<struct<"Array", opaque>>, i64) -> !llvm.ptr<i8>
  llvm.func @__quantum__rt__qubit_allocate_array(i64) -> !llvm.ptr<struct<"Array", opaque>>
  llvm.func @__nvqpp__mlirgen__kernel() attributes {"cudaq-entrypoint"} {
    %0 = llvm.mlir.constant(3 : i64) : i64
    %1 = llvm.call @__quantum__rt__qubit_allocate_array(%0) : (i64) -> !llvm.ptr<struct<"Array", opaque>>
    %2 = llvm.mlir.constant(0 : i64) : i64
    %3 = llvm.call @__quantum__rt__array_get_element_ptr_1d(%1, %2) : (!llvm.ptr<struct<"Array", opaque>>, i64) -> !llvm.ptr<i8>
    %4 = llvm.bitcast %3 : !llvm.ptr<i8> to !llvm.ptr<ptr<struct<"Qubit", opaque>>>
    %5 = llvm.load %4 : !llvm.ptr<ptr<struct<"Qubit", opaque>>>
    llvm.call @__quantum__qis__x(%5) : (!llvm.ptr<struct<"Qubit", opaque>>) -> ()
    %6 = llvm.mlir.constant(1 : i64) : i64
    %7 = llvm.call @__quantum__rt__array_get_element_ptr_1d(%1, %6) : (!llvm.ptr<struct<"Array", opaque>>, i64) -> !llvm.ptr<i8>
    %8 = llvm.bitcast %7 : !llvm.ptr<i8> to !llvm.ptr<ptr<struct<"Qubit", opaque>>>
    %9 = llvm.load %8 : !llvm.ptr<ptr<struct<"Qubit", opaque>>>
    llvm.call @__quantum__qis__x(%9) : (!llvm.ptr<struct<"Qubit", opaque>>) -> ()
    %10 = llvm.mlir.constant(2 : i64) : i64
    %11 = llvm.call @__quantum__rt__array_get_element_ptr_1d(%1, %10) : (!llvm.ptr<struct<"Array", opaque>>, i64) -> !llvm.ptr<i8>
    %12 = llvm.bitcast %11 : !llvm.ptr<i8> to !llvm.ptr<ptr<struct<"Qubit", opaque>>>
    %13 = llvm.load %12 : !llvm.ptr<ptr<struct<"Qubit", opaque>>>
    llvm.call @__quantum__qis__x(%13) : (!llvm.ptr<struct<"Qubit", opaque>>) -> ()
    llvm.call @__quantum__rt__qubit_release_array(%1) : (!llvm.ptr<struct<"Array", opaque>>) -> ()
    llvm.return
  }
}


// -----// IR Dump After QIRToQIRProfilePrep (qir-profile-prep) ('builtin.module' operation) //----- //
module attributes {quake.mangled_name_map = {__nvqpp__mlirgen__kernel = "__nvqpp__mlirgen__kernel_PyKernelEntryPointRewrite"}} {
  llvm.func @__quantum__qis__x__body(!llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__qis__cnot__body(!llvm.ptr<struct<"Qubit", opaque>>, !llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__qis__cz__body(!llvm.ptr<struct<"Qubit", opaque>>, !llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__rt__result_record_output(!llvm.ptr<struct<"Result", opaque>>, !llvm.ptr<i8>)
  llvm.func @__quantum__qis__read_result__body(!llvm.ptr<struct<"Result", opaque>>) -> i1
  llvm.func @__quantum__qis__mz__body(!llvm.ptr<struct<"Qubit", opaque>>, !llvm.ptr<struct<"Result", opaque>>) attributes {passthrough = ["irreversible"]}
  llvm.func @__quantum__qis__cz(!llvm.ptr<struct<"Qubit", opaque>>, !llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__qis__cnot(!llvm.ptr<struct<"Qubit", opaque>>, !llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__rt__qubit_release_array(!llvm.ptr<struct<"Array", opaque>>)
  llvm.func @__quantum__qis__x(!llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__rt__array_get_element_ptr_1d(!llvm.ptr<struct<"Array", opaque>>, i64) -> !llvm.ptr<i8>
  llvm.func @__quantum__rt__qubit_allocate_array(i64) -> !llvm.ptr<struct<"Array", opaque>>
  llvm.func @__nvqpp__mlirgen__kernel() attributes {"cudaq-entrypoint"} {
    %0 = llvm.mlir.constant(3 : i64) : i64
    %1 = llvm.call @__quantum__rt__qubit_allocate_array(%0) : (i64) -> !llvm.ptr<struct<"Array", opaque>>
    %2 = llvm.mlir.constant(0 : i64) : i64
    %3 = llvm.call @__quantum__rt__array_get_element_ptr_1d(%1, %2) : (!llvm.ptr<struct<"Array", opaque>>, i64) -> !llvm.ptr<i8>
    %4 = llvm.bitcast %3 : !llvm.ptr<i8> to !llvm.ptr<ptr<struct<"Qubit", opaque>>>
    %5 = llvm.load %4 : !llvm.ptr<ptr<struct<"Qubit", opaque>>>
    llvm.call @__quantum__qis__x(%5) : (!llvm.ptr<struct<"Qubit", opaque>>) -> ()
    %6 = llvm.mlir.constant(1 : i64) : i64
    %7 = llvm.call @__quantum__rt__array_get_element_ptr_1d(%1, %6) : (!llvm.ptr<struct<"Array", opaque>>, i64) -> !llvm.ptr<i8>
    %8 = llvm.bitcast %7 : !llvm.ptr<i8> to !llvm.ptr<ptr<struct<"Qubit", opaque>>>
    %9 = llvm.load %8 : !llvm.ptr<ptr<struct<"Qubit", opaque>>>
    llvm.call @__quantum__qis__x(%9) : (!llvm.ptr<struct<"Qubit", opaque>>) -> ()
    %10 = llvm.mlir.constant(2 : i64) : i64
    %11 = llvm.call @__quantum__rt__array_get_element_ptr_1d(%1, %10) : (!llvm.ptr<struct<"Array", opaque>>, i64) -> !llvm.ptr<i8>
    %12 = llvm.bitcast %11 : !llvm.ptr<i8> to !llvm.ptr<ptr<struct<"Qubit", opaque>>>
    %13 = llvm.load %12 : !llvm.ptr<ptr<struct<"Qubit", opaque>>>
    llvm.call @__quantum__qis__x(%13) : (!llvm.ptr<struct<"Qubit", opaque>>) -> ()
    llvm.call @__quantum__rt__qubit_release_array(%1) : (!llvm.ptr<struct<"Array", opaque>>) -> ()
    llvm.return
  }
}


// -----// IR Dump Before QIRToQIRProfileFunc (quake-to-qir-func) ('llvm.func' operation: @__quantum__qis__x__body) //----- //
module attributes {quake.mangled_name_map = {__nvqpp__mlirgen__kernel = "__nvqpp__mlirgen__kernel_PyKernelEntryPointRewrite"}} {
  llvm.func @__quantum__qis__x__body(!llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__qis__cnot__body(!llvm.ptr<struct<"Qubit", opaque>>, !llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__qis__cz__body(!llvm.ptr<struct<"Qubit", opaque>>, !llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__rt__result_record_output(!llvm.ptr<struct<"Result", opaque>>, !llvm.ptr<i8>)
  llvm.func @__quantum__qis__read_result__body(!llvm.ptr<struct<"Result", opaque>>) -> i1
  llvm.func @__quantum__qis__mz__body(!llvm.ptr<struct<"Qubit", opaque>>, !llvm.ptr<struct<"Result", opaque>>) attributes {passthrough = ["irreversible"]}
  llvm.func @__quantum__qis__cz(!llvm.ptr<struct<"Qubit", opaque>>, !llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__qis__cnot(!llvm.ptr<struct<"Qubit", opaque>>, !llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__rt__qubit_release_array(!llvm.ptr<struct<"Array", opaque>>)
  llvm.func @__quantum__qis__x(!llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__rt__array_get_element_ptr_1d(!llvm.ptr<struct<"Array", opaque>>, i64) -> !llvm.ptr<i8>
  llvm.func @__quantum__rt__qubit_allocate_array(i64) -> !llvm.ptr<struct<"Array", opaque>>
  llvm.func @__nvqpp__mlirgen__kernel() attributes {"cudaq-entrypoint"} {
    %0 = llvm.mlir.constant(3 : i64) : i64
    %1 = llvm.call @__quantum__rt__qubit_allocate_array(%0) : (i64) -> !llvm.ptr<struct<"Array", opaque>>
    %2 = llvm.mlir.constant(0 : i64) : i64
    %3 = llvm.call @__quantum__rt__array_get_element_ptr_1d(%1, %2) : (!llvm.ptr<struct<"Array", opaque>>, i64) -> !llvm.ptr<i8>
    %4 = llvm.bitcast %3 : !llvm.ptr<i8> to !llvm.ptr<ptr<struct<"Qubit", opaque>>>
    %5 = llvm.load %4 : !llvm.ptr<ptr<struct<"Qubit", opaque>>>
    llvm.call @__quantum__qis__x(%5) : (!llvm.ptr<struct<"Qubit", opaque>>) -> ()
    %6 = llvm.mlir.constant(1 : i64) : i64
    %7 = llvm.call @__quantum__rt__array_get_element_ptr_1d(%1, %6) : (!llvm.ptr<struct<"Array", opaque>>, i64) -> !llvm.ptr<i8>
    %8 = llvm.bitcast %7 : !llvm.ptr<i8> to !llvm.ptr<ptr<struct<"Qubit", opaque>>>
    %9 = llvm.load %8 : !llvm.ptr<ptr<struct<"Qubit", opaque>>>
    llvm.call @__quantum__qis__x(%9) : (!llvm.ptr<struct<"Qubit", opaque>>) -> ()
    %10 = llvm.mlir.constant(2 : i64) : i64
    %11 = llvm.call @__quantum__rt__array_get_element_ptr_1d(%1, %10) : (!llvm.ptr<struct<"Array", opaque>>, i64) -> !llvm.ptr<i8>
    %12 = llvm.bitcast %11 : !llvm.ptr<i8> to !llvm.ptr<ptr<struct<"Qubit", opaque>>>
    %13 = llvm.load %12 : !llvm.ptr<ptr<struct<"Qubit", opaque>>>
    llvm.call @__quantum__qis__x(%13) : (!llvm.ptr<struct<"Qubit", opaque>>) -> ()
    llvm.call @__quantum__rt__qubit_release_array(%1) : (!llvm.ptr<struct<"Array", opaque>>) -> ()
    llvm.return
  }
}


// -----// IR Dump Before QIRToQIRProfileFunc (quake-to-qir-func) ('llvm.func' operation: @__quantum__qis__cnot__body) //----- //
module attributes {quake.mangled_name_map = {__nvqpp__mlirgen__kernel = "__nvqpp__mlirgen__kernel_PyKernelEntryPointRewrite"}} {
  llvm.func @__quantum__qis__x__body(!llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__qis__cnot__body(!llvm.ptr<struct<"Qubit", opaque>>, !llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__qis__cz__body(!llvm.ptr<struct<"Qubit", opaque>>, !llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__rt__result_record_output(!llvm.ptr<struct<"Result", opaque>>, !llvm.ptr<i8>)
  llvm.func @__quantum__qis__read_result__body(!llvm.ptr<struct<"Result", opaque>>) -> i1
  llvm.func @__quantum__qis__mz__body(!llvm.ptr<struct<"Qubit", opaque>>, !llvm.ptr<struct<"Result", opaque>>) attributes {passthrough = ["irreversible"]}
  llvm.func @__quantum__qis__cz(!llvm.ptr<struct<"Qubit", opaque>>, !llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__qis__cnot(!llvm.ptr<struct<"Qubit", opaque>>, !llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__rt__qubit_release_array(!llvm.ptr<struct<"Array", opaque>>)
  llvm.func @__quantum__qis__x(!llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__rt__array_get_element_ptr_1d(!llvm.ptr<struct<"Array", opaque>>, i64) -> !llvm.ptr<i8>
  llvm.func @__quantum__rt__qubit_allocate_array(i64) -> !llvm.ptr<struct<"Array", opaque>>
  llvm.func @__nvqpp__mlirgen__kernel() attributes {"cudaq-entrypoint"} {
    %0 = llvm.mlir.constant(3 : i64) : i64
    %1 = llvm.call @__quantum__rt__qubit_allocate_array(%0) : (i64) -> !llvm.ptr<struct<"Array", opaque>>
    %2 = llvm.mlir.constant(0 : i64) : i64
    %3 = llvm.call @__quantum__rt__array_get_element_ptr_1d(%1, %2) : (!llvm.ptr<struct<"Array", opaque>>, i64) -> !llvm.ptr<i8>
    %4 = llvm.bitcast %3 : !llvm.ptr<i8> to !llvm.ptr<ptr<struct<"Qubit", opaque>>>
    %5 = llvm.load %4 : !llvm.ptr<ptr<struct<"Qubit", opaque>>>
    llvm.call @__quantum__qis__x(%5) : (!llvm.ptr<struct<"Qubit", opaque>>) -> ()
    %6 = llvm.mlir.constant(1 : i64) : i64
    %7 = llvm.call @__quantum__rt__array_get_element_ptr_1d(%1, %6) : (!llvm.ptr<struct<"Array", opaque>>, i64) -> !llvm.ptr<i8>
    %8 = llvm.bitcast %7 : !llvm.ptr<i8> to !llvm.ptr<ptr<struct<"Qubit", opaque>>>
    %9 = llvm.load %8 : !llvm.ptr<ptr<struct<"Qubit", opaque>>>
    llvm.call @__quantum__qis__x(%9) : (!llvm.ptr<struct<"Qubit", opaque>>) -> ()
    %10 = llvm.mlir.constant(2 : i64) : i64
    %11 = llvm.call @__quantum__rt__array_get_element_ptr_1d(%1, %10) : (!llvm.ptr<struct<"Array", opaque>>, i64) -> !llvm.ptr<i8>
    %12 = llvm.bitcast %11 : !llvm.ptr<i8> to !llvm.ptr<ptr<struct<"Qubit", opaque>>>
    %13 = llvm.load %12 : !llvm.ptr<ptr<struct<"Qubit", opaque>>>
    llvm.call @__quantum__qis__x(%13) : (!llvm.ptr<struct<"Qubit", opaque>>) -> ()
    llvm.call @__quantum__rt__qubit_release_array(%1) : (!llvm.ptr<struct<"Array", opaque>>) -> ()
    llvm.return
  }
}


// -----// IR Dump Before QIRToQIRProfileFunc (quake-to-qir-func) ('llvm.func' operation: @__quantum__qis__cz__body) //----- //
module attributes {quake.mangled_name_map = {__nvqpp__mlirgen__kernel = "__nvqpp__mlirgen__kernel_PyKernelEntryPointRewrite"}} {
  llvm.func @__quantum__qis__x__body(!llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__qis__cnot__body(!llvm.ptr<struct<"Qubit", opaque>>, !llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__qis__cz__body(!llvm.ptr<struct<"Qubit", opaque>>, !llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__rt__result_record_output(!llvm.ptr<struct<"Result", opaque>>, !llvm.ptr<i8>)
  llvm.func @__quantum__qis__read_result__body(!llvm.ptr<struct<"Result", opaque>>) -> i1
  llvm.func @__quantum__qis__mz__body(!llvm.ptr<struct<"Qubit", opaque>>, !llvm.ptr<struct<"Result", opaque>>) attributes {passthrough = ["irreversible"]}
  llvm.func @__quantum__qis__cz(!llvm.ptr<struct<"Qubit", opaque>>, !llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__qis__cnot(!llvm.ptr<struct<"Qubit", opaque>>, !llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__rt__qubit_release_array(!llvm.ptr<struct<"Array", opaque>>)
  llvm.func @__quantum__qis__x(!llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__rt__array_get_element_ptr_1d(!llvm.ptr<struct<"Array", opaque>>, i64) -> !llvm.ptr<i8>
  llvm.func @__quantum__rt__qubit_allocate_array(i64) -> !llvm.ptr<struct<"Array", opaque>>
  llvm.func @__nvqpp__mlirgen__kernel() attributes {"cudaq-entrypoint"} {
    %0 = llvm.mlir.constant(3 : i64) : i64
    %1 = llvm.call @__quantum__rt__qubit_allocate_array(%0) : (i64) -> !llvm.ptr<struct<"Array", opaque>>
    %2 = llvm.mlir.constant(0 : i64) : i64
    %3 = llvm.call @__quantum__rt__array_get_element_ptr_1d(%1, %2) : (!llvm.ptr<struct<"Array", opaque>>, i64) -> !llvm.ptr<i8>
    %4 = llvm.bitcast %3 : !llvm.ptr<i8> to !llvm.ptr<ptr<struct<"Qubit", opaque>>>
    %5 = llvm.load %4 : !llvm.ptr<ptr<struct<"Qubit", opaque>>>
    llvm.call @__quantum__qis__x(%5) : (!llvm.ptr<struct<"Qubit", opaque>>) -> ()
    %6 = llvm.mlir.constant(1 : i64) : i64
    %7 = llvm.call @__quantum__rt__array_get_element_ptr_1d(%1, %6) : (!llvm.ptr<struct<"Array", opaque>>, i64) -> !llvm.ptr<i8>
    %8 = llvm.bitcast %7 : !llvm.ptr<i8> to !llvm.ptr<ptr<struct<"Qubit", opaque>>>
    %9 = llvm.load %8 : !llvm.ptr<ptr<struct<"Qubit", opaque>>>
    llvm.call @__quantum__qis__x(%9) : (!llvm.ptr<struct<"Qubit", opaque>>) -> ()
    %10 = llvm.mlir.constant(2 : i64) : i64
    %11 = llvm.call @__quantum__rt__array_get_element_ptr_1d(%1, %10) : (!llvm.ptr<struct<"Array", opaque>>, i64) -> !llvm.ptr<i8>
    %12 = llvm.bitcast %11 : !llvm.ptr<i8> to !llvm.ptr<ptr<struct<"Qubit", opaque>>>
    %13 = llvm.load %12 : !llvm.ptr<ptr<struct<"Qubit", opaque>>>
    llvm.call @__quantum__qis__x(%13) : (!llvm.ptr<struct<"Qubit", opaque>>) -> ()
    llvm.call @__quantum__rt__qubit_release_array(%1) : (!llvm.ptr<struct<"Array", opaque>>) -> ()
    llvm.return
  }
}


// -----// IR Dump Before QIRToQIRProfileFunc (quake-to-qir-func) ('llvm.func' operation: @__quantum__rt__result_record_output) //----- //
module attributes {quake.mangled_name_map = {__nvqpp__mlirgen__kernel = "__nvqpp__mlirgen__kernel_PyKernelEntryPointRewrite"}} {
  llvm.func @__quantum__qis__x__body(!llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__qis__cnot__body(!llvm.ptr<struct<"Qubit", opaque>>, !llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__qis__cz__body(!llvm.ptr<struct<"Qubit", opaque>>, !llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__rt__result_record_output(!llvm.ptr<struct<"Result", opaque>>, !llvm.ptr<i8>)
  llvm.func @__quantum__qis__read_result__body(!llvm.ptr<struct<"Result", opaque>>) -> i1
  llvm.func @__quantum__qis__mz__body(!llvm.ptr<struct<"Qubit", opaque>>, !llvm.ptr<struct<"Result", opaque>>) attributes {passthrough = ["irreversible"]}
  llvm.func @__quantum__qis__cz(!llvm.ptr<struct<"Qubit", opaque>>, !llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__qis__cnot(!llvm.ptr<struct<"Qubit", opaque>>, !llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__rt__qubit_release_array(!llvm.ptr<struct<"Array", opaque>>)
  llvm.func @__quantum__qis__x(!llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__rt__array_get_element_ptr_1d(!llvm.ptr<struct<"Array", opaque>>, i64) -> !llvm.ptr<i8>
  llvm.func @__quantum__rt__qubit_allocate_array(i64) -> !llvm.ptr<struct<"Array", opaque>>
  llvm.func @__nvqpp__mlirgen__kernel() attributes {"cudaq-entrypoint"} {
    %0 = llvm.mlir.constant(3 : i64) : i64
    %1 = llvm.call @__quantum__rt__qubit_allocate_array(%0) : (i64) -> !llvm.ptr<struct<"Array", opaque>>
    %2 = llvm.mlir.constant(0 : i64) : i64
    %3 = llvm.call @__quantum__rt__array_get_element_ptr_1d(%1, %2) : (!llvm.ptr<struct<"Array", opaque>>, i64) -> !llvm.ptr<i8>
    %4 = llvm.bitcast %3 : !llvm.ptr<i8> to !llvm.ptr<ptr<struct<"Qubit", opaque>>>
    %5 = llvm.load %4 : !llvm.ptr<ptr<struct<"Qubit", opaque>>>
    llvm.call @__quantum__qis__x(%5) : (!llvm.ptr<struct<"Qubit", opaque>>) -> ()
    %6 = llvm.mlir.constant(1 : i64) : i64
    %7 = llvm.call @__quantum__rt__array_get_element_ptr_1d(%1, %6) : (!llvm.ptr<struct<"Array", opaque>>, i64) -> !llvm.ptr<i8>
    %8 = llvm.bitcast %7 : !llvm.ptr<i8> to !llvm.ptr<ptr<struct<"Qubit", opaque>>>
    %9 = llvm.load %8 : !llvm.ptr<ptr<struct<"Qubit", opaque>>>
    llvm.call @__quantum__qis__x(%9) : (!llvm.ptr<struct<"Qubit", opaque>>) -> ()
    %10 = llvm.mlir.constant(2 : i64) : i64
    %11 = llvm.call @__quantum__rt__array_get_element_ptr_1d(%1, %10) : (!llvm.ptr<struct<"Array", opaque>>, i64) -> !llvm.ptr<i8>
    %12 = llvm.bitcast %11 : !llvm.ptr<i8> to !llvm.ptr<ptr<struct<"Qubit", opaque>>>
    %13 = llvm.load %12 : !llvm.ptr<ptr<struct<"Qubit", opaque>>>
    llvm.call @__quantum__qis__x(%13) : (!llvm.ptr<struct<"Qubit", opaque>>) -> ()
    llvm.call @__quantum__rt__qubit_release_array(%1) : (!llvm.ptr<struct<"Array", opaque>>) -> ()
    llvm.return
  }
}


// -----// IR Dump Before QIRToQIRProfileFunc (quake-to-qir-func) ('llvm.func' operation: @__quantum__qis__read_result__body) //----- //
module attributes {quake.mangled_name_map = {__nvqpp__mlirgen__kernel = "__nvqpp__mlirgen__kernel_PyKernelEntryPointRewrite"}} {
  llvm.func @__quantum__qis__x__body(!llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__qis__cnot__body(!llvm.ptr<struct<"Qubit", opaque>>, !llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__qis__cz__body(!llvm.ptr<struct<"Qubit", opaque>>, !llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__rt__result_record_output(!llvm.ptr<struct<"Result", opaque>>, !llvm.ptr<i8>)
  llvm.func @__quantum__qis__read_result__body(!llvm.ptr<struct<"Result", opaque>>) -> i1
  llvm.func @__quantum__qis__mz__body(!llvm.ptr<struct<"Qubit", opaque>>, !llvm.ptr<struct<"Result", opaque>>) attributes {passthrough = ["irreversible"]}
  llvm.func @__quantum__qis__cz(!llvm.ptr<struct<"Qubit", opaque>>, !llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__qis__cnot(!llvm.ptr<struct<"Qubit", opaque>>, !llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__rt__qubit_release_array(!llvm.ptr<struct<"Array", opaque>>)
  llvm.func @__quantum__qis__x(!llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__rt__array_get_element_ptr_1d(!llvm.ptr<struct<"Array", opaque>>, i64) -> !llvm.ptr<i8>
  llvm.func @__quantum__rt__qubit_allocate_array(i64) -> !llvm.ptr<struct<"Array", opaque>>
  llvm.func @__nvqpp__mlirgen__kernel() attributes {"cudaq-entrypoint"} {
    %0 = llvm.mlir.constant(3 : i64) : i64
    %1 = llvm.call @__quantum__rt__qubit_allocate_array(%0) : (i64) -> !llvm.ptr<struct<"Array", opaque>>
    %2 = llvm.mlir.constant(0 : i64) : i64
    %3 = llvm.call @__quantum__rt__array_get_element_ptr_1d(%1, %2) : (!llvm.ptr<struct<"Array", opaque>>, i64) -> !llvm.ptr<i8>
    %4 = llvm.bitcast %3 : !llvm.ptr<i8> to !llvm.ptr<ptr<struct<"Qubit", opaque>>>
    %5 = llvm.load %4 : !llvm.ptr<ptr<struct<"Qubit", opaque>>>
    llvm.call @__quantum__qis__x(%5) : (!llvm.ptr<struct<"Qubit", opaque>>) -> ()
    %6 = llvm.mlir.constant(1 : i64) : i64
    %7 = llvm.call @__quantum__rt__array_get_element_ptr_1d(%1, %6) : (!llvm.ptr<struct<"Array", opaque>>, i64) -> !llvm.ptr<i8>
    %8 = llvm.bitcast %7 : !llvm.ptr<i8> to !llvm.ptr<ptr<struct<"Qubit", opaque>>>
    %9 = llvm.load %8 : !llvm.ptr<ptr<struct<"Qubit", opaque>>>
    llvm.call @__quantum__qis__x(%9) : (!llvm.ptr<struct<"Qubit", opaque>>) -> ()
    %10 = llvm.mlir.constant(2 : i64) : i64
    %11 = llvm.call @__quantum__rt__array_get_element_ptr_1d(%1, %10) : (!llvm.ptr<struct<"Array", opaque>>, i64) -> !llvm.ptr<i8>
    %12 = llvm.bitcast %11 : !llvm.ptr<i8> to !llvm.ptr<ptr<struct<"Qubit", opaque>>>
    %13 = llvm.load %12 : !llvm.ptr<ptr<struct<"Qubit", opaque>>>
    llvm.call @__quantum__qis__x(%13) : (!llvm.ptr<struct<"Qubit", opaque>>) -> ()
    llvm.call @__quantum__rt__qubit_release_array(%1) : (!llvm.ptr<struct<"Array", opaque>>) -> ()
    llvm.return
  }
}


// -----// IR Dump Before QIRToQIRProfileFunc (quake-to-qir-func) ('llvm.func' operation: @__quantum__qis__mz__body) //----- //
module attributes {quake.mangled_name_map = {__nvqpp__mlirgen__kernel = "__nvqpp__mlirgen__kernel_PyKernelEntryPointRewrite"}} {
  llvm.func @__quantum__qis__x__body(!llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__qis__cnot__body(!llvm.ptr<struct<"Qubit", opaque>>, !llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__qis__cz__body(!llvm.ptr<struct<"Qubit", opaque>>, !llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__rt__result_record_output(!llvm.ptr<struct<"Result", opaque>>, !llvm.ptr<i8>)
  llvm.func @__quantum__qis__read_result__body(!llvm.ptr<struct<"Result", opaque>>) -> i1
  llvm.func @__quantum__qis__mz__body(!llvm.ptr<struct<"Qubit", opaque>>, !llvm.ptr<struct<"Result", opaque>>) attributes {passthrough = ["irreversible"]}
  llvm.func @__quantum__qis__cz(!llvm.ptr<struct<"Qubit", opaque>>, !llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__qis__cnot(!llvm.ptr<struct<"Qubit", opaque>>, !llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__rt__qubit_release_array(!llvm.ptr<struct<"Array", opaque>>)
  llvm.func @__quantum__qis__x(!llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__rt__array_get_element_ptr_1d(!llvm.ptr<struct<"Array", opaque>>, i64) -> !llvm.ptr<i8>
  llvm.func @__quantum__rt__qubit_allocate_array(i64) -> !llvm.ptr<struct<"Array", opaque>>
  llvm.func @__nvqpp__mlirgen__kernel() attributes {"cudaq-entrypoint"} {
    %0 = llvm.mlir.constant(3 : i64) : i64
    %1 = llvm.call @__quantum__rt__qubit_allocate_array(%0) : (i64) -> !llvm.ptr<struct<"Array", opaque>>
    %2 = llvm.mlir.constant(0 : i64) : i64
    %3 = llvm.call @__quantum__rt__array_get_element_ptr_1d(%1, %2) : (!llvm.ptr<struct<"Array", opaque>>, i64) -> !llvm.ptr<i8>
    %4 = llvm.bitcast %3 : !llvm.ptr<i8> to !llvm.ptr<ptr<struct<"Qubit", opaque>>>
    %5 = llvm.load %4 : !llvm.ptr<ptr<struct<"Qubit", opaque>>>
    llvm.call @__quantum__qis__x(%5) : (!llvm.ptr<struct<"Qubit", opaque>>) -> ()
    %6 = llvm.mlir.constant(1 : i64) : i64
    %7 = llvm.call @__quantum__rt__array_get_element_ptr_1d(%1, %6) : (!llvm.ptr<struct<"Array", opaque>>, i64) -> !llvm.ptr<i8>
    %8 = llvm.bitcast %7 : !llvm.ptr<i8> to !llvm.ptr<ptr<struct<"Qubit", opaque>>>
    %9 = llvm.load %8 : !llvm.ptr<ptr<struct<"Qubit", opaque>>>
    llvm.call @__quantum__qis__x(%9) : (!llvm.ptr<struct<"Qubit", opaque>>) -> ()
    %10 = llvm.mlir.constant(2 : i64) : i64
    %11 = llvm.call @__quantum__rt__array_get_element_ptr_1d(%1, %10) : (!llvm.ptr<struct<"Array", opaque>>, i64) -> !llvm.ptr<i8>
    %12 = llvm.bitcast %11 : !llvm.ptr<i8> to !llvm.ptr<ptr<struct<"Qubit", opaque>>>
    %13 = llvm.load %12 : !llvm.ptr<ptr<struct<"Qubit", opaque>>>
    llvm.call @__quantum__qis__x(%13) : (!llvm.ptr<struct<"Qubit", opaque>>) -> ()
    llvm.call @__quantum__rt__qubit_release_array(%1) : (!llvm.ptr<struct<"Array", opaque>>) -> ()
    llvm.return
  }
}


// -----// IR Dump Before QIRToQIRProfileFunc (quake-to-qir-func) ('llvm.func' operation: @__quantum__qis__cz) //----- //
module attributes {quake.mangled_name_map = {__nvqpp__mlirgen__kernel = "__nvqpp__mlirgen__kernel_PyKernelEntryPointRewrite"}} {
  llvm.func @__quantum__qis__x__body(!llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__qis__cnot__body(!llvm.ptr<struct<"Qubit", opaque>>, !llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__qis__cz__body(!llvm.ptr<struct<"Qubit", opaque>>, !llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__rt__result_record_output(!llvm.ptr<struct<"Result", opaque>>, !llvm.ptr<i8>)
  llvm.func @__quantum__qis__read_result__body(!llvm.ptr<struct<"Result", opaque>>) -> i1
  llvm.func @__quantum__qis__mz__body(!llvm.ptr<struct<"Qubit", opaque>>, !llvm.ptr<struct<"Result", opaque>>) attributes {passthrough = ["irreversible"]}
  llvm.func @__quantum__qis__cz(!llvm.ptr<struct<"Qubit", opaque>>, !llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__qis__cnot(!llvm.ptr<struct<"Qubit", opaque>>, !llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__rt__qubit_release_array(!llvm.ptr<struct<"Array", opaque>>)
  llvm.func @__quantum__qis__x(!llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__rt__array_get_element_ptr_1d(!llvm.ptr<struct<"Array", opaque>>, i64) -> !llvm.ptr<i8>
  llvm.func @__quantum__rt__qubit_allocate_array(i64) -> !llvm.ptr<struct<"Array", opaque>>
  llvm.func @__nvqpp__mlirgen__kernel() attributes {"cudaq-entrypoint"} {
    %0 = llvm.mlir.constant(3 : i64) : i64
    %1 = llvm.call @__quantum__rt__qubit_allocate_array(%0) : (i64) -> !llvm.ptr<struct<"Array", opaque>>
    %2 = llvm.mlir.constant(0 : i64) : i64
    %3 = llvm.call @__quantum__rt__array_get_element_ptr_1d(%1, %2) : (!llvm.ptr<struct<"Array", opaque>>, i64) -> !llvm.ptr<i8>
    %4 = llvm.bitcast %3 : !llvm.ptr<i8> to !llvm.ptr<ptr<struct<"Qubit", opaque>>>
    %5 = llvm.load %4 : !llvm.ptr<ptr<struct<"Qubit", opaque>>>
    llvm.call @__quantum__qis__x(%5) : (!llvm.ptr<struct<"Qubit", opaque>>) -> ()
    %6 = llvm.mlir.constant(1 : i64) : i64
    %7 = llvm.call @__quantum__rt__array_get_element_ptr_1d(%1, %6) : (!llvm.ptr<struct<"Array", opaque>>, i64) -> !llvm.ptr<i8>
    %8 = llvm.bitcast %7 : !llvm.ptr<i8> to !llvm.ptr<ptr<struct<"Qubit", opaque>>>
    %9 = llvm.load %8 : !llvm.ptr<ptr<struct<"Qubit", opaque>>>
    llvm.call @__quantum__qis__x(%9) : (!llvm.ptr<struct<"Qubit", opaque>>) -> ()
    %10 = llvm.mlir.constant(2 : i64) : i64
    %11 = llvm.call @__quantum__rt__array_get_element_ptr_1d(%1, %10) : (!llvm.ptr<struct<"Array", opaque>>, i64) -> !llvm.ptr<i8>
    %12 = llvm.bitcast %11 : !llvm.ptr<i8> to !llvm.ptr<ptr<struct<"Qubit", opaque>>>
    %13 = llvm.load %12 : !llvm.ptr<ptr<struct<"Qubit", opaque>>>
    llvm.call @__quantum__qis__x(%13) : (!llvm.ptr<struct<"Qubit", opaque>>) -> ()
    llvm.call @__quantum__rt__qubit_release_array(%1) : (!llvm.ptr<struct<"Array", opaque>>) -> ()
    llvm.return
  }
}


// -----// IR Dump Before QIRToQIRProfileFunc (quake-to-qir-func) ('llvm.func' operation: @__quantum__qis__cnot) //----- //
module attributes {quake.mangled_name_map = {__nvqpp__mlirgen__kernel = "__nvqpp__mlirgen__kernel_PyKernelEntryPointRewrite"}} {
  llvm.func @__quantum__qis__x__body(!llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__qis__cnot__body(!llvm.ptr<struct<"Qubit", opaque>>, !llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__qis__cz__body(!llvm.ptr<struct<"Qubit", opaque>>, !llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__rt__result_record_output(!llvm.ptr<struct<"Result", opaque>>, !llvm.ptr<i8>)
  llvm.func @__quantum__qis__read_result__body(!llvm.ptr<struct<"Result", opaque>>) -> i1
  llvm.func @__quantum__qis__mz__body(!llvm.ptr<struct<"Qubit", opaque>>, !llvm.ptr<struct<"Result", opaque>>) attributes {passthrough = ["irreversible"]}
  llvm.func @__quantum__qis__cz(!llvm.ptr<struct<"Qubit", opaque>>, !llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__qis__cnot(!llvm.ptr<struct<"Qubit", opaque>>, !llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__rt__qubit_release_array(!llvm.ptr<struct<"Array", opaque>>)
  llvm.func @__quantum__qis__x(!llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__rt__array_get_element_ptr_1d(!llvm.ptr<struct<"Array", opaque>>, i64) -> !llvm.ptr<i8>
  llvm.func @__quantum__rt__qubit_allocate_array(i64) -> !llvm.ptr<struct<"Array", opaque>>
  llvm.func @__nvqpp__mlirgen__kernel() attributes {"cudaq-entrypoint"} {
    %0 = llvm.mlir.constant(3 : i64) : i64
    %1 = llvm.call @__quantum__rt__qubit_allocate_array(%0) : (i64) -> !llvm.ptr<struct<"Array", opaque>>
    %2 = llvm.mlir.constant(0 : i64) : i64
    %3 = llvm.call @__quantum__rt__array_get_element_ptr_1d(%1, %2) : (!llvm.ptr<struct<"Array", opaque>>, i64) -> !llvm.ptr<i8>
    %4 = llvm.bitcast %3 : !llvm.ptr<i8> to !llvm.ptr<ptr<struct<"Qubit", opaque>>>
    %5 = llvm.load %4 : !llvm.ptr<ptr<struct<"Qubit", opaque>>>
    llvm.call @__quantum__qis__x(%5) : (!llvm.ptr<struct<"Qubit", opaque>>) -> ()
    %6 = llvm.mlir.constant(1 : i64) : i64
    %7 = llvm.call @__quantum__rt__array_get_element_ptr_1d(%1, %6) : (!llvm.ptr<struct<"Array", opaque>>, i64) -> !llvm.ptr<i8>
    %8 = llvm.bitcast %7 : !llvm.ptr<i8> to !llvm.ptr<ptr<struct<"Qubit", opaque>>>
    %9 = llvm.load %8 : !llvm.ptr<ptr<struct<"Qubit", opaque>>>
    llvm.call @__quantum__qis__x(%9) : (!llvm.ptr<struct<"Qubit", opaque>>) -> ()
    %10 = llvm.mlir.constant(2 : i64) : i64
    %11 = llvm.call @__quantum__rt__array_get_element_ptr_1d(%1, %10) : (!llvm.ptr<struct<"Array", opaque>>, i64) -> !llvm.ptr<i8>
    %12 = llvm.bitcast %11 : !llvm.ptr<i8> to !llvm.ptr<ptr<struct<"Qubit", opaque>>>
    %13 = llvm.load %12 : !llvm.ptr<ptr<struct<"Qubit", opaque>>>
    llvm.call @__quantum__qis__x(%13) : (!llvm.ptr<struct<"Qubit", opaque>>) -> ()
    llvm.call @__quantum__rt__qubit_release_array(%1) : (!llvm.ptr<struct<"Array", opaque>>) -> ()
    llvm.return
  }
}


// -----// IR Dump Before QIRToQIRProfileFunc (quake-to-qir-func) ('llvm.func' operation: @__quantum__rt__qubit_release_array) //----- //
module attributes {quake.mangled_name_map = {__nvqpp__mlirgen__kernel = "__nvqpp__mlirgen__kernel_PyKernelEntryPointRewrite"}} {
  llvm.func @__quantum__qis__x__body(!llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__qis__cnot__body(!llvm.ptr<struct<"Qubit", opaque>>, !llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__qis__cz__body(!llvm.ptr<struct<"Qubit", opaque>>, !llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__rt__result_record_output(!llvm.ptr<struct<"Result", opaque>>, !llvm.ptr<i8>)
  llvm.func @__quantum__qis__read_result__body(!llvm.ptr<struct<"Result", opaque>>) -> i1
  llvm.func @__quantum__qis__mz__body(!llvm.ptr<struct<"Qubit", opaque>>, !llvm.ptr<struct<"Result", opaque>>) attributes {passthrough = ["irreversible"]}
  llvm.func @__quantum__qis__cz(!llvm.ptr<struct<"Qubit", opaque>>, !llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__qis__cnot(!llvm.ptr<struct<"Qubit", opaque>>, !llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__rt__qubit_release_array(!llvm.ptr<struct<"Array", opaque>>)
  llvm.func @__quantum__qis__x(!llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__rt__array_get_element_ptr_1d(!llvm.ptr<struct<"Array", opaque>>, i64) -> !llvm.ptr<i8>
  llvm.func @__quantum__rt__qubit_allocate_array(i64) -> !llvm.ptr<struct<"Array", opaque>>
  llvm.func @__nvqpp__mlirgen__kernel() attributes {"cudaq-entrypoint"} {
    %0 = llvm.mlir.constant(3 : i64) : i64
    %1 = llvm.call @__quantum__rt__qubit_allocate_array(%0) : (i64) -> !llvm.ptr<struct<"Array", opaque>>
    %2 = llvm.mlir.constant(0 : i64) : i64
    %3 = llvm.call @__quantum__rt__array_get_element_ptr_1d(%1, %2) : (!llvm.ptr<struct<"Array", opaque>>, i64) -> !llvm.ptr<i8>
    %4 = llvm.bitcast %3 : !llvm.ptr<i8> to !llvm.ptr<ptr<struct<"Qubit", opaque>>>
    %5 = llvm.load %4 : !llvm.ptr<ptr<struct<"Qubit", opaque>>>
    llvm.call @__quantum__qis__x(%5) : (!llvm.ptr<struct<"Qubit", opaque>>) -> ()
    %6 = llvm.mlir.constant(1 : i64) : i64
    %7 = llvm.call @__quantum__rt__array_get_element_ptr_1d(%1, %6) : (!llvm.ptr<struct<"Array", opaque>>, i64) -> !llvm.ptr<i8>
    %8 = llvm.bitcast %7 : !llvm.ptr<i8> to !llvm.ptr<ptr<struct<"Qubit", opaque>>>
    %9 = llvm.load %8 : !llvm.ptr<ptr<struct<"Qubit", opaque>>>
    llvm.call @__quantum__qis__x(%9) : (!llvm.ptr<struct<"Qubit", opaque>>) -> ()
    %10 = llvm.mlir.constant(2 : i64) : i64
    %11 = llvm.call @__quantum__rt__array_get_element_ptr_1d(%1, %10) : (!llvm.ptr<struct<"Array", opaque>>, i64) -> !llvm.ptr<i8>
    %12 = llvm.bitcast %11 : !llvm.ptr<i8> to !llvm.ptr<ptr<struct<"Qubit", opaque>>>
    %13 = llvm.load %12 : !llvm.ptr<ptr<struct<"Qubit", opaque>>>
    llvm.call @__quantum__qis__x(%13) : (!llvm.ptr<struct<"Qubit", opaque>>) -> ()
    llvm.call @__quantum__rt__qubit_release_array(%1) : (!llvm.ptr<struct<"Array", opaque>>) -> ()
    llvm.return
  }
}


// -----// IR Dump Before QIRToQIRProfileFunc (quake-to-qir-func) ('llvm.func' operation: @__quantum__qis__x) //----- //
module attributes {quake.mangled_name_map = {__nvqpp__mlirgen__kernel = "__nvqpp__mlirgen__kernel_PyKernelEntryPointRewrite"}} {
  llvm.func @__quantum__qis__x__body(!llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__qis__cnot__body(!llvm.ptr<struct<"Qubit", opaque>>, !llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__qis__cz__body(!llvm.ptr<struct<"Qubit", opaque>>, !llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__rt__result_record_output(!llvm.ptr<struct<"Result", opaque>>, !llvm.ptr<i8>)
  llvm.func @__quantum__qis__read_result__body(!llvm.ptr<struct<"Result", opaque>>) -> i1
  llvm.func @__quantum__qis__mz__body(!llvm.ptr<struct<"Qubit", opaque>>, !llvm.ptr<struct<"Result", opaque>>) attributes {passthrough = ["irreversible"]}
  llvm.func @__quantum__qis__cz(!llvm.ptr<struct<"Qubit", opaque>>, !llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__qis__cnot(!llvm.ptr<struct<"Qubit", opaque>>, !llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__rt__qubit_release_array(!llvm.ptr<struct<"Array", opaque>>)
  llvm.func @__quantum__qis__x(!llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__rt__array_get_element_ptr_1d(!llvm.ptr<struct<"Array", opaque>>, i64) -> !llvm.ptr<i8>
  llvm.func @__quantum__rt__qubit_allocate_array(i64) -> !llvm.ptr<struct<"Array", opaque>>
  llvm.func @__nvqpp__mlirgen__kernel() attributes {"cudaq-entrypoint"} {
    %0 = llvm.mlir.constant(3 : i64) : i64
    %1 = llvm.call @__quantum__rt__qubit_allocate_array(%0) : (i64) -> !llvm.ptr<struct<"Array", opaque>>
    %2 = llvm.mlir.constant(0 : i64) : i64
    %3 = llvm.call @__quantum__rt__array_get_element_ptr_1d(%1, %2) : (!llvm.ptr<struct<"Array", opaque>>, i64) -> !llvm.ptr<i8>
    %4 = llvm.bitcast %3 : !llvm.ptr<i8> to !llvm.ptr<ptr<struct<"Qubit", opaque>>>
    %5 = llvm.load %4 : !llvm.ptr<ptr<struct<"Qubit", opaque>>>
    llvm.call @__quantum__qis__x(%5) : (!llvm.ptr<struct<"Qubit", opaque>>) -> ()
    %6 = llvm.mlir.constant(1 : i64) : i64
    %7 = llvm.call @__quantum__rt__array_get_element_ptr_1d(%1, %6) : (!llvm.ptr<struct<"Array", opaque>>, i64) -> !llvm.ptr<i8>
    %8 = llvm.bitcast %7 : !llvm.ptr<i8> to !llvm.ptr<ptr<struct<"Qubit", opaque>>>
    %9 = llvm.load %8 : !llvm.ptr<ptr<struct<"Qubit", opaque>>>
    llvm.call @__quantum__qis__x(%9) : (!llvm.ptr<struct<"Qubit", opaque>>) -> ()
    %10 = llvm.mlir.constant(2 : i64) : i64
    %11 = llvm.call @__quantum__rt__array_get_element_ptr_1d(%1, %10) : (!llvm.ptr<struct<"Array", opaque>>, i64) -> !llvm.ptr<i8>
    %12 = llvm.bitcast %11 : !llvm.ptr<i8> to !llvm.ptr<ptr<struct<"Qubit", opaque>>>
    %13 = llvm.load %12 : !llvm.ptr<ptr<struct<"Qubit", opaque>>>
    llvm.call @__quantum__qis__x(%13) : (!llvm.ptr<struct<"Qubit", opaque>>) -> ()
    llvm.call @__quantum__rt__qubit_release_array(%1) : (!llvm.ptr<struct<"Array", opaque>>) -> ()
    llvm.return
  }
}


// -----// IR Dump Before QIRToQIRProfileFunc (quake-to-qir-func) ('llvm.func' operation: @__quantum__rt__array_get_element_ptr_1d) //----- //
module attributes {quake.mangled_name_map = {__nvqpp__mlirgen__kernel = "__nvqpp__mlirgen__kernel_PyKernelEntryPointRewrite"}} {
  llvm.func @__quantum__qis__x__body(!llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__qis__cnot__body(!llvm.ptr<struct<"Qubit", opaque>>, !llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__qis__cz__body(!llvm.ptr<struct<"Qubit", opaque>>, !llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__rt__result_record_output(!llvm.ptr<struct<"Result", opaque>>, !llvm.ptr<i8>)
  llvm.func @__quantum__qis__read_result__body(!llvm.ptr<struct<"Result", opaque>>) -> i1
  llvm.func @__quantum__qis__mz__body(!llvm.ptr<struct<"Qubit", opaque>>, !llvm.ptr<struct<"Result", opaque>>) attributes {passthrough = ["irreversible"]}
  llvm.func @__quantum__qis__cz(!llvm.ptr<struct<"Qubit", opaque>>, !llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__qis__cnot(!llvm.ptr<struct<"Qubit", opaque>>, !llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__rt__qubit_release_array(!llvm.ptr<struct<"Array", opaque>>)
  llvm.func @__quantum__qis__x(!llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__rt__array_get_element_ptr_1d(!llvm.ptr<struct<"Array", opaque>>, i64) -> !llvm.ptr<i8>
  llvm.func @__quantum__rt__qubit_allocate_array(i64) -> !llvm.ptr<struct<"Array", opaque>>
  llvm.func @__nvqpp__mlirgen__kernel() attributes {"cudaq-entrypoint"} {
    %0 = llvm.mlir.constant(3 : i64) : i64
    %1 = llvm.call @__quantum__rt__qubit_allocate_array(%0) : (i64) -> !llvm.ptr<struct<"Array", opaque>>
    %2 = llvm.mlir.constant(0 : i64) : i64
    %3 = llvm.call @__quantum__rt__array_get_element_ptr_1d(%1, %2) : (!llvm.ptr<struct<"Array", opaque>>, i64) -> !llvm.ptr<i8>
    %4 = llvm.bitcast %3 : !llvm.ptr<i8> to !llvm.ptr<ptr<struct<"Qubit", opaque>>>
    %5 = llvm.load %4 : !llvm.ptr<ptr<struct<"Qubit", opaque>>>
    llvm.call @__quantum__qis__x(%5) : (!llvm.ptr<struct<"Qubit", opaque>>) -> ()
    %6 = llvm.mlir.constant(1 : i64) : i64
    %7 = llvm.call @__quantum__rt__array_get_element_ptr_1d(%1, %6) : (!llvm.ptr<struct<"Array", opaque>>, i64) -> !llvm.ptr<i8>
    %8 = llvm.bitcast %7 : !llvm.ptr<i8> to !llvm.ptr<ptr<struct<"Qubit", opaque>>>
    %9 = llvm.load %8 : !llvm.ptr<ptr<struct<"Qubit", opaque>>>
    llvm.call @__quantum__qis__x(%9) : (!llvm.ptr<struct<"Qubit", opaque>>) -> ()
    %10 = llvm.mlir.constant(2 : i64) : i64
    %11 = llvm.call @__quantum__rt__array_get_element_ptr_1d(%1, %10) : (!llvm.ptr<struct<"Array", opaque>>, i64) -> !llvm.ptr<i8>
    %12 = llvm.bitcast %11 : !llvm.ptr<i8> to !llvm.ptr<ptr<struct<"Qubit", opaque>>>
    %13 = llvm.load %12 : !llvm.ptr<ptr<struct<"Qubit", opaque>>>
    llvm.call @__quantum__qis__x(%13) : (!llvm.ptr<struct<"Qubit", opaque>>) -> ()
    llvm.call @__quantum__rt__qubit_release_array(%1) : (!llvm.ptr<struct<"Array", opaque>>) -> ()
    llvm.return
  }
}


// -----// IR Dump Before QIRToQIRProfileFunc (quake-to-qir-func) ('llvm.func' operation: @__quantum__rt__qubit_allocate_array) //----- //
module attributes {quake.mangled_name_map = {__nvqpp__mlirgen__kernel = "__nvqpp__mlirgen__kernel_PyKernelEntryPointRewrite"}} {
  llvm.func @__quantum__qis__x__body(!llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__qis__cnot__body(!llvm.ptr<struct<"Qubit", opaque>>, !llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__qis__cz__body(!llvm.ptr<struct<"Qubit", opaque>>, !llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__rt__result_record_output(!llvm.ptr<struct<"Result", opaque>>, !llvm.ptr<i8>)
  llvm.func @__quantum__qis__read_result__body(!llvm.ptr<struct<"Result", opaque>>) -> i1
  llvm.func @__quantum__qis__mz__body(!llvm.ptr<struct<"Qubit", opaque>>, !llvm.ptr<struct<"Result", opaque>>) attributes {passthrough = ["irreversible"]}
  llvm.func @__quantum__qis__cz(!llvm.ptr<struct<"Qubit", opaque>>, !llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__qis__cnot(!llvm.ptr<struct<"Qubit", opaque>>, !llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__rt__qubit_release_array(!llvm.ptr<struct<"Array", opaque>>)
  llvm.func @__quantum__qis__x(!llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__rt__array_get_element_ptr_1d(!llvm.ptr<struct<"Array", opaque>>, i64) -> !llvm.ptr<i8>
  llvm.func @__quantum__rt__qubit_allocate_array(i64) -> !llvm.ptr<struct<"Array", opaque>>
  llvm.func @__nvqpp__mlirgen__kernel() attributes {"cudaq-entrypoint"} {
    %0 = llvm.mlir.constant(3 : i64) : i64
    %1 = llvm.call @__quantum__rt__qubit_allocate_array(%0) : (i64) -> !llvm.ptr<struct<"Array", opaque>>
    %2 = llvm.mlir.constant(0 : i64) : i64
    %3 = llvm.call @__quantum__rt__array_get_element_ptr_1d(%1, %2) : (!llvm.ptr<struct<"Array", opaque>>, i64) -> !llvm.ptr<i8>
    %4 = llvm.bitcast %3 : !llvm.ptr<i8> to !llvm.ptr<ptr<struct<"Qubit", opaque>>>
    %5 = llvm.load %4 : !llvm.ptr<ptr<struct<"Qubit", opaque>>>
    llvm.call @__quantum__qis__x(%5) : (!llvm.ptr<struct<"Qubit", opaque>>) -> ()
    %6 = llvm.mlir.constant(1 : i64) : i64
    %7 = llvm.call @__quantum__rt__array_get_element_ptr_1d(%1, %6) : (!llvm.ptr<struct<"Array", opaque>>, i64) -> !llvm.ptr<i8>
    %8 = llvm.bitcast %7 : !llvm.ptr<i8> to !llvm.ptr<ptr<struct<"Qubit", opaque>>>
    %9 = llvm.load %8 : !llvm.ptr<ptr<struct<"Qubit", opaque>>>
    llvm.call @__quantum__qis__x(%9) : (!llvm.ptr<struct<"Qubit", opaque>>) -> ()
    %10 = llvm.mlir.constant(2 : i64) : i64
    %11 = llvm.call @__quantum__rt__array_get_element_ptr_1d(%1, %10) : (!llvm.ptr<struct<"Array", opaque>>, i64) -> !llvm.ptr<i8>
    %12 = llvm.bitcast %11 : !llvm.ptr<i8> to !llvm.ptr<ptr<struct<"Qubit", opaque>>>
    %13 = llvm.load %12 : !llvm.ptr<ptr<struct<"Qubit", opaque>>>
    llvm.call @__quantum__qis__x(%13) : (!llvm.ptr<struct<"Qubit", opaque>>) -> ()
    llvm.call @__quantum__rt__qubit_release_array(%1) : (!llvm.ptr<struct<"Array", opaque>>) -> ()
    llvm.return
  }
}


// -----// IR Dump Before QIRToQIRProfileFunc (quake-to-qir-func) ('llvm.func' operation: @__nvqpp__mlirgen__kernel) //----- //
module attributes {quake.mangled_name_map = {__nvqpp__mlirgen__kernel = "__nvqpp__mlirgen__kernel_PyKernelEntryPointRewrite"}} {
  llvm.func @__quantum__qis__x__body(!llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__qis__cnot__body(!llvm.ptr<struct<"Qubit", opaque>>, !llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__qis__cz__body(!llvm.ptr<struct<"Qubit", opaque>>, !llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__rt__result_record_output(!llvm.ptr<struct<"Result", opaque>>, !llvm.ptr<i8>)
  llvm.func @__quantum__qis__read_result__body(!llvm.ptr<struct<"Result", opaque>>) -> i1
  llvm.func @__quantum__qis__mz__body(!llvm.ptr<struct<"Qubit", opaque>>, !llvm.ptr<struct<"Result", opaque>>) attributes {passthrough = ["irreversible"]}
  llvm.func @__quantum__qis__cz(!llvm.ptr<struct<"Qubit", opaque>>, !llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__qis__cnot(!llvm.ptr<struct<"Qubit", opaque>>, !llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__rt__qubit_release_array(!llvm.ptr<struct<"Array", opaque>>)
  llvm.func @__quantum__qis__x(!llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__rt__array_get_element_ptr_1d(!llvm.ptr<struct<"Array", opaque>>, i64) -> !llvm.ptr<i8>
  llvm.func @__quantum__rt__qubit_allocate_array(i64) -> !llvm.ptr<struct<"Array", opaque>>
  llvm.func @__nvqpp__mlirgen__kernel() attributes {"cudaq-entrypoint"} {
    %0 = llvm.mlir.constant(3 : i64) : i64
    %1 = llvm.call @__quantum__rt__qubit_allocate_array(%0) : (i64) -> !llvm.ptr<struct<"Array", opaque>>
    %2 = llvm.mlir.constant(0 : i64) : i64
    %3 = llvm.call @__quantum__rt__array_get_element_ptr_1d(%1, %2) : (!llvm.ptr<struct<"Array", opaque>>, i64) -> !llvm.ptr<i8>
    %4 = llvm.bitcast %3 : !llvm.ptr<i8> to !llvm.ptr<ptr<struct<"Qubit", opaque>>>
    %5 = llvm.load %4 : !llvm.ptr<ptr<struct<"Qubit", opaque>>>
    llvm.call @__quantum__qis__x(%5) : (!llvm.ptr<struct<"Qubit", opaque>>) -> ()
    %6 = llvm.mlir.constant(1 : i64) : i64
    %7 = llvm.call @__quantum__rt__array_get_element_ptr_1d(%1, %6) : (!llvm.ptr<struct<"Array", opaque>>, i64) -> !llvm.ptr<i8>
    %8 = llvm.bitcast %7 : !llvm.ptr<i8> to !llvm.ptr<ptr<struct<"Qubit", opaque>>>
    %9 = llvm.load %8 : !llvm.ptr<ptr<struct<"Qubit", opaque>>>
    llvm.call @__quantum__qis__x(%9) : (!llvm.ptr<struct<"Qubit", opaque>>) -> ()
    %10 = llvm.mlir.constant(2 : i64) : i64
    %11 = llvm.call @__quantum__rt__array_get_element_ptr_1d(%1, %10) : (!llvm.ptr<struct<"Array", opaque>>, i64) -> !llvm.ptr<i8>
    %12 = llvm.bitcast %11 : !llvm.ptr<i8> to !llvm.ptr<ptr<struct<"Qubit", opaque>>>
    %13 = llvm.load %12 : !llvm.ptr<ptr<struct<"Qubit", opaque>>>
    llvm.call @__quantum__qis__x(%13) : (!llvm.ptr<struct<"Qubit", opaque>>) -> ()
    llvm.call @__quantum__rt__qubit_release_array(%1) : (!llvm.ptr<struct<"Array", opaque>>) -> ()
    llvm.return
  }
}


// -----// IR Dump After QIRToQIRProfileFunc (quake-to-qir-func) ('llvm.func' operation: @__nvqpp__mlirgen__kernel) //----- //
module attributes {quake.mangled_name_map = {__nvqpp__mlirgen__kernel = "__nvqpp__mlirgen__kernel_PyKernelEntryPointRewrite"}} {
  llvm.func @__quantum__qis__x__body(!llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__qis__cnot__body(!llvm.ptr<struct<"Qubit", opaque>>, !llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__qis__cz__body(!llvm.ptr<struct<"Qubit", opaque>>, !llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__rt__result_record_output(!llvm.ptr<struct<"Result", opaque>>, !llvm.ptr<i8>)
  llvm.func @__quantum__qis__read_result__body(!llvm.ptr<struct<"Result", opaque>>) -> i1
  llvm.func @__quantum__qis__mz__body(!llvm.ptr<struct<"Qubit", opaque>>, !llvm.ptr<struct<"Result", opaque>>) attributes {passthrough = ["irreversible"]}
  llvm.func @__quantum__qis__cz(!llvm.ptr<struct<"Qubit", opaque>>, !llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__qis__cnot(!llvm.ptr<struct<"Qubit", opaque>>, !llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__rt__qubit_release_array(!llvm.ptr<struct<"Array", opaque>>)
  llvm.func @__quantum__qis__x(!llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__rt__array_get_element_ptr_1d(!llvm.ptr<struct<"Array", opaque>>, i64) -> !llvm.ptr<i8>
  llvm.func @__quantum__rt__qubit_allocate_array(i64) -> !llvm.ptr<struct<"Array", opaque>>
  llvm.func @__nvqpp__mlirgen__kernel() attributes {"cudaq-entrypoint", passthrough = ["entry_point", ["qir_profiles", "base_profile"], ["output_labeling_schema", "schema_id"], ["output_names", "[[]]"], ["requiredQubits", "3"], ["requiredResults", "0"]]} {
    %0 = llvm.mlir.constant(3 : i64) : i64
    %1 = llvm.call @__quantum__rt__qubit_allocate_array(%0) {StartingOffset = 0 : i64} : (i64) -> !llvm.ptr<struct<"Array", opaque>>
    %2 = llvm.mlir.constant(0 : i64) : i64
    %3 = llvm.call @__quantum__rt__array_get_element_ptr_1d(%1, %2) : (!llvm.ptr<struct<"Array", opaque>>, i64) -> !llvm.ptr<i8>
    %4 = llvm.bitcast %3 : !llvm.ptr<i8> to !llvm.ptr<ptr<struct<"Qubit", opaque>>>
    %5 = llvm.load %4 : !llvm.ptr<ptr<struct<"Qubit", opaque>>>
    llvm.call @__quantum__qis__x(%5) : (!llvm.ptr<struct<"Qubit", opaque>>) -> ()
    %6 = llvm.mlir.constant(1 : i64) : i64
    %7 = llvm.call @__quantum__rt__array_get_element_ptr_1d(%1, %6) : (!llvm.ptr<struct<"Array", opaque>>, i64) -> !llvm.ptr<i8>
    %8 = llvm.bitcast %7 : !llvm.ptr<i8> to !llvm.ptr<ptr<struct<"Qubit", opaque>>>
    %9 = llvm.load %8 : !llvm.ptr<ptr<struct<"Qubit", opaque>>>
    llvm.call @__quantum__qis__x(%9) : (!llvm.ptr<struct<"Qubit", opaque>>) -> ()
    %10 = llvm.mlir.constant(2 : i64) : i64
    %11 = llvm.call @__quantum__rt__array_get_element_ptr_1d(%1, %10) : (!llvm.ptr<struct<"Array", opaque>>, i64) -> !llvm.ptr<i8>
    %12 = llvm.bitcast %11 : !llvm.ptr<i8> to !llvm.ptr<ptr<struct<"Qubit", opaque>>>
    %13 = llvm.load %12 : !llvm.ptr<ptr<struct<"Qubit", opaque>>>
    llvm.call @__quantum__qis__x(%13) : (!llvm.ptr<struct<"Qubit", opaque>>) -> ()
    llvm.call @__quantum__rt__qubit_release_array(%1) : (!llvm.ptr<struct<"Array", opaque>>) -> ()
    llvm.return
  }
}


// -----// IR Dump Before QIRToQIRProfile (convert-to-qir-profile) ('builtin.module' operation) //----- //
module attributes {quake.mangled_name_map = {__nvqpp__mlirgen__kernel = "__nvqpp__mlirgen__kernel_PyKernelEntryPointRewrite"}} {
  llvm.func @__quantum__qis__x__body(!llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__qis__cnot__body(!llvm.ptr<struct<"Qubit", opaque>>, !llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__qis__cz__body(!llvm.ptr<struct<"Qubit", opaque>>, !llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__rt__result_record_output(!llvm.ptr<struct<"Result", opaque>>, !llvm.ptr<i8>)
  llvm.func @__quantum__qis__read_result__body(!llvm.ptr<struct<"Result", opaque>>) -> i1
  llvm.func @__quantum__qis__mz__body(!llvm.ptr<struct<"Qubit", opaque>>, !llvm.ptr<struct<"Result", opaque>>) attributes {passthrough = ["irreversible"]}
  llvm.func @__quantum__qis__cz(!llvm.ptr<struct<"Qubit", opaque>>, !llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__qis__cnot(!llvm.ptr<struct<"Qubit", opaque>>, !llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__rt__qubit_release_array(!llvm.ptr<struct<"Array", opaque>>)
  llvm.func @__quantum__qis__x(!llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__rt__array_get_element_ptr_1d(!llvm.ptr<struct<"Array", opaque>>, i64) -> !llvm.ptr<i8>
  llvm.func @__quantum__rt__qubit_allocate_array(i64) -> !llvm.ptr<struct<"Array", opaque>>
  llvm.func @__nvqpp__mlirgen__kernel() attributes {"cudaq-entrypoint", passthrough = ["entry_point", ["qir_profiles", "base_profile"], ["output_labeling_schema", "schema_id"], ["output_names", "[[]]"], ["requiredQubits", "3"], ["requiredResults", "0"]]} {
    %0 = llvm.mlir.constant(3 : i64) : i64
    %1 = llvm.call @__quantum__rt__qubit_allocate_array(%0) {StartingOffset = 0 : i64} : (i64) -> !llvm.ptr<struct<"Array", opaque>>
    %2 = llvm.mlir.constant(0 : i64) : i64
    %3 = llvm.call @__quantum__rt__array_get_element_ptr_1d(%1, %2) : (!llvm.ptr<struct<"Array", opaque>>, i64) -> !llvm.ptr<i8>
    %4 = llvm.bitcast %3 : !llvm.ptr<i8> to !llvm.ptr<ptr<struct<"Qubit", opaque>>>
    %5 = llvm.load %4 : !llvm.ptr<ptr<struct<"Qubit", opaque>>>
    llvm.call @__quantum__qis__x(%5) : (!llvm.ptr<struct<"Qubit", opaque>>) -> ()
    %6 = llvm.mlir.constant(1 : i64) : i64
    %7 = llvm.call @__quantum__rt__array_get_element_ptr_1d(%1, %6) : (!llvm.ptr<struct<"Array", opaque>>, i64) -> !llvm.ptr<i8>
    %8 = llvm.bitcast %7 : !llvm.ptr<i8> to !llvm.ptr<ptr<struct<"Qubit", opaque>>>
    %9 = llvm.load %8 : !llvm.ptr<ptr<struct<"Qubit", opaque>>>
    llvm.call @__quantum__qis__x(%9) : (!llvm.ptr<struct<"Qubit", opaque>>) -> ()
    %10 = llvm.mlir.constant(2 : i64) : i64
    %11 = llvm.call @__quantum__rt__array_get_element_ptr_1d(%1, %10) : (!llvm.ptr<struct<"Array", opaque>>, i64) -> !llvm.ptr<i8>
    %12 = llvm.bitcast %11 : !llvm.ptr<i8> to !llvm.ptr<ptr<struct<"Qubit", opaque>>>
    %13 = llvm.load %12 : !llvm.ptr<ptr<struct<"Qubit", opaque>>>
    llvm.call @__quantum__qis__x(%13) : (!llvm.ptr<struct<"Qubit", opaque>>) -> ()
    llvm.call @__quantum__rt__qubit_release_array(%1) : (!llvm.ptr<struct<"Array", opaque>>) -> ()
    llvm.return
  }
}


// -----// IR Dump After QIRToQIRProfile (convert-to-qir-profile) ('builtin.module' operation) //----- //
module attributes {quake.mangled_name_map = {__nvqpp__mlirgen__kernel = "__nvqpp__mlirgen__kernel_PyKernelEntryPointRewrite"}} {
  llvm.func @__quantum__qis__x__body(!llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__qis__cnot__body(!llvm.ptr<struct<"Qubit", opaque>>, !llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__qis__cz__body(!llvm.ptr<struct<"Qubit", opaque>>, !llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__rt__result_record_output(!llvm.ptr<struct<"Result", opaque>>, !llvm.ptr<i8>)
  llvm.func @__quantum__qis__read_result__body(!llvm.ptr<struct<"Result", opaque>>) -> i1
  llvm.func @__quantum__qis__mz__body(!llvm.ptr<struct<"Qubit", opaque>>, !llvm.ptr<struct<"Result", opaque>>) attributes {passthrough = ["irreversible"]}
  llvm.func @__quantum__qis__cz(!llvm.ptr<struct<"Qubit", opaque>>, !llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__qis__cnot(!llvm.ptr<struct<"Qubit", opaque>>, !llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__rt__qubit_release_array(!llvm.ptr<struct<"Array", opaque>>)
  llvm.func @__quantum__qis__x(!llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__rt__array_get_element_ptr_1d(!llvm.ptr<struct<"Array", opaque>>, i64) -> !llvm.ptr<i8>
  llvm.func @__quantum__rt__qubit_allocate_array(i64) -> !llvm.ptr<struct<"Array", opaque>>
  llvm.func @__nvqpp__mlirgen__kernel() attributes {"cudaq-entrypoint", passthrough = ["entry_point", ["qir_profiles", "base_profile"], ["output_labeling_schema", "schema_id"], ["output_names", "[[]]"], ["requiredQubits", "3"], ["requiredResults", "0"]]} {
    %0 = llvm.mlir.constant(0 : i64) : i64
    %1 = llvm.mlir.constant(2 : i64) : i64
    %2 = llvm.mlir.constant(1 : i64) : i64
    %3 = llvm.add %0, %0  : i64
    %4 = llvm.inttoptr %3 : i64 to !llvm.ptr<struct<"Qubit", opaque>>
    llvm.call @__quantum__qis__x__body(%4) : (!llvm.ptr<struct<"Qubit", opaque>>) -> ()
    %5 = llvm.add %0, %2  : i64
    %6 = llvm.inttoptr %5 : i64 to !llvm.ptr<struct<"Qubit", opaque>>
    llvm.call @__quantum__qis__x__body(%6) : (!llvm.ptr<struct<"Qubit", opaque>>) -> ()
    %7 = llvm.add %0, %1  : i64
    %8 = llvm.inttoptr %7 : i64 to !llvm.ptr<struct<"Qubit", opaque>>
    llvm.call @__quantum__qis__x__body(%8) : (!llvm.ptr<struct<"Qubit", opaque>>) -> ()
    llvm.return
  }
}


// -----// IR Dump Before VerifyQIRProfile (verify-qir-profile) ('llvm.func' operation: @__quantum__qis__x__body) //----- //
module attributes {quake.mangled_name_map = {__nvqpp__mlirgen__kernel = "__nvqpp__mlirgen__kernel_PyKernelEntryPointRewrite"}} {
  llvm.func @__quantum__qis__x__body(!llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__qis__cnot__body(!llvm.ptr<struct<"Qubit", opaque>>, !llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__qis__cz__body(!llvm.ptr<struct<"Qubit", opaque>>, !llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__rt__result_record_output(!llvm.ptr<struct<"Result", opaque>>, !llvm.ptr<i8>)
  llvm.func @__quantum__qis__read_result__body(!llvm.ptr<struct<"Result", opaque>>) -> i1
  llvm.func @__quantum__qis__mz__body(!llvm.ptr<struct<"Qubit", opaque>>, !llvm.ptr<struct<"Result", opaque>>) attributes {passthrough = ["irreversible"]}
  llvm.func @__quantum__qis__cz(!llvm.ptr<struct<"Qubit", opaque>>, !llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__qis__cnot(!llvm.ptr<struct<"Qubit", opaque>>, !llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__rt__qubit_release_array(!llvm.ptr<struct<"Array", opaque>>)
  llvm.func @__quantum__qis__x(!llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__rt__array_get_element_ptr_1d(!llvm.ptr<struct<"Array", opaque>>, i64) -> !llvm.ptr<i8>
  llvm.func @__quantum__rt__qubit_allocate_array(i64) -> !llvm.ptr<struct<"Array", opaque>>
  llvm.func @__nvqpp__mlirgen__kernel() attributes {"cudaq-entrypoint", passthrough = ["entry_point", ["qir_profiles", "base_profile"], ["output_labeling_schema", "schema_id"], ["output_names", "[[]]"], ["requiredQubits", "3"], ["requiredResults", "0"]]} {
    %0 = llvm.mlir.constant(0 : i64) : i64
    %1 = llvm.mlir.constant(2 : i64) : i64
    %2 = llvm.mlir.constant(1 : i64) : i64
    %3 = llvm.add %0, %0  : i64
    %4 = llvm.inttoptr %3 : i64 to !llvm.ptr<struct<"Qubit", opaque>>
    llvm.call @__quantum__qis__x__body(%4) : (!llvm.ptr<struct<"Qubit", opaque>>) -> ()
    %5 = llvm.add %0, %2  : i64
    %6 = llvm.inttoptr %5 : i64 to !llvm.ptr<struct<"Qubit", opaque>>
    llvm.call @__quantum__qis__x__body(%6) : (!llvm.ptr<struct<"Qubit", opaque>>) -> ()
    %7 = llvm.add %0, %1  : i64
    %8 = llvm.inttoptr %7 : i64 to !llvm.ptr<struct<"Qubit", opaque>>
    llvm.call @__quantum__qis__x__body(%8) : (!llvm.ptr<struct<"Qubit", opaque>>) -> ()
    llvm.return
  }
}


// -----// IR Dump Before VerifyQIRProfile (verify-qir-profile) ('llvm.func' operation: @__quantum__qis__cnot__body) //----- //
module attributes {quake.mangled_name_map = {__nvqpp__mlirgen__kernel = "__nvqpp__mlirgen__kernel_PyKernelEntryPointRewrite"}} {
  llvm.func @__quantum__qis__x__body(!llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__qis__cnot__body(!llvm.ptr<struct<"Qubit", opaque>>, !llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__qis__cz__body(!llvm.ptr<struct<"Qubit", opaque>>, !llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__rt__result_record_output(!llvm.ptr<struct<"Result", opaque>>, !llvm.ptr<i8>)
  llvm.func @__quantum__qis__read_result__body(!llvm.ptr<struct<"Result", opaque>>) -> i1
  llvm.func @__quantum__qis__mz__body(!llvm.ptr<struct<"Qubit", opaque>>, !llvm.ptr<struct<"Result", opaque>>) attributes {passthrough = ["irreversible"]}
  llvm.func @__quantum__qis__cz(!llvm.ptr<struct<"Qubit", opaque>>, !llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__qis__cnot(!llvm.ptr<struct<"Qubit", opaque>>, !llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__rt__qubit_release_array(!llvm.ptr<struct<"Array", opaque>>)
  llvm.func @__quantum__qis__x(!llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__rt__array_get_element_ptr_1d(!llvm.ptr<struct<"Array", opaque>>, i64) -> !llvm.ptr<i8>
  llvm.func @__quantum__rt__qubit_allocate_array(i64) -> !llvm.ptr<struct<"Array", opaque>>
  llvm.func @__nvqpp__mlirgen__kernel() attributes {"cudaq-entrypoint", passthrough = ["entry_point", ["qir_profiles", "base_profile"], ["output_labeling_schema", "schema_id"], ["output_names", "[[]]"], ["requiredQubits", "3"], ["requiredResults", "0"]]} {
    %0 = llvm.mlir.constant(0 : i64) : i64
    %1 = llvm.mlir.constant(2 : i64) : i64
    %2 = llvm.mlir.constant(1 : i64) : i64
    %3 = llvm.add %0, %0  : i64
    %4 = llvm.inttoptr %3 : i64 to !llvm.ptr<struct<"Qubit", opaque>>
    llvm.call @__quantum__qis__x__body(%4) : (!llvm.ptr<struct<"Qubit", opaque>>) -> ()
    %5 = llvm.add %0, %2  : i64
    %6 = llvm.inttoptr %5 : i64 to !llvm.ptr<struct<"Qubit", opaque>>
    llvm.call @__quantum__qis__x__body(%6) : (!llvm.ptr<struct<"Qubit", opaque>>) -> ()
    %7 = llvm.add %0, %1  : i64
    %8 = llvm.inttoptr %7 : i64 to !llvm.ptr<struct<"Qubit", opaque>>
    llvm.call @__quantum__qis__x__body(%8) : (!llvm.ptr<struct<"Qubit", opaque>>) -> ()
    llvm.return
  }
}


// -----// IR Dump Before VerifyQIRProfile (verify-qir-profile) ('llvm.func' operation: @__quantum__qis__cz__body) //----- //
module attributes {quake.mangled_name_map = {__nvqpp__mlirgen__kernel = "__nvqpp__mlirgen__kernel_PyKernelEntryPointRewrite"}} {
  llvm.func @__quantum__qis__x__body(!llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__qis__cnot__body(!llvm.ptr<struct<"Qubit", opaque>>, !llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__qis__cz__body(!llvm.ptr<struct<"Qubit", opaque>>, !llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__rt__result_record_output(!llvm.ptr<struct<"Result", opaque>>, !llvm.ptr<i8>)
  llvm.func @__quantum__qis__read_result__body(!llvm.ptr<struct<"Result", opaque>>) -> i1
  llvm.func @__quantum__qis__mz__body(!llvm.ptr<struct<"Qubit", opaque>>, !llvm.ptr<struct<"Result", opaque>>) attributes {passthrough = ["irreversible"]}
  llvm.func @__quantum__qis__cz(!llvm.ptr<struct<"Qubit", opaque>>, !llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__qis__cnot(!llvm.ptr<struct<"Qubit", opaque>>, !llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__rt__qubit_release_array(!llvm.ptr<struct<"Array", opaque>>)
  llvm.func @__quantum__qis__x(!llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__rt__array_get_element_ptr_1d(!llvm.ptr<struct<"Array", opaque>>, i64) -> !llvm.ptr<i8>
  llvm.func @__quantum__rt__qubit_allocate_array(i64) -> !llvm.ptr<struct<"Array", opaque>>
  llvm.func @__nvqpp__mlirgen__kernel() attributes {"cudaq-entrypoint", passthrough = ["entry_point", ["qir_profiles", "base_profile"], ["output_labeling_schema", "schema_id"], ["output_names", "[[]]"], ["requiredQubits", "3"], ["requiredResults", "0"]]} {
    %0 = llvm.mlir.constant(0 : i64) : i64
    %1 = llvm.mlir.constant(2 : i64) : i64
    %2 = llvm.mlir.constant(1 : i64) : i64
    %3 = llvm.add %0, %0  : i64
    %4 = llvm.inttoptr %3 : i64 to !llvm.ptr<struct<"Qubit", opaque>>
    llvm.call @__quantum__qis__x__body(%4) : (!llvm.ptr<struct<"Qubit", opaque>>) -> ()
    %5 = llvm.add %0, %2  : i64
    %6 = llvm.inttoptr %5 : i64 to !llvm.ptr<struct<"Qubit", opaque>>
    llvm.call @__quantum__qis__x__body(%6) : (!llvm.ptr<struct<"Qubit", opaque>>) -> ()
    %7 = llvm.add %0, %1  : i64
    %8 = llvm.inttoptr %7 : i64 to !llvm.ptr<struct<"Qubit", opaque>>
    llvm.call @__quantum__qis__x__body(%8) : (!llvm.ptr<struct<"Qubit", opaque>>) -> ()
    llvm.return
  }
}


// -----// IR Dump Before VerifyQIRProfile (verify-qir-profile) ('llvm.func' operation: @__quantum__rt__result_record_output) //----- //
module attributes {quake.mangled_name_map = {__nvqpp__mlirgen__kernel = "__nvqpp__mlirgen__kernel_PyKernelEntryPointRewrite"}} {
  llvm.func @__quantum__qis__x__body(!llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__qis__cnot__body(!llvm.ptr<struct<"Qubit", opaque>>, !llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__qis__cz__body(!llvm.ptr<struct<"Qubit", opaque>>, !llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__rt__result_record_output(!llvm.ptr<struct<"Result", opaque>>, !llvm.ptr<i8>)
  llvm.func @__quantum__qis__read_result__body(!llvm.ptr<struct<"Result", opaque>>) -> i1
  llvm.func @__quantum__qis__mz__body(!llvm.ptr<struct<"Qubit", opaque>>, !llvm.ptr<struct<"Result", opaque>>) attributes {passthrough = ["irreversible"]}
  llvm.func @__quantum__qis__cz(!llvm.ptr<struct<"Qubit", opaque>>, !llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__qis__cnot(!llvm.ptr<struct<"Qubit", opaque>>, !llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__rt__qubit_release_array(!llvm.ptr<struct<"Array", opaque>>)
  llvm.func @__quantum__qis__x(!llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__rt__array_get_element_ptr_1d(!llvm.ptr<struct<"Array", opaque>>, i64) -> !llvm.ptr<i8>
  llvm.func @__quantum__rt__qubit_allocate_array(i64) -> !llvm.ptr<struct<"Array", opaque>>
  llvm.func @__nvqpp__mlirgen__kernel() attributes {"cudaq-entrypoint", passthrough = ["entry_point", ["qir_profiles", "base_profile"], ["output_labeling_schema", "schema_id"], ["output_names", "[[]]"], ["requiredQubits", "3"], ["requiredResults", "0"]]} {
    %0 = llvm.mlir.constant(0 : i64) : i64
    %1 = llvm.mlir.constant(2 : i64) : i64
    %2 = llvm.mlir.constant(1 : i64) : i64
    %3 = llvm.add %0, %0  : i64
    %4 = llvm.inttoptr %3 : i64 to !llvm.ptr<struct<"Qubit", opaque>>
    llvm.call @__quantum__qis__x__body(%4) : (!llvm.ptr<struct<"Qubit", opaque>>) -> ()
    %5 = llvm.add %0, %2  : i64
    %6 = llvm.inttoptr %5 : i64 to !llvm.ptr<struct<"Qubit", opaque>>
    llvm.call @__quantum__qis__x__body(%6) : (!llvm.ptr<struct<"Qubit", opaque>>) -> ()
    %7 = llvm.add %0, %1  : i64
    %8 = llvm.inttoptr %7 : i64 to !llvm.ptr<struct<"Qubit", opaque>>
    llvm.call @__quantum__qis__x__body(%8) : (!llvm.ptr<struct<"Qubit", opaque>>) -> ()
    llvm.return
  }
}


// -----// IR Dump Before VerifyQIRProfile (verify-qir-profile) ('llvm.func' operation: @__quantum__qis__read_result__body) //----- //
module attributes {quake.mangled_name_map = {__nvqpp__mlirgen__kernel = "__nvqpp__mlirgen__kernel_PyKernelEntryPointRewrite"}} {
  llvm.func @__quantum__qis__x__body(!llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__qis__cnot__body(!llvm.ptr<struct<"Qubit", opaque>>, !llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__qis__cz__body(!llvm.ptr<struct<"Qubit", opaque>>, !llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__rt__result_record_output(!llvm.ptr<struct<"Result", opaque>>, !llvm.ptr<i8>)
  llvm.func @__quantum__qis__read_result__body(!llvm.ptr<struct<"Result", opaque>>) -> i1
  llvm.func @__quantum__qis__mz__body(!llvm.ptr<struct<"Qubit", opaque>>, !llvm.ptr<struct<"Result", opaque>>) attributes {passthrough = ["irreversible"]}
  llvm.func @__quantum__qis__cz(!llvm.ptr<struct<"Qubit", opaque>>, !llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__qis__cnot(!llvm.ptr<struct<"Qubit", opaque>>, !llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__rt__qubit_release_array(!llvm.ptr<struct<"Array", opaque>>)
  llvm.func @__quantum__qis__x(!llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__rt__array_get_element_ptr_1d(!llvm.ptr<struct<"Array", opaque>>, i64) -> !llvm.ptr<i8>
  llvm.func @__quantum__rt__qubit_allocate_array(i64) -> !llvm.ptr<struct<"Array", opaque>>
  llvm.func @__nvqpp__mlirgen__kernel() attributes {"cudaq-entrypoint", passthrough = ["entry_point", ["qir_profiles", "base_profile"], ["output_labeling_schema", "schema_id"], ["output_names", "[[]]"], ["requiredQubits", "3"], ["requiredResults", "0"]]} {
    %0 = llvm.mlir.constant(0 : i64) : i64
    %1 = llvm.mlir.constant(2 : i64) : i64
    %2 = llvm.mlir.constant(1 : i64) : i64
    %3 = llvm.add %0, %0  : i64
    %4 = llvm.inttoptr %3 : i64 to !llvm.ptr<struct<"Qubit", opaque>>
    llvm.call @__quantum__qis__x__body(%4) : (!llvm.ptr<struct<"Qubit", opaque>>) -> ()
    %5 = llvm.add %0, %2  : i64
    %6 = llvm.inttoptr %5 : i64 to !llvm.ptr<struct<"Qubit", opaque>>
    llvm.call @__quantum__qis__x__body(%6) : (!llvm.ptr<struct<"Qubit", opaque>>) -> ()
    %7 = llvm.add %0, %1  : i64
    %8 = llvm.inttoptr %7 : i64 to !llvm.ptr<struct<"Qubit", opaque>>
    llvm.call @__quantum__qis__x__body(%8) : (!llvm.ptr<struct<"Qubit", opaque>>) -> ()
    llvm.return
  }
}


// -----// IR Dump Before VerifyQIRProfile (verify-qir-profile) ('llvm.func' operation: @__quantum__qis__mz__body) //----- //
module attributes {quake.mangled_name_map = {__nvqpp__mlirgen__kernel = "__nvqpp__mlirgen__kernel_PyKernelEntryPointRewrite"}} {
  llvm.func @__quantum__qis__x__body(!llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__qis__cnot__body(!llvm.ptr<struct<"Qubit", opaque>>, !llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__qis__cz__body(!llvm.ptr<struct<"Qubit", opaque>>, !llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__rt__result_record_output(!llvm.ptr<struct<"Result", opaque>>, !llvm.ptr<i8>)
  llvm.func @__quantum__qis__read_result__body(!llvm.ptr<struct<"Result", opaque>>) -> i1
  llvm.func @__quantum__qis__mz__body(!llvm.ptr<struct<"Qubit", opaque>>, !llvm.ptr<struct<"Result", opaque>>) attributes {passthrough = ["irreversible"]}
  llvm.func @__quantum__qis__cz(!llvm.ptr<struct<"Qubit", opaque>>, !llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__qis__cnot(!llvm.ptr<struct<"Qubit", opaque>>, !llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__rt__qubit_release_array(!llvm.ptr<struct<"Array", opaque>>)
  llvm.func @__quantum__qis__x(!llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__rt__array_get_element_ptr_1d(!llvm.ptr<struct<"Array", opaque>>, i64) -> !llvm.ptr<i8>
  llvm.func @__quantum__rt__qubit_allocate_array(i64) -> !llvm.ptr<struct<"Array", opaque>>
  llvm.func @__nvqpp__mlirgen__kernel() attributes {"cudaq-entrypoint", passthrough = ["entry_point", ["qir_profiles", "base_profile"], ["output_labeling_schema", "schema_id"], ["output_names", "[[]]"], ["requiredQubits", "3"], ["requiredResults", "0"]]} {
    %0 = llvm.mlir.constant(0 : i64) : i64
    %1 = llvm.mlir.constant(2 : i64) : i64
    %2 = llvm.mlir.constant(1 : i64) : i64
    %3 = llvm.add %0, %0  : i64
    %4 = llvm.inttoptr %3 : i64 to !llvm.ptr<struct<"Qubit", opaque>>
    llvm.call @__quantum__qis__x__body(%4) : (!llvm.ptr<struct<"Qubit", opaque>>) -> ()
    %5 = llvm.add %0, %2  : i64
    %6 = llvm.inttoptr %5 : i64 to !llvm.ptr<struct<"Qubit", opaque>>
    llvm.call @__quantum__qis__x__body(%6) : (!llvm.ptr<struct<"Qubit", opaque>>) -> ()
    %7 = llvm.add %0, %1  : i64
    %8 = llvm.inttoptr %7 : i64 to !llvm.ptr<struct<"Qubit", opaque>>
    llvm.call @__quantum__qis__x__body(%8) : (!llvm.ptr<struct<"Qubit", opaque>>) -> ()
    llvm.return
  }
}


// -----// IR Dump Before VerifyQIRProfile (verify-qir-profile) ('llvm.func' operation: @__quantum__qis__cz) //----- //
module attributes {quake.mangled_name_map = {__nvqpp__mlirgen__kernel = "__nvqpp__mlirgen__kernel_PyKernelEntryPointRewrite"}} {
  llvm.func @__quantum__qis__x__body(!llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__qis__cnot__body(!llvm.ptr<struct<"Qubit", opaque>>, !llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__qis__cz__body(!llvm.ptr<struct<"Qubit", opaque>>, !llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__rt__result_record_output(!llvm.ptr<struct<"Result", opaque>>, !llvm.ptr<i8>)
  llvm.func @__quantum__qis__read_result__body(!llvm.ptr<struct<"Result", opaque>>) -> i1
  llvm.func @__quantum__qis__mz__body(!llvm.ptr<struct<"Qubit", opaque>>, !llvm.ptr<struct<"Result", opaque>>) attributes {passthrough = ["irreversible"]}
  llvm.func @__quantum__qis__cz(!llvm.ptr<struct<"Qubit", opaque>>, !llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__qis__cnot(!llvm.ptr<struct<"Qubit", opaque>>, !llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__rt__qubit_release_array(!llvm.ptr<struct<"Array", opaque>>)
  llvm.func @__quantum__qis__x(!llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__rt__array_get_element_ptr_1d(!llvm.ptr<struct<"Array", opaque>>, i64) -> !llvm.ptr<i8>
  llvm.func @__quantum__rt__qubit_allocate_array(i64) -> !llvm.ptr<struct<"Array", opaque>>
  llvm.func @__nvqpp__mlirgen__kernel() attributes {"cudaq-entrypoint", passthrough = ["entry_point", ["qir_profiles", "base_profile"], ["output_labeling_schema", "schema_id"], ["output_names", "[[]]"], ["requiredQubits", "3"], ["requiredResults", "0"]]} {
    %0 = llvm.mlir.constant(0 : i64) : i64
    %1 = llvm.mlir.constant(2 : i64) : i64
    %2 = llvm.mlir.constant(1 : i64) : i64
    %3 = llvm.add %0, %0  : i64
    %4 = llvm.inttoptr %3 : i64 to !llvm.ptr<struct<"Qubit", opaque>>
    llvm.call @__quantum__qis__x__body(%4) : (!llvm.ptr<struct<"Qubit", opaque>>) -> ()
    %5 = llvm.add %0, %2  : i64
    %6 = llvm.inttoptr %5 : i64 to !llvm.ptr<struct<"Qubit", opaque>>
    llvm.call @__quantum__qis__x__body(%6) : (!llvm.ptr<struct<"Qubit", opaque>>) -> ()
    %7 = llvm.add %0, %1  : i64
    %8 = llvm.inttoptr %7 : i64 to !llvm.ptr<struct<"Qubit", opaque>>
    llvm.call @__quantum__qis__x__body(%8) : (!llvm.ptr<struct<"Qubit", opaque>>) -> ()
    llvm.return
  }
}


// -----// IR Dump Before VerifyQIRProfile (verify-qir-profile) ('llvm.func' operation: @__quantum__qis__cnot) //----- //
module attributes {quake.mangled_name_map = {__nvqpp__mlirgen__kernel = "__nvqpp__mlirgen__kernel_PyKernelEntryPointRewrite"}} {
  llvm.func @__quantum__qis__x__body(!llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__qis__cnot__body(!llvm.ptr<struct<"Qubit", opaque>>, !llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__qis__cz__body(!llvm.ptr<struct<"Qubit", opaque>>, !llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__rt__result_record_output(!llvm.ptr<struct<"Result", opaque>>, !llvm.ptr<i8>)
  llvm.func @__quantum__qis__read_result__body(!llvm.ptr<struct<"Result", opaque>>) -> i1
  llvm.func @__quantum__qis__mz__body(!llvm.ptr<struct<"Qubit", opaque>>, !llvm.ptr<struct<"Result", opaque>>) attributes {passthrough = ["irreversible"]}
  llvm.func @__quantum__qis__cz(!llvm.ptr<struct<"Qubit", opaque>>, !llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__qis__cnot(!llvm.ptr<struct<"Qubit", opaque>>, !llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__rt__qubit_release_array(!llvm.ptr<struct<"Array", opaque>>)
  llvm.func @__quantum__qis__x(!llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__rt__array_get_element_ptr_1d(!llvm.ptr<struct<"Array", opaque>>, i64) -> !llvm.ptr<i8>
  llvm.func @__quantum__rt__qubit_allocate_array(i64) -> !llvm.ptr<struct<"Array", opaque>>
  llvm.func @__nvqpp__mlirgen__kernel() attributes {"cudaq-entrypoint", passthrough = ["entry_point", ["qir_profiles", "base_profile"], ["output_labeling_schema", "schema_id"], ["output_names", "[[]]"], ["requiredQubits", "3"], ["requiredResults", "0"]]} {
    %0 = llvm.mlir.constant(0 : i64) : i64
    %1 = llvm.mlir.constant(2 : i64) : i64
    %2 = llvm.mlir.constant(1 : i64) : i64
    %3 = llvm.add %0, %0  : i64
    %4 = llvm.inttoptr %3 : i64 to !llvm.ptr<struct<"Qubit", opaque>>
    llvm.call @__quantum__qis__x__body(%4) : (!llvm.ptr<struct<"Qubit", opaque>>) -> ()
    %5 = llvm.add %0, %2  : i64
    %6 = llvm.inttoptr %5 : i64 to !llvm.ptr<struct<"Qubit", opaque>>
    llvm.call @__quantum__qis__x__body(%6) : (!llvm.ptr<struct<"Qubit", opaque>>) -> ()
    %7 = llvm.add %0, %1  : i64
    %8 = llvm.inttoptr %7 : i64 to !llvm.ptr<struct<"Qubit", opaque>>
    llvm.call @__quantum__qis__x__body(%8) : (!llvm.ptr<struct<"Qubit", opaque>>) -> ()
    llvm.return
  }
}


// -----// IR Dump Before VerifyQIRProfile (verify-qir-profile) ('llvm.func' operation: @__quantum__rt__qubit_release_array) //----- //
module attributes {quake.mangled_name_map = {__nvqpp__mlirgen__kernel = "__nvqpp__mlirgen__kernel_PyKernelEntryPointRewrite"}} {
  llvm.func @__quantum__qis__x__body(!llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__qis__cnot__body(!llvm.ptr<struct<"Qubit", opaque>>, !llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__qis__cz__body(!llvm.ptr<struct<"Qubit", opaque>>, !llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__rt__result_record_output(!llvm.ptr<struct<"Result", opaque>>, !llvm.ptr<i8>)
  llvm.func @__quantum__qis__read_result__body(!llvm.ptr<struct<"Result", opaque>>) -> i1
  llvm.func @__quantum__qis__mz__body(!llvm.ptr<struct<"Qubit", opaque>>, !llvm.ptr<struct<"Result", opaque>>) attributes {passthrough = ["irreversible"]}
  llvm.func @__quantum__qis__cz(!llvm.ptr<struct<"Qubit", opaque>>, !llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__qis__cnot(!llvm.ptr<struct<"Qubit", opaque>>, !llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__rt__qubit_release_array(!llvm.ptr<struct<"Array", opaque>>)
  llvm.func @__quantum__qis__x(!llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__rt__array_get_element_ptr_1d(!llvm.ptr<struct<"Array", opaque>>, i64) -> !llvm.ptr<i8>
  llvm.func @__quantum__rt__qubit_allocate_array(i64) -> !llvm.ptr<struct<"Array", opaque>>
  llvm.func @__nvqpp__mlirgen__kernel() attributes {"cudaq-entrypoint", passthrough = ["entry_point", ["qir_profiles", "base_profile"], ["output_labeling_schema", "schema_id"], ["output_names", "[[]]"], ["requiredQubits", "3"], ["requiredResults", "0"]]} {
    %0 = llvm.mlir.constant(0 : i64) : i64
    %1 = llvm.mlir.constant(2 : i64) : i64
    %2 = llvm.mlir.constant(1 : i64) : i64
    %3 = llvm.add %0, %0  : i64
    %4 = llvm.inttoptr %3 : i64 to !llvm.ptr<struct<"Qubit", opaque>>
    llvm.call @__quantum__qis__x__body(%4) : (!llvm.ptr<struct<"Qubit", opaque>>) -> ()
    %5 = llvm.add %0, %2  : i64
    %6 = llvm.inttoptr %5 : i64 to !llvm.ptr<struct<"Qubit", opaque>>
    llvm.call @__quantum__qis__x__body(%6) : (!llvm.ptr<struct<"Qubit", opaque>>) -> ()
    %7 = llvm.add %0, %1  : i64
    %8 = llvm.inttoptr %7 : i64 to !llvm.ptr<struct<"Qubit", opaque>>
    llvm.call @__quantum__qis__x__body(%8) : (!llvm.ptr<struct<"Qubit", opaque>>) -> ()
    llvm.return
  }
}


// -----// IR Dump Before VerifyQIRProfile (verify-qir-profile) ('llvm.func' operation: @__quantum__qis__x) //----- //
module attributes {quake.mangled_name_map = {__nvqpp__mlirgen__kernel = "__nvqpp__mlirgen__kernel_PyKernelEntryPointRewrite"}} {
  llvm.func @__quantum__qis__x__body(!llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__qis__cnot__body(!llvm.ptr<struct<"Qubit", opaque>>, !llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__qis__cz__body(!llvm.ptr<struct<"Qubit", opaque>>, !llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__rt__result_record_output(!llvm.ptr<struct<"Result", opaque>>, !llvm.ptr<i8>)
  llvm.func @__quantum__qis__read_result__body(!llvm.ptr<struct<"Result", opaque>>) -> i1
  llvm.func @__quantum__qis__mz__body(!llvm.ptr<struct<"Qubit", opaque>>, !llvm.ptr<struct<"Result", opaque>>) attributes {passthrough = ["irreversible"]}
  llvm.func @__quantum__qis__cz(!llvm.ptr<struct<"Qubit", opaque>>, !llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__qis__cnot(!llvm.ptr<struct<"Qubit", opaque>>, !llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__rt__qubit_release_array(!llvm.ptr<struct<"Array", opaque>>)
  llvm.func @__quantum__qis__x(!llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__rt__array_get_element_ptr_1d(!llvm.ptr<struct<"Array", opaque>>, i64) -> !llvm.ptr<i8>
  llvm.func @__quantum__rt__qubit_allocate_array(i64) -> !llvm.ptr<struct<"Array", opaque>>
  llvm.func @__nvqpp__mlirgen__kernel() attributes {"cudaq-entrypoint", passthrough = ["entry_point", ["qir_profiles", "base_profile"], ["output_labeling_schema", "schema_id"], ["output_names", "[[]]"], ["requiredQubits", "3"], ["requiredResults", "0"]]} {
    %0 = llvm.mlir.constant(0 : i64) : i64
    %1 = llvm.mlir.constant(2 : i64) : i64
    %2 = llvm.mlir.constant(1 : i64) : i64
    %3 = llvm.add %0, %0  : i64
    %4 = llvm.inttoptr %3 : i64 to !llvm.ptr<struct<"Qubit", opaque>>
    llvm.call @__quantum__qis__x__body(%4) : (!llvm.ptr<struct<"Qubit", opaque>>) -> ()
    %5 = llvm.add %0, %2  : i64
    %6 = llvm.inttoptr %5 : i64 to !llvm.ptr<struct<"Qubit", opaque>>
    llvm.call @__quantum__qis__x__body(%6) : (!llvm.ptr<struct<"Qubit", opaque>>) -> ()
    %7 = llvm.add %0, %1  : i64
    %8 = llvm.inttoptr %7 : i64 to !llvm.ptr<struct<"Qubit", opaque>>
    llvm.call @__quantum__qis__x__body(%8) : (!llvm.ptr<struct<"Qubit", opaque>>) -> ()
    llvm.return
  }
}


// -----// IR Dump Before VerifyQIRProfile (verify-qir-profile) ('llvm.func' operation: @__quantum__rt__array_get_element_ptr_1d) //----- //
module attributes {quake.mangled_name_map = {__nvqpp__mlirgen__kernel = "__nvqpp__mlirgen__kernel_PyKernelEntryPointRewrite"}} {
  llvm.func @__quantum__qis__x__body(!llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__qis__cnot__body(!llvm.ptr<struct<"Qubit", opaque>>, !llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__qis__cz__body(!llvm.ptr<struct<"Qubit", opaque>>, !llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__rt__result_record_output(!llvm.ptr<struct<"Result", opaque>>, !llvm.ptr<i8>)
  llvm.func @__quantum__qis__read_result__body(!llvm.ptr<struct<"Result", opaque>>) -> i1
  llvm.func @__quantum__qis__mz__body(!llvm.ptr<struct<"Qubit", opaque>>, !llvm.ptr<struct<"Result", opaque>>) attributes {passthrough = ["irreversible"]}
  llvm.func @__quantum__qis__cz(!llvm.ptr<struct<"Qubit", opaque>>, !llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__qis__cnot(!llvm.ptr<struct<"Qubit", opaque>>, !llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__rt__qubit_release_array(!llvm.ptr<struct<"Array", opaque>>)
  llvm.func @__quantum__qis__x(!llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__rt__array_get_element_ptr_1d(!llvm.ptr<struct<"Array", opaque>>, i64) -> !llvm.ptr<i8>
  llvm.func @__quantum__rt__qubit_allocate_array(i64) -> !llvm.ptr<struct<"Array", opaque>>
  llvm.func @__nvqpp__mlirgen__kernel() attributes {"cudaq-entrypoint", passthrough = ["entry_point", ["qir_profiles", "base_profile"], ["output_labeling_schema", "schema_id"], ["output_names", "[[]]"], ["requiredQubits", "3"], ["requiredResults", "0"]]} {
    %0 = llvm.mlir.constant(0 : i64) : i64
    %1 = llvm.mlir.constant(2 : i64) : i64
    %2 = llvm.mlir.constant(1 : i64) : i64
    %3 = llvm.add %0, %0  : i64
    %4 = llvm.inttoptr %3 : i64 to !llvm.ptr<struct<"Qubit", opaque>>
    llvm.call @__quantum__qis__x__body(%4) : (!llvm.ptr<struct<"Qubit", opaque>>) -> ()
    %5 = llvm.add %0, %2  : i64
    %6 = llvm.inttoptr %5 : i64 to !llvm.ptr<struct<"Qubit", opaque>>
    llvm.call @__quantum__qis__x__body(%6) : (!llvm.ptr<struct<"Qubit", opaque>>) -> ()
    %7 = llvm.add %0, %1  : i64
    %8 = llvm.inttoptr %7 : i64 to !llvm.ptr<struct<"Qubit", opaque>>
    llvm.call @__quantum__qis__x__body(%8) : (!llvm.ptr<struct<"Qubit", opaque>>) -> ()
    llvm.return
  }
}


// -----// IR Dump Before VerifyQIRProfile (verify-qir-profile) ('llvm.func' operation: @__quantum__rt__qubit_allocate_array) //----- //
module attributes {quake.mangled_name_map = {__nvqpp__mlirgen__kernel = "__nvqpp__mlirgen__kernel_PyKernelEntryPointRewrite"}} {
  llvm.func @__quantum__qis__x__body(!llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__qis__cnot__body(!llvm.ptr<struct<"Qubit", opaque>>, !llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__qis__cz__body(!llvm.ptr<struct<"Qubit", opaque>>, !llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__rt__result_record_output(!llvm.ptr<struct<"Result", opaque>>, !llvm.ptr<i8>)
  llvm.func @__quantum__qis__read_result__body(!llvm.ptr<struct<"Result", opaque>>) -> i1
  llvm.func @__quantum__qis__mz__body(!llvm.ptr<struct<"Qubit", opaque>>, !llvm.ptr<struct<"Result", opaque>>) attributes {passthrough = ["irreversible"]}
  llvm.func @__quantum__qis__cz(!llvm.ptr<struct<"Qubit", opaque>>, !llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__qis__cnot(!llvm.ptr<struct<"Qubit", opaque>>, !llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__rt__qubit_release_array(!llvm.ptr<struct<"Array", opaque>>)
  llvm.func @__quantum__qis__x(!llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__rt__array_get_element_ptr_1d(!llvm.ptr<struct<"Array", opaque>>, i64) -> !llvm.ptr<i8>
  llvm.func @__quantum__rt__qubit_allocate_array(i64) -> !llvm.ptr<struct<"Array", opaque>>
  llvm.func @__nvqpp__mlirgen__kernel() attributes {"cudaq-entrypoint", passthrough = ["entry_point", ["qir_profiles", "base_profile"], ["output_labeling_schema", "schema_id"], ["output_names", "[[]]"], ["requiredQubits", "3"], ["requiredResults", "0"]]} {
    %0 = llvm.mlir.constant(0 : i64) : i64
    %1 = llvm.mlir.constant(2 : i64) : i64
    %2 = llvm.mlir.constant(1 : i64) : i64
    %3 = llvm.add %0, %0  : i64
    %4 = llvm.inttoptr %3 : i64 to !llvm.ptr<struct<"Qubit", opaque>>
    llvm.call @__quantum__qis__x__body(%4) : (!llvm.ptr<struct<"Qubit", opaque>>) -> ()
    %5 = llvm.add %0, %2  : i64
    %6 = llvm.inttoptr %5 : i64 to !llvm.ptr<struct<"Qubit", opaque>>
    llvm.call @__quantum__qis__x__body(%6) : (!llvm.ptr<struct<"Qubit", opaque>>) -> ()
    %7 = llvm.add %0, %1  : i64
    %8 = llvm.inttoptr %7 : i64 to !llvm.ptr<struct<"Qubit", opaque>>
    llvm.call @__quantum__qis__x__body(%8) : (!llvm.ptr<struct<"Qubit", opaque>>) -> ()
    llvm.return
  }
}


// -----// IR Dump Before VerifyQIRProfile (verify-qir-profile) ('llvm.func' operation: @__nvqpp__mlirgen__kernel) //----- //
module attributes {quake.mangled_name_map = {__nvqpp__mlirgen__kernel = "__nvqpp__mlirgen__kernel_PyKernelEntryPointRewrite"}} {
  llvm.func @__quantum__qis__x__body(!llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__qis__cnot__body(!llvm.ptr<struct<"Qubit", opaque>>, !llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__qis__cz__body(!llvm.ptr<struct<"Qubit", opaque>>, !llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__rt__result_record_output(!llvm.ptr<struct<"Result", opaque>>, !llvm.ptr<i8>)
  llvm.func @__quantum__qis__read_result__body(!llvm.ptr<struct<"Result", opaque>>) -> i1
  llvm.func @__quantum__qis__mz__body(!llvm.ptr<struct<"Qubit", opaque>>, !llvm.ptr<struct<"Result", opaque>>) attributes {passthrough = ["irreversible"]}
  llvm.func @__quantum__qis__cz(!llvm.ptr<struct<"Qubit", opaque>>, !llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__qis__cnot(!llvm.ptr<struct<"Qubit", opaque>>, !llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__rt__qubit_release_array(!llvm.ptr<struct<"Array", opaque>>)
  llvm.func @__quantum__qis__x(!llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__rt__array_get_element_ptr_1d(!llvm.ptr<struct<"Array", opaque>>, i64) -> !llvm.ptr<i8>
  llvm.func @__quantum__rt__qubit_allocate_array(i64) -> !llvm.ptr<struct<"Array", opaque>>
  llvm.func @__nvqpp__mlirgen__kernel() attributes {"cudaq-entrypoint", passthrough = ["entry_point", ["qir_profiles", "base_profile"], ["output_labeling_schema", "schema_id"], ["output_names", "[[]]"], ["requiredQubits", "3"], ["requiredResults", "0"]]} {
    %0 = llvm.mlir.constant(0 : i64) : i64
    %1 = llvm.mlir.constant(2 : i64) : i64
    %2 = llvm.mlir.constant(1 : i64) : i64
    %3 = llvm.add %0, %0  : i64
    %4 = llvm.inttoptr %3 : i64 to !llvm.ptr<struct<"Qubit", opaque>>
    llvm.call @__quantum__qis__x__body(%4) : (!llvm.ptr<struct<"Qubit", opaque>>) -> ()
    %5 = llvm.add %0, %2  : i64
    %6 = llvm.inttoptr %5 : i64 to !llvm.ptr<struct<"Qubit", opaque>>
    llvm.call @__quantum__qis__x__body(%6) : (!llvm.ptr<struct<"Qubit", opaque>>) -> ()
    %7 = llvm.add %0, %1  : i64
    %8 = llvm.inttoptr %7 : i64 to !llvm.ptr<struct<"Qubit", opaque>>
    llvm.call @__quantum__qis__x__body(%8) : (!llvm.ptr<struct<"Qubit", opaque>>) -> ()
    llvm.return
  }
}


// -----// IR Dump Before RemoveMeasurements (remove-measurements) ('builtin.module' operation) //----- //
module attributes {quake.mangled_name_map = {__nvqpp__mlirgen__kernel = "__nvqpp__mlirgen__kernel_PyKernelEntryPointRewrite"}} {
  llvm.func @__quantum__qis__x__body(!llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__qis__cnot__body(!llvm.ptr<struct<"Qubit", opaque>>, !llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__qis__cz__body(!llvm.ptr<struct<"Qubit", opaque>>, !llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__rt__result_record_output(!llvm.ptr<struct<"Result", opaque>>, !llvm.ptr<i8>)
  llvm.func @__quantum__qis__read_result__body(!llvm.ptr<struct<"Result", opaque>>) -> i1
  llvm.func @__quantum__qis__mz__body(!llvm.ptr<struct<"Qubit", opaque>>, !llvm.ptr<struct<"Result", opaque>>) attributes {passthrough = ["irreversible"]}
  llvm.func @__quantum__qis__cz(!llvm.ptr<struct<"Qubit", opaque>>, !llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__qis__cnot(!llvm.ptr<struct<"Qubit", opaque>>, !llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__rt__qubit_release_array(!llvm.ptr<struct<"Array", opaque>>)
  llvm.func @__quantum__qis__x(!llvm.ptr<struct<"Qubit", opaque>>)
  llvm.func @__quantum__rt__array_get_element_ptr_1d(!llvm.ptr<struct<"Array", opaque>>, i64) -> !llvm.ptr<i8>
  llvm.func @__quantum__rt__qubit_allocate_array(i64) -> !llvm.ptr<struct<"Array", opaque>>
  llvm.func @__nvqpp__mlirgen__kernel() attributes {"cudaq-entrypoint", passthrough = ["entry_point", ["qir_profiles", "base_profile"], ["output_labeling_schema", "schema_id"], ["output_names", "[[]]"], ["requiredQubits", "3"], ["requiredResults", "0"]]} {
    %0 = llvm.mlir.constant(0 : i64) : i64
    %1 = llvm.mlir.constant(2 : i64) : i64
    %2 = llvm.mlir.constant(1 : i64) : i64
    %3 = llvm.add %0, %0  : i64
    %4 = llvm.inttoptr %3 : i64 to !llvm.ptr<struct<"Qubit", opaque>>
    llvm.call @__quantum__qis__x__body(%4) : (!llvm.ptr<struct<"Qubit", opaque>>) -> ()
    %5 = llvm.add %0, %2  : i64
    %6 = llvm.inttoptr %5 : i64 to !llvm.ptr<struct<"Qubit", opaque>>
    llvm.call @__quantum__qis__x__body(%6) : (!llvm.ptr<struct<"Qubit", opaque>>) -> ()
    %7 = llvm.add %0, %1  : i64
    %8 = llvm.inttoptr %7 : i64 to !llvm.ptr<struct<"Qubit", opaque>>
    llvm.call @__quantum__qis__x__body(%8) : (!llvm.ptr<struct<"Qubit", opaque>>) -> ()
    llvm.return
  }
}


{ 111:1000 }


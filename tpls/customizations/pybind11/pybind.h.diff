diff --git a/include/pybind11/pybind11.h b/include/pybind11/pybind11.h
index 3bce1a01..852ce3b4 100644
--- a/include/pybind11/pybind11.h
+++ b/include/pybind11/pybind11.h
@@ -23,6 +23,7 @@
 #include <string>
 #include <utility>
 #include <vector>
+#include <regex>
 
 #if defined(__cpp_lib_launder) && !(defined(_MSC_VER) && (_MSC_VER < 1914))
 #    define PYBIND11_STD_LAUNDER std::launder
@@ -585,9 +586,27 @@ protected:
                 if (chain) {
                     signatures += std::to_string(++index) + ". ";
                 }
-                signatures += rec->name;
-                signatures += it->signature;
-                signatures += '\n';
+
+                // Here we deviate from the code in https://github.com/pybind/pybind11
+                // to avoid issue https://github.com/pybind/pybind11/issues/4537.
+                // We're also manually removing references to the internal python module, _pycudaq.
+                // There are some additional classes that reference their C++ counterpart, so we also
+                // handle those manually.
+                auto formatted_string = std::regex_replace(std::string(rec->name) + std::string(it->signature), std::regex("_pycudaq."), "");
+                formatted_string = std::regex_replace(formatted_string, std::regex("numpy.complex128"), "");
+                formatted_string = std::regex_replace(formatted_string, std::regex(".ndarray[]"), ".ndarray");
+                formatted_string = std::regex_replace(formatted_string, std::regex("buffer"), "numpy.ndarray");
+                formatted_string = std::regex_replace(formatted_string, std::regex("::sample_result"), ".SampleResult");
+                formatted_string = std::regex_replace(formatted_string, std::regex("::observe_result"), ".ObserveResult");
+                formatted_string = std::regex_replace(formatted_string, std::regex("::async_result<cudaq.SampleResult>"), ".AsyncSampleResult");
+                formatted_string = std::regex_replace(formatted_string, std::regex("::async_result<cudaq.ObserveResult>"), ".AsyncObserveResult");
+                formatted_string = std::regex_replace(formatted_string, std::regex("::spin_op"), ".SpinOperator");
+                formatted_string = std::regex_replace(formatted_string, std::regex("::noise_model"), ".NoiseModel");
+                formatted_string = std::regex_replace(formatted_string, std::regex("::QuakeValue"), ".QuakeValue");
+                formatted_string = std::regex_replace(formatted_string, std::regex("::kraus_channel"), ".KrausChannel");
+                formatted_string = std::regex_replace(formatted_string, std::regex("::kernel_builder<>"), ".Kernel");
+                formatted_string = std::regex_replace(formatted_string, std::regex("\\*"), "\\*");
+                signatures += ".. function:: " + formatted_string + "\n\t:noindex:\n\n\n";
             }
             if (it->doc && it->doc[0] != '\0' && options::show_user_defined_docstrings()) {
                 // If we're appending another docstring, and aren't printing function signatures,

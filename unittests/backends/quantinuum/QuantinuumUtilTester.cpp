/*******************************************************************************
 * Copyright (c) 2022 - 2025 NVIDIA Corporation & Affiliates.                  *
 * All rights reserved.                                                        *
 *                                                                             *
 * This source code and the accompanying materials are made available under    *
 * the terms of the Apache License 2.0 which accompanies this distribution.    *
 ******************************************************************************/

#include "CUDAQTestUtils.h"
#include "QuantinuumHelper.h"

#include <gtest/gtest.h>

CUDAQ_TEST(QuantinuumTester, checkResultJsonProcessing) {
  const auto json = nlohmann::json::parse(R"(
    {
      "width":10,"array
    })");
  const std::vector<std::string> regNames = {"r0000", "r0001", "r0002", "r0003",
                                             "r0004", "r0005", "r0006", "r0007",
                                             "r0008", "r0009"};
  auto result = cudaq::utils::quantinuum::processResults(json, regNames);
  result.dump();
  EXPECT_EQ(result.size(), 1);
  EXPECT_EQ(result.count("1000000000"), 1000);
  EXPECT_EQ(result.get_total_shots(), 1000);
  EXPECT_EQ(result.sequential_data().size(), 1000);
  for (const auto &shot : result.sequential_data()) {
    EXPECT_EQ(shot, "1000000000");
  }
  for (const auto &reg : regNames) {
    EXPECT_EQ(result.sequential_data(reg).size(), 1000);
    if (reg == "r0000") {
      EXPECT_EQ(result.count("1", reg), 1000);
      for (const auto &shot : result.sequential_data(reg)) {
        EXPECT_EQ(shot, "1");
      }
    } else {
      EXPECT_EQ(result.count("0", reg), 1000);
      for (const auto &shot : result.sequential_data(reg)) {
        EXPECT_EQ(shot, "0");
      }
    }
  }
}

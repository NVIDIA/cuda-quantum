/*******************************************************************************
 * Copyright (c) 2022 - 2025 NVIDIA Corporation & Affiliates.                  *
 * All rights reserved.                                                        *
 *                                                                             *
 * This source code and the accompanying materials are made available under    *
 * the terms of the Apache License 2.0 which accompanies this distribution.    *
 ******************************************************************************/

#include <cudaq.h>
#include <cudaq/algorithm.h>
#include <gtest/gtest.h>
#include <random>

TEST(OptTester, subkernel) {
  auto iqft = [](cudaq::qview<> q) __qpu__ {
    int N = q.size();
    // Swap qubits
    for (int i = 0; i < N / 2; ++i) {
      swap(q[i], q[N - i - 1]);
    }

    for (int i = 0; i < N - 1; ++i) {
      h(q[i]);
      int j = i + 1;
      for (int y = i; y >= 0; --y) {
        double denom = (1UL << (j - y));
        const double theta = -M_PI / denom;
        r1<cudaq::ctrl>(theta, q[j], q[y]);
      }
    }

    h(q[N - 1]);
  };

  auto kernel = [&]() __qpu__ {
    GEN-QALLOC: nqubits=8
    GEN-SUBCIRCUIT
    iqft(GEN:<qvector>);
    GEN-SUBCIRCUIT
  };

  const auto PHASE_SWITCH = "CUDAQ_PHASE_FOLDING";

  setenv(PHASE_SWITCH, "0", true);
  cudaq::set_random_seed(1);
  auto state1 = cudaq::get_state(kernel);
  // Add resource counter call (once merged) here to make sure opts are actually done

  setenv(PHASE_SWITCH, "1", true);
  cudaq::set_random_seed(1);
  auto state2 = cudaq::get_state(kernel);

  assert(state1.get_num_qubits() == state2.get_num_qubits());
  auto result = state1.overlap(state2);
  printf("Real: %f, imag: %f\n", result.real(), result.imag());
  EXPECT_NEAR(result.real(), 1., 0.0000001);
  EXPECT_NEAR(result.imag(), 0., 0.0000001);
}

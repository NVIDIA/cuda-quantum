// ========================================================================== //
// Copyright (c) 2022 - 2023 NVIDIA Corporation & Affiliates.                 //
// All rights reserved.                                                       //
//                                                                            //
// This source code and the accompanying materials are made available under   //
// the terms of the Apache License 2.0 which accompanies this distribution.   //
// ========================================================================== //

// RUN: cudaq-opt -pass-pipeline='builtin.module(quake-decomposition{enable-patterns=CRyToCX})' %s | FileCheck %s
// RUN: cudaq-opt -pass-pipeline='builtin.module(quake-decomposition{enable-patterns=CRyToCX})' %s | CircuitCheck %s


// Test the decomposition pattern with different control types. The FileCheck
// part of this test only cares about the sequence of operations. Correcteness
// is checked by CircuitCheck.

// CHECK-LABEL: func.func @qref_control
func.func @qref_control(%c: !quake.ref, %t: !quake.ref) {
  %0 = arith.constant 1.57079632679489660 : f64
  // CHECK: quake.ry
  // CHECK-NEXT: quake.x
  // CHECK-NEXT: quake.ry
  // CHECK-NEXT: quake.x
  quake.ry (%0)[%c] %t : (f64, !quake.ref, !quake.ref) -> ()
  return
}

// CHECK-LABEL: func.func @qvec_control
func.func @qvec_control(%c: !quake.veq<1>, %t: !quake.ref) {
  %0 = arith.constant 1.57079632679489660 : f64
  // CHECK: quake.ry
  // CHECK-NEXT: quake.x
  // CHECK-NEXT: quake.ry
  // CHECK-NEXT: quake.x
  quake.ry (%0)[%c] %t : (f64, !quake.veq<1>, !quake.ref) -> ()
  return
}

// CHECK-LABEL: func.func @adj
func.func @adj(%c: !quake.ref, %t: !quake.ref) {
  %0 = arith.constant 1.57079632679489660 : f64
  // CHECK: quake.ry
  // CHECK-NEXT: quake.x
  // CHECK-NEXT: quake.ry
  // CHECK-NEXT: quake.x
  quake.ry<adj> (%0)[%c] %t : (f64, !quake.ref, !quake.ref) -> ()
  return
}

// CHECK-LABEL: func.func @negated_controls
func.func @negated_controls(%c: !quake.ref, %t: !quake.ref) {
  %0 = arith.constant 2.57079632679489660 : f64
  quake.ry (%0)[%c neg [true]] %t : (f64, !quake.ref, !quake.ref) -> ()
  return
}

// CHECK-LABEL: func.func @negated_controls_2
// This is testing control and target in a different order
func.func @negated_controls_2(%t: !quake.ref, %c: !quake.ref) {
  %0 = arith.constant 2.57079632679489660 : f64
  quake.ry (%0)[%c neg [true]] %t : (f64, !quake.ref, !quake.ref) -> ()
  return
}

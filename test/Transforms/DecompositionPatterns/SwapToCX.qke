// ========================================================================== //
// Copyright (c) 2022 - 2024 NVIDIA Corporation & Affiliates.                 //
// All rights reserved.                                                       //
//                                                                            //
// This source code and the accompanying materials are made available under   //
// the terms of the Apache License 2.0 which accompanies this distribution.   //
// ========================================================================== //

// RUN: cudaq-opt -pass-pipeline='builtin.module(decomposition{enable-patterns=SwapToCX})' %s | FileCheck %s
// RUN: cudaq-opt -pass-pipeline='builtin.module(decomposition{enable-patterns=SwapToCX})' %s | CircuitCheck %s
// RUN: cudaq-opt -pass-pipeline='builtin.module(func.func(memtoreg),decomposition{enable-patterns=SwapToCX})' %s | FileCheck --check-prefix=VALUE %s
// RUN: cudaq-opt -pass-pipeline='builtin.module(func.func(memtoreg),decomposition{enable-patterns=SwapToCX})' %s | CircuitCheck %s

func.func @test(%qa: !quake.ref, %qb : !quake.ref) {
  quake.swap %qa, %qb : (!quake.ref, !quake.ref) -> ()
  return
}

// CHECK-LABEL:   func.func @test(
// CHECK-SAME:                    %[[VAL_0:.*]]: !quake.ref,
// CHECK-SAME:                    %[[VAL_1:.*]]: !quake.ref) {
// CHECK:           quake.x {{\[}}%[[VAL_1]]] %[[VAL_0]] : (!quake.ref, !quake.ref) -> ()
// CHECK:           quake.x {{\[}}%[[VAL_0]]] %[[VAL_1]] : (!quake.ref, !quake.ref) -> ()
// CHECK:           quake.x {{\[}}%[[VAL_1]]] %[[VAL_0]] : (!quake.ref, !quake.ref) -> ()
// CHECK:           return
// CHECK:         }

// VALUE-LABEL:   func.func @test(
// VALUE-SAME:                    %[[VAL_0:.*]]: !quake.ref,
// VALUE-SAME:                    %[[VAL_1:.*]]: !quake.ref) {
// VALUE:           %[[VAL_2:.*]] = quake.unwrap %[[VAL_1]] : (!quake.ref) -> !quake.wire
// VALUE:           %[[VAL_3:.*]] = quake.unwrap %[[VAL_0]] : (!quake.ref) -> !quake.wire
// VALUE:           %[[VAL_4:.*]]:2 = quake.x {{\[}}%[[VAL_2]]] %[[VAL_3]] : (!quake.wire, !quake.wire) -> (!quake.wire, !quake.wire)
// VALUE:           %[[VAL_5:.*]]:2 = quake.x {{\[}}%[[VAL_4]]#1] %[[VAL_4]]#0 : (!quake.wire, !quake.wire) -> (!quake.wire, !quake.wire)
// VALUE:           %[[VAL_6:.*]]:2 = quake.x {{\[}}%[[VAL_5]]#1] %[[VAL_5]]#0 : (!quake.wire, !quake.wire) -> (!quake.wire, !quake.wire)
// VALUE:           quake.wrap %[[VAL_6]]#1 to %[[VAL_0]] : !quake.wire, !quake.ref
// VALUE:           quake.wrap %[[VAL_6]]#0 to %[[VAL_1]] : !quake.wire, !quake.ref
// VALUE:           return
// VALUE:         }

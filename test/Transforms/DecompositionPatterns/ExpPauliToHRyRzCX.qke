// ========================================================================== //
// Copyright (c) 2022 - 2023 NVIDIA Corporation & Affiliates.                 //
// All rights reserved.                                                       //
//                                                                            //
// This source code and the accompanying materials are made available under   //
// the terms of the Apache License 2.0 which accompanies this distribution.   //
// ========================================================================== //

// RUN: cudaq-opt -pass-pipeline='builtin.module(decomposition{enable-patterns=ExpPauliDecomposition})' %s | FileCheck %s

module attributes {quake.mangled_name_map = {__nvqpp__mlirgen__Z4mainE3$_0 = "_ZZ4mainENK3$_0clEd"}} {
  func.func @__nvqpp__mlirgen__Z4mainE3$_0(%arg0: f64) attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %0 = cc.alloca f64
    cc.store %arg0, %0 : !cc.ptr<f64>
    %1 = quake.alloca !quake.veq<4>
    %2 = quake.extract_ref %1[0] : (!quake.veq<4>) -> !quake.ref
    quake.x %2 : (!quake.ref) -> ()
    %3 = quake.extract_ref %1[1] : (!quake.veq<4>) -> !quake.ref
    quake.x %3 : (!quake.ref) -> ()
    %4 = cc.load %0 : !cc.ptr<f64>
    %5 = cc.string_literal "XXXY" : !cc.ptr<!cc.array<i8 x 5>>
    quake.exp_pauli(%4) %1, %5 : (f64, !quake.veq<4>, !cc.ptr<!cc.array<i8 x 5>>) -> ()
    return
  }
}

// CHECK-LABEL:   func.func @__nvqpp__mlirgen__Z4mainE3$_0(
// CHECK-SAME:                                             %[[VAL_0:.*]]: f64) attributes {"cudaq-entrypoint", "cudaq-kernel"} {
// CHECK:           %[[VAL_1:.*]] = arith.constant 0 : i64
// CHECK:           %[[VAL_2:.*]] = arith.constant 1 : i64
// CHECK:           %[[VAL_3:.*]] = arith.constant 2 : i64
// CHECK:           %[[VAL_4:.*]] = arith.constant 3 : i64
// CHECK:           %[[VAL_5:.*]] = arith.constant 1.5707963267948966 : f64
// CHECK:           %[[VAL_6:.*]] = arith.constant -1.5707963267948966 : f64
// CHECK:           %[[VAL_7:.*]] = cc.alloca f64
// CHECK:           cc.store %[[VAL_0]], %[[VAL_7]] : !cc.ptr<f64>
// CHECK:           %[[VAL_8:.*]] = quake.alloca !quake.veq<4>
// CHECK:           %[[VAL_9:.*]] = quake.extract_ref %[[VAL_8]][0] : (!quake.veq<4>) -> !quake.ref
// CHECK:           quake.x %[[VAL_9]] : (!quake.ref) -> ()
// CHECK:           %[[VAL_10:.*]] = quake.extract_ref %[[VAL_8]][1] : (!quake.veq<4>) -> !quake.ref
// CHECK:           quake.x %[[VAL_10]] : (!quake.ref) -> ()
// CHECK:           %[[VAL_11:.*]] = cc.load %[[VAL_7]] : !cc.ptr<f64>
// CHECK:           %[[VAL_12:.*]] = cc.string_literal "XXXY" : !cc.ptr<!cc.array<i8 x 5>>
// CHECK:           %[[VAL_13:.*]] = quake.extract_ref %[[VAL_8]]{{\[}}%[[VAL_1]]] : (!quake.veq<4>, i64) -> !quake.ref
// CHECK:           quake.h %[[VAL_13]] : (!quake.ref) -> ()
// CHECK:           %[[VAL_14:.*]] = quake.extract_ref %[[VAL_8]]{{\[}}%[[VAL_2]]] : (!quake.veq<4>, i64) -> !quake.ref
// CHECK:           quake.h %[[VAL_14]] : (!quake.ref) -> ()
// CHECK:           %[[VAL_15:.*]] = quake.extract_ref %[[VAL_8]]{{\[}}%[[VAL_3]]] : (!quake.veq<4>, i64) -> !quake.ref
// CHECK:           quake.h %[[VAL_15]] : (!quake.ref) -> ()
// CHECK:           %[[VAL_16:.*]] = quake.extract_ref %[[VAL_8]]{{\[}}%[[VAL_4]]] : (!quake.veq<4>, i64) -> !quake.ref
// CHECK:           quake.rx (%[[VAL_5]]) %[[VAL_16]] : (f64, !quake.ref) -> ()
// CHECK:           quake.x {{\[}}%[[VAL_13]]] %[[VAL_14]] : (!quake.ref, !quake.ref) -> ()
// CHECK:           quake.x {{\[}}%[[VAL_14]]] %[[VAL_15]] : (!quake.ref, !quake.ref) -> ()
// CHECK:           quake.x {{\[}}%[[VAL_15]]] %[[VAL_16]] : (!quake.ref, !quake.ref) -> ()
// CHECK:           quake.rz (%[[VAL_11]]) %[[VAL_16]] : (f64, !quake.ref) -> ()
// CHECK:           quake.x {{\[}}%[[VAL_15]]] %[[VAL_16]] : (!quake.ref, !quake.ref) -> ()
// CHECK:           quake.x {{\[}}%[[VAL_14]]] %[[VAL_15]] : (!quake.ref, !quake.ref) -> ()
// CHECK:           quake.x {{\[}}%[[VAL_13]]] %[[VAL_14]] : (!quake.ref, !quake.ref) -> ()
// CHECK:           %[[VAL_17:.*]] = quake.extract_ref %[[VAL_8]]{{\[}}%[[VAL_4]]] : (!quake.veq<4>, i64) -> !quake.ref
// CHECK:           quake.rx (%[[VAL_6]]) %[[VAL_17]] : (f64, !quake.ref) -> ()
// CHECK:           %[[VAL_18:.*]] = quake.extract_ref %[[VAL_8]]{{\[}}%[[VAL_3]]] : (!quake.veq<4>, i64) -> !quake.ref
// CHECK:           quake.h %[[VAL_18]] : (!quake.ref) -> ()
// CHECK:           %[[VAL_19:.*]] = quake.extract_ref %[[VAL_8]]{{\[}}%[[VAL_2]]] : (!quake.veq<4>, i64) -> !quake.ref
// CHECK:           quake.h %[[VAL_19]] : (!quake.ref) -> ()
// CHECK:           %[[VAL_20:.*]] = quake.extract_ref %[[VAL_8]]{{\[}}%[[VAL_1]]] : (!quake.veq<4>, i64) -> !quake.ref
// CHECK:           quake.h %[[VAL_20]] : (!quake.ref) -> ()
// CHECK:           return
// CHECK:         }
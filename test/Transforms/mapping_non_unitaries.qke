// ========================================================================== //
// Copyright (c) 2022 - 2023 NVIDIA Corporation & Affiliates.                 //
// All rights reserved.                                                       //
//                                                                            //
// This source code and the accompanying materials are made available under   //
// the terms of the Apache License 2.0 which accompanies this distribution.   //
// ========================================================================== //

// RUN: cudaq-opt --qubit-mapping=device=path %s | CircuitCheck --up-to-mapping %s
// RUN: cudaq-opt --qubit-mapping=device=path\(5\) %s | CircuitCheck --up-to-mapping %s
// RUN: cudaq-opt --qubit-mapping=device=ring\(5\) %s | CircuitCheck --up-to-mapping %s
// RUN: cudaq-opt --qubit-mapping=device=star\(5,2\) %s | CircuitCheck --up-to-mapping %s
// RUN: cudaq-opt --qubit-mapping=device=star\(5,0\) %s | CircuitCheck --up-to-mapping %s
// RUN: cudaq-opt --qubit-mapping=device=grid\(3,3\) %s | CircuitCheck --up-to-mapping %s
// RUN: cudaq-opt --qubit-mapping=device=grid\(1,5\) %s | CircuitCheck --up-to-mapping %s
// RUN: cudaq-opt --qubit-mapping=device=grid\(5,1\) %s | CircuitCheck --up-to-mapping %s
// RUN: cudaq-opt --qubit-mapping=device=path %s | FileCheck --check-prefix CHECK %s
// RUN: cudaq-opt --qubit-mapping=device=path\(5\) %s | FileCheck --check-prefix CHECK %s
// RUN: cudaq-opt --qubit-mapping=device=ring\(5\) %s | FileCheck --check-prefix CHECK %s
// RUN: cudaq-opt --qubit-mapping=device=star\(5,2\) %s | FileCheck --check-prefix STAR52 %s
// RUN: cudaq-opt --qubit-mapping=device=star\(5,0\) %s | FileCheck --check-prefix STAR50 %s
// RUN: cudaq-opt --qubit-mapping=device=grid\(3,3\) %s | FileCheck --check-prefix CHECK %s
// RUN: cudaq-opt --qubit-mapping=device=grid\(1,5\) %s | FileCheck --check-prefix CHECK %s
// RUN: cudaq-opt --qubit-mapping=device=grid\(5,1\) %s | FileCheck --check-prefix CHECK %s

func.func @test_measurement() {
  %0 = quake.null_wire
  %1 = quake.null_wire
  %2 = quake.null_wire
  %3:2 = quake.x [%1] %0 : (!quake.wire, !quake.wire) -> (!quake.wire, !quake.wire)
  %4:2 = quake.x [%3#0] %2 : (!quake.wire, !quake.wire) -> (!quake.wire, !quake.wire)
  %5:2 = quake.x [%4#1] %3#1 : (!quake.wire, !quake.wire) -> (!quake.wire, !quake.wire)
  %bits, %wires:3 = quake.mz %5#1, %4#0, %5#0 name "result": (!quake.wire, !quake.wire, !quake.wire) -> (!cc.stdvec<!quake.measure>, !quake.wire, !quake.wire, !quake.wire)
  quake.sink %wires#0 : !quake.wire
  quake.sink %wires#1 : !quake.wire
  quake.sink %wires#2 : !quake.wire
  return
}

// CHECK-LABEL:   func.func @test_measurement() attributes {mapping_v2p = [0, 2, 1]} {
// CHECK:           %[[VAL_0:.*]] = quake.null_wire
// CHECK:           %[[VAL_1:.*]] = quake.null_wire
// CHECK:           %[[VAL_2:.*]] = quake.null_wire
// CHECK:           %[[VAL_3:.*]]:2 = quake.x {{\[}}%[[VAL_1]]] %[[VAL_0]] : (!quake.wire, !quake.wire) -> (!quake.wire, !quake.wire)
// CHECK:           %[[VAL_4:.*]]:2 = quake.x {{\[}}%[[VAL_3]]#0] %[[VAL_2]] : (!quake.wire, !quake.wire) -> (!quake.wire, !quake.wire)
// CHECK:           %[[VAL_5:.*]]:2 = quake.swap %[[VAL_4]]#1, %[[VAL_4]]#0 : (!quake.wire, !quake.wire) -> (!quake.wire, !quake.wire)
// CHECK:           %[[VAL_6:.*]]:2 = quake.x {{\[}}%[[VAL_5]]#1] %[[VAL_3]]#1 : (!quake.wire, !quake.wire) -> (!quake.wire, !quake.wire)
// CHECK:           %[[VAL_7:.*]], %[[VAL_8:.*]]:3 = quake.mz %[[VAL_6]]#1, %[[VAL_5]]#0, %[[VAL_6]]#0 name "result" : (!quake.wire, !quake.wire, !quake.wire) -> (!cc.stdvec<!quake.measure>, !quake.wire, !quake.wire, !quake.wire)
// CHECK-DAG:       quake.sink %[[VAL_8]]#0 : !quake.wire
// CHECK-DAG:       quake.sink %[[VAL_8]]#1 : !quake.wire
// CHECK-DAG:       quake.sink %[[VAL_8]]#2 : !quake.wire
// CHECK:           return
// CHECK:         }

// STAR52-LABEL:   func.func @test_measurement() attributes {mapping_v2p = [0, 1, 2]} {
// STAR50-LABEL:   func.func @test_measurement() attributes {mapping_v2p = [2, 1, 0]} {

// ========================================================================== //
// Copyright (c) 2022 - 2024 NVIDIA Corporation & Affiliates.                 //
// All rights reserved.                                                       //
//                                                                            //
// This source code and the accompanying materials are made available under   //
// the terms of the Apache License 2.0 which accompanies this distribution.   //
// ========================================================================== //

// RUN: cudaq-opt --unitary-synthesis --canonicalize --apply-op-specialization --aggressive-early-inlining %s | FileCheck %s

module attributes {quake.mangled_name_map = {__nvqpp__mlirgen__kernel2 = "__nvqpp__mlirgen__kernel2_PyKernelEntryPointRewrite"}} {
  func.func @__nvqpp__mlirgen__kernel2() attributes {"cudaq-entrypoint"} {
    %0 = quake.alloca !quake.veq<2>
    %1 = quake.extract_ref %0[1] : (!quake.veq<2>) -> !quake.ref
    %2 = quake.extract_ref %0[0] : (!quake.veq<2>) -> !quake.ref
    quake.custom_op @__nvqpp__mlirgen__op2_generator_2.rodata %1, %2 : (!quake.ref, !quake.ref) -> ()
    return
  }
  cc.global constant @__nvqpp__mlirgen__op2_generator_2.rodata (dense<[(0.18897759,0.33963024000000003), (0.12335641999999999,-0.48243450999999998), (0.42873799000000001,-0.22386284000000001), (-0.38231686999999998,-0.46998072000000002), (0.26665664,0.31917547000000002), (0.66539470999999994,0.25221665999999998), (-0.47503402,-0.12900718), (-0.26305423,0.095708849999999998), (-0.1821702,0.14533362999999999), (0.18060332000000001,-0.34169106999999999), (1.314040e-03,-0.64370212999999998), (0.54215897999999996,0.29670066), (-0.30045970999999999,0.72895551000000003), (-0.26715635999999998,-0.15790472999999999), (-0.069665530000000003,0.32335976999999999), (-0.13738248,0.39211302999999997)]> : tensor<16xcomplex<f64>>) : !cc.array<complex<f64> x 16>
}

// CHECK-LABEL:   func.func @__nvqpp__mlirgen__kernel2() attributes {"cudaq-entrypoint"} {
// CHECK-DAG:       %[[VAL_0:.*]] = arith.constant 3.3597983{{[0-9]+}} : f64
// CHECK-DAG:       %[[VAL_1:.*]] = arith.constant 1.1124416{{[0-9]+}} : f64
// CHECK-DAG:       %[[VAL_2:.*]] = arith.constant -1.522760{{[0-9]+}} : f64
// CHECK-DAG:       %[[VAL_3:.*]] = arith.constant 0.4109889{{[0-9]+}} : f64
// CHECK-DAG:       %[[VAL_4:.*]] = arith.constant 1.5707963{{[0-9]+}} : f64
// CHECK-DAG:       %[[VAL_5:.*]] = arith.constant -4.083336{{[0-9]+}} : f64
// CHECK-DAG:       %[[VAL_6:.*]] = arith.constant 1.2323317{{[0-9]+}} : f64
// CHECK-DAG:       %[[VAL_7:.*]] = arith.constant 0.8932718{{[0-9]+}} : f64
// CHECK-DAG:       %[[VAL_8:.*]] = arith.constant -1.570796{{[0-9]+}} : f64
// CHECK-DAG:       %[[VAL_9:.*]] = arith.constant -0.893271{{[0-9]+}} : f64
// CHECK-DAG:       %[[VAL_10:.*]] = arith.constant 0.706693{{[0-9]+}} : f64
// CHECK-DAG:       %[[VAL_11:.*]] = arith.constant 2.349985{{[0-9]+}} : f64
// CHECK-DAG:       %[[VAL_12:.*]] = arith.constant 1.002236{{[0-9]+}} : f64
// CHECK-DAG:       %[[VAL_13:.*]] = arith.constant 0.635862{{[0-9]+}} : f64
// CHECK-DAG:       %[[VAL_14:.*]] = arith.constant 0.453700{{[0-9]+}} : f64
// CHECK-DAG:       %[[VAL_15:.*]] = arith.constant -0.57588{{[0-9]+}} : f64
// CHECK-DAG:       %[[VAL_16:.*]] = arith.constant 1.030866{{[0-9]+}} : f64
// CHECK-DAG:       %[[VAL_17:.*]] = arith.constant 1.768800{{[0-9]+}} : f64
// CHECK-DAG:       %[[VAL_18:.*]] = arith.constant 0.445277{{[0-9]+}} : f64
// CHECK-DAG:       %[[VAL_19:.*]] = quake.alloca !quake.veq<2>
// CHECK-DAG:       %[[VAL_20:.*]] = quake.extract_ref %[[VAL_19]][1] : (!quake.veq<2>) -> !quake.ref
// CHECK-DAG:       %[[VAL_21:.*]] = quake.extract_ref %[[VAL_19]][0] : (!quake.veq<2>) -> !quake.ref
// CHECK:           quake.rz (%[[VAL_0]]) %[[VAL_21]] : (f64, !quake.ref) -> ()
// CHECK:           quake.ry (%[[VAL_1]]) %[[VAL_21]] : (f64, !quake.ref) -> ()
// CHECK:           quake.rz (%[[VAL_2]]) %[[VAL_21]] : (f64, !quake.ref) -> ()
// CHECK:           quake.rz (%[[VAL_12]]) %[[VAL_20]] : (f64, !quake.ref) -> ()
// CHECK:           quake.ry (%[[VAL_11]]) %[[VAL_20]] : (f64, !quake.ref) -> ()
// CHECK:           quake.rz (%[[VAL_10]]) %[[VAL_20]] : (f64, !quake.ref) -> ()
// CHECK:           quake.h %[[VAL_20]] : (!quake.ref) -> ()
// CHECK:           quake.h %[[VAL_21]] : (!quake.ref) -> ()
// CHECK:           quake.x {{\[}}%[[VAL_21]]] %[[VAL_20]] : (!quake.ref, !quake.ref) -> ()
// CHECK:           quake.rz (%[[VAL_3]]) %[[VAL_20]] : (f64, !quake.ref) -> ()
// CHECK:           quake.x {{\[}}%[[VAL_21]]] %[[VAL_20]] : (!quake.ref, !quake.ref) -> ()
// CHECK:           quake.h %[[VAL_21]] : (!quake.ref) -> ()
// CHECK:           quake.h %[[VAL_20]] : (!quake.ref) -> ()
// CHECK:           quake.rx (%[[VAL_4]]) %[[VAL_20]] : (f64, !quake.ref) -> ()
// CHECK:           quake.rx (%[[VAL_4]]) %[[VAL_21]] : (f64, !quake.ref) -> ()
// CHECK:           quake.x {{\[}}%[[VAL_21]]] %[[VAL_20]] : (!quake.ref, !quake.ref) -> ()
// CHECK:           quake.rz (%[[VAL_5]]) %[[VAL_20]] : (f64, !quake.ref) -> ()
// CHECK:           quake.x {{\[}}%[[VAL_21]]] %[[VAL_20]] : (!quake.ref, !quake.ref) -> ()
// CHECK:           quake.rx (%[[VAL_8]]) %[[VAL_21]] : (f64, !quake.ref) -> ()
// CHECK:           quake.rx (%[[VAL_8]]) %[[VAL_20]] : (f64, !quake.ref) -> ()
// CHECK:           quake.x {{\[}}%[[VAL_21]]] %[[VAL_20]] : (!quake.ref, !quake.ref) -> ()
// CHECK:           quake.rz (%[[VAL_6]]) %[[VAL_20]] : (f64, !quake.ref) -> ()
// CHECK:           quake.x {{\[}}%[[VAL_21]]] %[[VAL_20]] : (!quake.ref, !quake.ref) -> ()
// CHECK:           quake.rz (%[[VAL_15]]) %[[VAL_21]] : (f64, !quake.ref) -> ()
// CHECK:           quake.ry (%[[VAL_14]]) %[[VAL_21]] : (f64, !quake.ref) -> ()
// CHECK:           quake.rz (%[[VAL_13]]) %[[VAL_21]] : (f64, !quake.ref) -> ()
// CHECK:           quake.rz (%[[VAL_18]]) %[[VAL_20]] : (f64, !quake.ref) -> ()
// CHECK:           quake.ry (%[[VAL_17]]) %[[VAL_20]] : (f64, !quake.ref) -> ()
// CHECK:           quake.rz (%[[VAL_16]]) %[[VAL_20]] : (f64, !quake.ref) -> ()
// CHECK:           quake.r1 (%[[VAL_7]]) %[[VAL_20]] : (f64, !quake.ref) -> ()
// CHECK:           quake.rz (%[[VAL_9]]) %[[VAL_20]] : (f64, !quake.ref) -> ()
// CHECK:           return
// CHECK:         }

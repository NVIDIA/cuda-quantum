// ========================================================================== //
// Copyright (c) 2022 - 2024 NVIDIA Corporation & Affiliates.                 //
// All rights reserved.                                                       //
//                                                                            //
// This source code and the accompanying materials are made available under   //
// the terms of the Apache License 2.0 which accompanies this distribution.   //
// ========================================================================== //

// RUN: cudaq-opt --unitary-synthesis --canonicalize %s | FileCheck %s

module attributes {quake.mangled_name_map = {__nvqpp__mlirgen__bell = "__nvqpp__mlirgen__bell_PyKernelEntryPointRewrite"}} {
  func.func @__nvqpp__mlirgen__bell() attributes {"cudaq-entrypoint"} {
    %0 = quake.alloca !quake.veq<2>
    %1 = quake.extract_ref %0[0] : (!quake.veq<2>) -> !quake.ref
    quake.custom_op @__nvqpp__mlirgen__custom_h_generator_1.rodata %1 : (!quake.ref) -> ()
    %2 = quake.extract_ref %0[1] : (!quake.veq<2>) -> !quake.ref
    quake.custom_op @__nvqpp__mlirgen__custom_x_generator_1.rodata [%1] %2 : (!quake.ref, !quake.ref) -> ()
    return
  }
  cc.global constant @__nvqpp__mlirgen__custom_h_generator_1.rodata (dense<[(0.70710678118654746,0.000000e+00), (0.70710678118654746,0.000000e+00), (0.70710678118654746,0.000000e+00), (-0.70710678118654746,0.000000e+00)]> : tensor<4xcomplex<f64>>) : !cc.array<complex<f64> x 4>
  cc.global constant @__nvqpp__mlirgen__custom_x_generator_1.rodata (dense<[(0.000000e+00,0.000000e+00), (1.000000e+00,0.000000e+00), (1.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00)]> : tensor<4xcomplex<f64>>) : !cc.array<complex<f64> x 4>
}

// CHECK-LABEL:   func.func private @__nvqpp__mlirgen__custom_h_generator_1.kernel(
// CHECK-SAME:                                                                     %[[VAL_0:.*]]: !quake.ref) {
// CHECK:           %[[VAL_1:.*]] = arith.constant -3.1415926535897931 : f64
// CHECK:           %[[VAL_2:.*]] = arith.constant 1.5707963267948968 : f64
// CHECK:           %[[VAL_3:.*]] = arith.constant 3.1415926535897931 : f64
// CHECK:           quake.rz (%[[VAL_3]]) %[[VAL_0]] : (f64, !quake.ref) -> ()
// CHECK:           quake.ry (%[[VAL_2]]) %[[VAL_0]] : (f64, !quake.ref) -> ()
// CHECK:           quake.r1 (%[[VAL_3]]) %[[VAL_0]] : (f64, !quake.ref) -> ()
// CHECK:           quake.rz (%[[VAL_1]]) %[[VAL_0]] : (f64, !quake.ref) -> ()
// CHECK:           return
// CHECK:         }

// CHECK-LABEL:   func.func private @__nvqpp__mlirgen__custom_x_generator_1.kernel(
// CHECK-SAME:                                                                     %[[VAL_0:.*]]: !quake.ref) {
// CHECK:           %[[VAL_1:.*]] = arith.constant -3.1415926535897931 : f64
// CHECK:           %[[VAL_2:.*]] = arith.constant -1.5707963267948966 : f64
// CHECK:           %[[VAL_3:.*]] = arith.constant 3.1415926535897931 : f64
// CHECK:           %[[VAL_4:.*]] = arith.constant 1.5707963267948966 : f64
// CHECK:           quake.rz (%[[VAL_4]]) %[[VAL_0]] : (f64, !quake.ref) -> ()
// CHECK:           quake.ry (%[[VAL_3]]) %[[VAL_0]] : (f64, !quake.ref) -> ()
// CHECK:           quake.rz (%[[VAL_2]]) %[[VAL_0]] : (f64, !quake.ref) -> ()
// CHECK:           quake.r1 (%[[VAL_3]]) %[[VAL_0]] : (f64, !quake.ref) -> ()
// CHECK:           quake.rz (%[[VAL_1]]) %[[VAL_0]] : (f64, !quake.ref) -> ()
// CHECK:           return
// CHECK:         }

// CHECK-LABEL:   func.func @__nvqpp__mlirgen__bell() attributes {"cudaq-entrypoint"} {
// CHECK:           %[[VAL_0:.*]] = quake.alloca !quake.veq<2>
// CHECK:           %[[VAL_1:.*]] = quake.extract_ref %[[VAL_0]][0] : (!quake.veq<2>) -> !quake.ref
// CHECK:           quake.apply @__nvqpp__mlirgen__custom_h_generator_1.kernel %[[VAL_1]] : (!quake.ref) -> ()
// CHECK:           %[[VAL_2:.*]] = quake.extract_ref %[[VAL_0]][1] : (!quake.veq<2>) -> !quake.ref
// CHECK:           quake.apply @__nvqpp__mlirgen__custom_x_generator_1.kernel {{\[}}%[[VAL_1]]] %[[VAL_2]] : (!quake.ref, !quake.ref) -> ()
// CHECK:           return
// CHECK:         }

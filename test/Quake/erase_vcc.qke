// ========================================================================== //
// Copyright (c) 2022 - 2025 NVIDIA Corporation & Affiliates.                 //
// All rights reserved.                                                       //
//                                                                            //
// This source code and the accompanying materials are made available under   //
// the terms of the Apache License 2.0 which accompanies this distribution.   //
// ========================================================================== //

// RUN: cudaq-opt --erase-vector-copy-ctor %s | FileCheck %s

func.func @test_it() {
  %false = arith.constant 0 : i1
  %3 = cc.alloca !cc.array<i8 x 24>
  %34 = cc.cast %3 : (!cc.ptr<!cc.array<i8 x 24>>) -> !cc.ptr<i8>
  %35 = arith.constant 24 : i64
  %36 = call @malloc(%35) : (i64) -> !cc.ptr<i8>
  call @llvm.memcpy.p0i8.p0i8.i64(%36, %34, %35, %false) : (!cc.ptr<i8>, !cc.ptr<i8>, i64, i1) -> ()
  %37 = cc.alloca i8[%35 : i64]
  %38 = cc.cast %37 : (!cc.ptr<!cc.array<i8 x ?>>) -> !cc.ptr<i8>
  call @llvm.memcpy.p0i8.p0i8.i64(%38, %36, %35, %false) : (!cc.ptr<i8>, !cc.ptr<i8>, i64, i1) -> ()
  call @free(%36) : (!cc.ptr<i8>) -> ()
  %0 = cc.cast %37 : (!cc.ptr<!cc.array<i8 x ?>>) -> !cc.ptr<i8>
  call @ok(%0) : (!cc.ptr<i8>) -> ()
  return
}

func.func private @ok(!cc.ptr<i8>)
func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
func.func private @malloc(i64) -> !cc.ptr<i8>
func.func private @free(!cc.ptr<i8>)

// CHECK-LABEL:   func.func @test_it() {
// CHECK:           %[[VAL_0:.*]] = cc.alloca !cc.array<i8 x 24>
// CHECK:           %[[VAL_1:.*]] = cc.cast %[[VAL_0]] : (!cc.ptr<!cc.array<i8 x 24>>) -> !cc.ptr<i8>
// CHECK:           call @ok(%[[VAL_1]]) : (!cc.ptr<i8>) -> ()
// CHECK:           return
// CHECK:         }

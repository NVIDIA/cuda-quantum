// ========================================================================== //
// Copyright (c) 2022 - 2023 NVIDIA Corporation & Affiliates.                 //
// All rights reserved.                                                       //
//                                                                            //
// This source code and the accompanying materials are made available under   //
// the terms of the Apache License 2.0 which accompanies this distribution.   //
// ========================================================================== //

// RUN: cudaq-opt --memtoreg %s | FileCheck %s

func.func @t() {
  %q0 = quake.alloca !quake.ref
  %q1 = quake.alloca !quake.ref
  %q2 = quake.alloca !quake.ref
  quake.x [%q1] %q0 : (!quake.ref, !quake.ref) -> ()
  quake.y [%q2] %q0 : (!quake.ref, !quake.ref) -> ()
  quake.h %q1 : (!quake.ref) -> ()
  quake.z [%q1] %q0 : (!quake.ref, !quake.ref) -> ()
  quake.dealloc %q0 : !quake.ref
  quake.dealloc %q2 : !quake.ref
  quake.dealloc %q1 : !quake.ref
  return
}

// CHECK-LABEL:   func.func @t() {
// CHECK:           %[[VAL_0:.*]] = quake.null_wire
// CHECK:           %[[VAL_1:.*]] = quake.null_wire
// CHECK:           %[[VAL_2:.*]] = quake.null_wire
// CHECK:           %[[VAL_3:.*]]:2 = quake.x [%[[VAL_1]]] %[[VAL_0]] : (!quake.wire, !quake.wire) -> (!quake.wire, !quake.wire)
// CHECK:           %[[VAL_4:.*]]:2 = quake.y [%[[VAL_2]]] %[[VAL_3]]#1 : (!quake.wire, !quake.wire) -> (!quake.wire, !quake.wire)
// CHECK:           %[[VAL_5:.*]] = quake.h %[[VAL_3]]#0 : (!quake.wire) -> !quake.wire
// CHECK:           %[[VAL_6:.*]]:2 = quake.z [%[[VAL_5]]] %[[VAL_4]]#1 : (!quake.wire, !quake.wire) -> (!quake.wire, !quake.wire)
// CHECK:           quake.sink %[[VAL_6]]#1 : !quake.wire
// CHECK:           quake.sink %[[VAL_4]]#0 : !quake.wire
// CHECK:           quake.sink %[[VAL_6]]#0 : !quake.wire
// CHECK:           return
// CHECK:         }

func.func @t2(%arg0: !quake.veq<?>) {
  %c0_i64 = arith.constant 0 : i64
  %c10_i64 = arith.constant 10 : i64
  %c1_i64 = arith.constant 1 : i64
  %0 = cc.alloca i64
  cc.store %c10_i64, %0 : !cc.ptr<i64>
  cc.scope {
    %1 = cc.alloca i64
    cc.store %c0_i64, %1 : !cc.ptr<i64>
    cc.loop while {
      %2 = cc.load %1 : !cc.ptr<i64>
      %3 = cc.load %0 : !cc.ptr<i64>
      %4 = arith.cmpi ult, %2, %3 : i64
      cc.condition %4
    } do {
      %2 = cc.load %1 : !cc.ptr<i64>
      %3 = quake.extract_ref %arg0[%2] : (!quake.veq<?>, i64) -> !quake.ref
      quake.h %3 : (!quake.ref) -> ()
      %4 = cc.load %1 : !cc.ptr<i64>
      %5 = quake.extract_ref %arg0[%4] : (!quake.veq<?>, i64) -> !quake.ref
      %bits = quake.mz %5 name "b" : (!quake.ref) -> !quake.measure
      %bit = quake.discriminate %bits : (!quake.measure) -> i1
      %6 = cc.alloca i1
      cc.store %bit, %6 : !cc.ptr<i1>
      %7 = cc.load %6 : !cc.ptr<i1>
      cf.cond_br %7, ^bb1, ^bb2
    ^bb1:
      cc.break
    ^bb2:
      cc.continue
    } step {
      %2 = cc.load %1 : !cc.ptr<i64>
      %3 = arith.addi %2, %c1_i64 : i64
      cc.store %3, %1 : !cc.ptr<i64>
    }
  }
  return
}

// CHECK-LABEL:   func.func @t2(
// CHECK-SAME:                  %[[VAL_0:.*]]: !quake.veq<?>) {
// CHECK:           %[[VAL_1:.*]] = arith.constant 0 : i64
// CHECK:           %[[VAL_2:.*]] = arith.constant 10 : i64
// CHECK:           %[[VAL_3:.*]] = arith.constant 1 : i64
// CHECK:           %[[VAL_4:.*]] = cc.undef i64
// CHECK:           cc.scope {
// CHECK:             %[[VAL_6:.*]] = cc.undef i64
// CHECK:             %[[VAL_7:.*]] = cc.loop while ((%[[VAL_8:.*]] = %[[VAL_1]]) -> (i64)) {
// CHECK:               %[[VAL_10:.*]] = arith.cmpi ult, %[[VAL_8]], %[[VAL_2]] : i64
// CHECK:               cc.condition %[[VAL_10]](%[[VAL_8]] : i64)
// CHECK:             } do {
// CHECK:             ^bb0(%[[VAL_11:.*]]: i64):
// CHECK:               %[[VAL_13:.*]] = quake.extract_ref %[[VAL_0]]{{\[}}%[[VAL_11]]] : (!quake.veq<?>, i64) -> !quake.ref
// CHECK:               %[[VAL_14:.*]] = quake.unwrap %[[VAL_13]] : (!quake.ref) -> !quake.wire
// CHECK:               %[[VAL_15:.*]] = quake.h %[[VAL_14]] : (!quake.wire) -> !quake.wire
// CHECK:               quake.wrap %[[VAL_15]] to %[[VAL_13]] : !quake.wire, !quake.ref
// CHECK:               %[[VAL_16:.*]] = quake.extract_ref %[[VAL_0]]{{\[}}%[[VAL_11]]] : (!quake.veq<?>, i64) -> !quake.ref
// CHECK:               %[[VAL_17:.*]] = quake.unwrap %[[VAL_16]] : (!quake.ref) -> !quake.wire
// CHECK:               %[[VAL_118:.*]], %[[VAL_19:.*]] = quake.mz %[[VAL_17]] name "b" : (!quake.wire) -> (!quake.measure, !quake.wire)
// CHECK:               quake.wrap %[[VAL_19]] to %[[VAL_16]] : !quake.wire, !quake.ref
// CHECK:               %[[VAL_18:.*]] = quake.discriminate %[[VAL_118]] :
// CHECK:               cf.cond_br %[[VAL_18]], ^bb1(%[[VAL_11]] : i64), ^bb2(%[[VAL_11]] : i64)
// CHECK:             ^bb1(%[[VAL_21:.*]]: i64):
// CHECK:               cc.break %[[VAL_21]] : i64
// CHECK:             ^bb2(%[[VAL_23:.*]]: i64):
// CHECK:               cc.continue %[[VAL_23]] : i64
// CHECK:             } step {
// CHECK:             ^bb0(%[[VAL_25:.*]]: i64):
// CHECK:               %[[VAL_27:.*]] = arith.addi %[[VAL_25]], %[[VAL_3]] : i64
// CHECK:               cc.continue %[[VAL_27]] : i64
// CHECK:             }
// CHECK:           }
// CHECK:           return
// CHECK:         }

func.func @t3(%arg0: !quake.veq<?>) {
  %c0_i64 = arith.constant 0 : i64
  %c10_i64 = arith.constant 10 : i64
  %c1_i64 = arith.constant 1 : i64
  %0 = cc.alloca i64
  cc.store %c10_i64, %0 : !cc.ptr<i64>
  cc.scope {
    %1 = cc.alloca i64
    cc.store %c0_i64, %1 : !cc.ptr<i64>
    cc.loop while {
      %2 = cc.load %1 : !cc.ptr<i64>
      %3 = cc.load %0 : !cc.ptr<i64>
      %4 = arith.cmpi ult, %2, %3 : i64
      cc.condition %4
    } do {
      %2 = cc.load %1 : !cc.ptr<i64>
      %3 = quake.extract_ref %arg0[%2] : (!quake.veq<?>, i64) -> !quake.ref
      quake.h %3 : (!quake.ref) -> ()
      %4 = cc.load %1 : !cc.ptr<i64>
      %5 = quake.extract_ref %arg0[%4] : (!quake.veq<?>, i64) -> !quake.ref
      %bits = quake.mz %5 name "b" : (!quake.ref) -> !quake.measure
      %bit = quake.discriminate %bits : (!quake.measure) -> i1
      %6 = cc.alloca i1
      cc.store %bit, %6 : !cc.ptr<i1>
      %7 = cc.load %6 : !cc.ptr<i1>
      cf.br ^bb2
    ^bb2:
      cc.continue
    } step {
      %2 = cc.load %1 : !cc.ptr<i64>
      %3 = arith.addi %2, %c1_i64 : i64
      cc.store %3, %1 : !cc.ptr<i64>
    }
  }
  return
}

// CHECK-LABEL:   func.func @t3(
// CHECK-SAME:                  %[[VAL_0:.*]]: !quake.veq<?>) {
// CHECK:           %[[VAL_1:.*]] = arith.constant 0 : i64
// CHECK:           %[[VAL_2:.*]] = arith.constant 10 : i64
// CHECK:           %[[VAL_3:.*]] = arith.constant 1 : i64
// CHECK:           %[[VAL_4:.*]] = cc.undef i64
// CHECK:           cc.scope {
// CHECK:             %[[VAL_6:.*]] = cc.undef i64
// CHECK:             %[[VAL_7:.*]] = cc.loop while ((%[[VAL_8:.*]] = %[[VAL_1]]) -> (i64)) {
// CHECK:               %[[VAL_10:.*]] = arith.cmpi ult, %[[VAL_8]], %[[VAL_2]] : i64
// CHECK:               cc.condition %[[VAL_10]](%[[VAL_8]] : i64)
// CHECK:             } do {
// CHECK:             ^bb0(%[[VAL_11:.*]]: i64):
// CHECK:               %[[VAL_13:.*]] = quake.extract_ref %[[VAL_0]]{{\[}}%[[VAL_11]]] : (!quake.veq<?>, i64) -> !quake.ref
// CHECK:               %[[VAL_14:.*]] = quake.unwrap %[[VAL_13]] : (!quake.ref) -> !quake.wire
// CHECK:               %[[VAL_15:.*]] = quake.h %[[VAL_14]] : (!quake.wire) -> !quake.wire
// CHECK:               quake.wrap %[[VAL_15]] to %[[VAL_13]] : !quake.wire, !quake.ref
// CHECK:               %[[VAL_16:.*]] = quake.extract_ref %[[VAL_0]]{{\[}}%[[VAL_11]]] : (!quake.veq<?>, i64) -> !quake.ref
// CHECK:               %[[VAL_17:.*]] = quake.unwrap %[[VAL_16]] : (!quake.ref) -> !quake.wire
// CHECK:               %[[VAL_118:.*]], %[[VAL_19:.*]] = quake.mz %[[VAL_17]] name "b" : (!quake.wire) -> (!quake.measure, !quake.wire)
// CHECK:               quake.wrap %[[VAL_19]] to %[[VAL_16]] : !quake.wire, !quake.ref
// CHECK:               %[[VAL_18:.*]] = quake.discriminate %[[VAL_118]] :
// CHECK:               %[[VAL_20:.*]] = cc.undef i1
// CHECK:               cf.br ^bb1(%[[VAL_11]] : i64)
// CHECK:             ^bb1(%[[VAL_21:.*]]: i64):
// CHECK:               cc.continue %[[VAL_21]] : i64
// CHECK:             } step {
// CHECK:             ^bb0(%[[VAL_23:.*]]: i64):
// CHECK:               %[[VAL_25:.*]] = arith.addi %[[VAL_23]], %[[VAL_3]] : i64
// CHECK:               cc.continue %[[VAL_25]] : i64
// CHECK:             }
// CHECK:           }
// CHECK:           return
// CHECK:         }


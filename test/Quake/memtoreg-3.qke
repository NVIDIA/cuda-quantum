// ========================================================================== //
// Copyright (c) 2022 - 2023 NVIDIA Corporation & Affiliates.                 //
// All rights reserved.                                                       //
//                                                                            //
// This source code and the accompanying materials are made available under   //
// the terms of the Apache License 2.0 which accompanies this distribution.   //
// ========================================================================== //

// RUN: cudaq-opt --memtoreg %s | FileCheck %s
// RUN: cudaq-opt --memtoreg --regtomem %s | FileCheck --check-prefix=TOMEM %s

func.func private @u(i32)

func.func @register_promote_conditional(%arg : i1) {
  %0 = cc.alloca i32
  %1 = arith.constant 0 : i32
  cc.store %1, %0 : !cc.ptr<i32>
  cf.cond_br %arg, ^bb4, ^bb5
 ^bb4:
  %2 = arith.constant 4 : i32
  cc.store %2, %0 : !cc.ptr<i32>
  %3 = cc.load %0 : !cc.ptr<i32>
  call @u(%3) : (i32) -> ()
  cf.br ^bb6
 ^bb5:
  %4 = cc.load %0 : !cc.ptr<i32>
  call @u(%4) : (i32) -> ()
  cf.br ^bb6
 ^bb6:
  return
}

// CHECK-LABEL:   func.func @register_promote_conditional(
// CHECK-SAME:      %[[VAL_0:.*]]: i1) {
// CHECK-DAG:       %[[VAL_1:.*]] = cc.undef i32
// CHECK-DAG:       %[[VAL_2:.*]] = arith.constant 0 : i32
// CHECK:           cf.cond_br %[[VAL_0]], ^bb1, ^bb2(%[[VAL_2]] : i32)
// CHECK:         ^bb1:
// CHECK:           %[[VAL_3:.*]] = arith.constant 4 : i32
// CHECK:           call @u(%[[VAL_3]]) : (i32) -> ()
// CHECK:           cf.br ^bb3
// CHECK:         ^bb2(%[[VAL_4:.*]]: i32):
// CHECK:           call @u(%[[VAL_4]]) : (i32) -> ()
// CHECK:           cf.br ^bb3
// CHECK:         ^bb3:
// CHECK:           return
// CHECK:         }

// TOMEM-LABEL:   func.func @register_promote_conditional(
// TOMEM-SAME:      %[[VAL_0:.*]]: i1) {
// TOMEM-DAG:       %[[VAL_1:.*]] = cc.undef i32
// TOMEM-DAG:       %[[VAL_2:.*]] = arith.constant 0 : i32
// TOMEM:           cf.cond_br %[[VAL_0]], ^bb1, ^bb2(%[[VAL_2]] : i32)
// TOMEM:         ^bb1:
// TOMEM:           %[[VAL_3:.*]] = arith.constant 4 : i32
// TOMEM:           call @u(%[[VAL_3]]) : (i32) -> ()
// TOMEM:           cf.br ^bb3
// TOMEM:         ^bb2(%[[VAL_4:.*]]: i32):
// TOMEM:           call @u(%[[VAL_4]]) : (i32) -> ()
// TOMEM:           cf.br ^bb3
// TOMEM:         ^bb3:
// TOMEM:           return
// TOMEM:         }

func.func @promote_induction_variable() {
  %c0_i64 = arith.constant 0 : i64
  %c1_i64 = arith.constant 1 : i64
  %c2_i64 = arith.constant 2 : i64
  %veq = quake.alloca !quake.veq<2>
  %q0 = quake.extract_ref %veq[%c0_i64] : (!quake.veq<2> ,i64) -> !quake.ref
  %alloca = cc.alloca i64
  cc.store %c0_i64, %alloca : !cc.ptr<i64>
  cc.loop while {
    %3 = cc.load %alloca : !cc.ptr<i64>
    %4 = arith.cmpi ult, %3, %c2_i64 : i64
    cc.condition %4
  } do {
    %3 = cc.load %alloca : !cc.ptr<i64>
    %4 = quake.extract_ref %veq[%3] : (!quake.veq<2> ,i64) -> !quake.ref
    cc.continue
  } step {
    %3 = cc.load %alloca : !cc.ptr<i64>
    %4 = arith.addi %3, %c1_i64 : i64
    cc.store %4, %alloca : !cc.ptr<i64>
  }
  %2 = quake.mz %veq : (!quake.veq<2>) -> !cc.stdvec<!quake.measure>
  quake.dealloc %veq : !quake.veq<2>
  return
}

// CHECK-LABEL:   func.func @promote_induction_variable() {
// CHECK-DAG:       %[[VAL_0:.*]] = arith.constant 0 : i64
// CHECK-DAG:       %[[VAL_1:.*]] = arith.constant 1 : i64
// CHECK-DAG:       %[[VAL_2:.*]] = arith.constant 2 : i64
// CHECK-DAG:       %[[VAL_3:.*]] = quake.alloca !quake.veq<2>
// CHECK:           %[[VAL_4:.*]] = quake.extract_ref %[[VAL_3]][%[[VAL_0]]] : (!quake.veq<2>, i64) -> !quake.ref
// CHECK:           %[[VAL_5:.*]] = quake.unwrap %[[VAL_4]] : (!quake.ref) -> !quake.wire
// CHECK:           %[[VAL_6:.*]] = cc.undef i64
// CHECK:           %[[VAL_7:.*]] = cc.loop while ((%[[VAL_8:.*]] = %[[VAL_0]]) -> (i64)) {
// CHECK:             %[[VAL_9:.*]] = arith.cmpi ult, %[[VAL_8]], %[[VAL_2]] : i64
// CHECK:             cc.condition %[[VAL_9]](%[[VAL_8]] : i64)
// CHECK:           } do {
// CHECK:           ^bb0(%[[VAL_10:.*]]: i64):
// CHECK:             %[[VAL_11:.*]] = quake.extract_ref %[[VAL_3]][%[[VAL_10]]] : (!quake.veq<2>, i64) -> !quake.ref
// CHECK:             %[[VAL_12:.*]] = quake.unwrap %[[VAL_11]] : (!quake.ref) -> !quake.wire
// CHECK:             cc.continue %[[VAL_10]] : i64
// CHECK:           } step {
// CHECK:           ^bb0(%[[VAL_13:.*]]: i64):
// CHECK:             %[[VAL_14:.*]] = arith.addi %[[VAL_13]], %[[VAL_1]] : i64
// CHECK:             cc.continue %[[VAL_14]] : i64
// CHECK:           }
// CHECK:           quake.mz %[[VAL_3]] : (!quake.veq<2>) -> !cc.stdvec<!quake.measure>
// CHECK:           quake.dealloc %[[VAL_3]] : !quake.veq<2>
// CHECK:           return
// CHECK:         }

// TOMEM-LABEL:   func.func @promote_induction_variable() {
// TOMEM-DAG:       %[[VAL_0:.*]] = arith.constant 0 : i64
// TOMEM-DAG:       %[[VAL_1:.*]] = arith.constant 1 : i64
// TOMEM-DAG:       %[[VAL_2:.*]] = arith.constant 2 : i64
// TOMEM-DAG:       %[[VAL_3:.*]] = quake.alloca !quake.veq<2>
// TOMEM:           %[[VAL_4:.*]] = quake.extract_ref %[[VAL_3]][%[[VAL_0]]] : (!quake.veq<2>, i64) -> !quake.ref
// TOMEM:           %[[VAL_5:.*]] = cc.undef i64
// TOMEM:           %[[VAL_6:.*]] = cc.loop while ((%[[VAL_7:.*]] = %[[VAL_0]]) -> (i64)) {
// TOMEM:             %[[VAL_8:.*]] = arith.cmpi ult, %[[VAL_7]], %[[VAL_2]] : i64
// TOMEM:             cc.condition %[[VAL_8]](%[[VAL_7]] : i64)
// TOMEM:           } do {
// TOMEM:           ^bb0(%[[VAL_9:.*]]: i64):
// TOMEM:             %[[VAL_10:.*]] = quake.extract_ref %[[VAL_3]][%[[VAL_9]]] : (!quake.veq<2>, i64) -> !quake.ref
// TOMEM:             cc.continue %[[VAL_9]] : i64
// TOMEM:           } step {
// TOMEM:           ^bb0(%[[VAL_11:.*]]: i64):
// TOMEM:             %[[VAL_12:.*]] = arith.addi %[[VAL_11]], %[[VAL_1]] : i64
// TOMEM:             cc.continue %[[VAL_12]] : i64
// TOMEM:           }
// TOMEM:           quake.mz %[[VAL_3]] : (!quake.veq<2>) -> !cc.stdvec<!quake.measure>
// TOMEM:           quake.dealloc %[[VAL_3]] : !quake.veq<2>
// TOMEM:           return
// TOMEM:         }

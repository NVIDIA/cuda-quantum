// ========================================================================== //
// Copyright (c) 2022 - 2023 NVIDIA Corporation & Affiliates.                 //
// All rights reserved.                                                       //
//                                                                            //
// This source code and the accompanying materials are made available under   //
// the terms of the Apache License 2.0 which accompanies this distribution.   //
// ========================================================================== //

// RUN: cudaq-opt --combine-quantum-alloc --canonicalize %s | FileCheck %s
// RUN: cudaq-opt --factor-quantum-alloc --canonicalize %s | FileCheck --check-prefixes=FACTOR %s

func.func @a() {
  %0 = quake.alloca !quake.ref
  quake.x %0 : (!quake.ref) -> ()
  %1 = quake.alloca !quake.veq<4>
  %a1 = quake.extract_ref %1 [0] : (!quake.veq<4>) -> !quake.ref
  quake.x %a1 : (!quake.ref) -> ()
  %b1 = quake.extract_ref %1 [1] : (!quake.veq<4>) -> !quake.ref
  quake.x %b1 : (!quake.ref) -> ()
  %2 = quake.alloca !quake.ref
  quake.x %2 : (!quake.ref) -> ()
  %3 = quake.alloca !quake.veq<7>
  %a3 = quake.extract_ref %3 [0] : (!quake.veq<7>) -> !quake.ref
  quake.x %a3 : (!quake.ref) -> ()
  %b3 = quake.extract_ref %3 [1] : (!quake.veq<7>) -> !quake.ref
  quake.x %b3 : (!quake.ref) -> ()
  %c3 = quake.extract_ref %3 [2] : (!quake.veq<7>) -> !quake.ref
  quake.x %c3 : (!quake.ref) -> ()
  %c1 = quake.extract_ref %1 [2] : (!quake.veq<4>) -> !quake.ref
  quake.x %c1 : (!quake.ref) -> ()
  %d1 = quake.extract_ref %1 [3] : (!quake.veq<4>) -> !quake.ref
  quake.x %d1 : (!quake.ref) -> ()
  %d3 = quake.extract_ref %3 [3] : (!quake.veq<7>) -> !quake.ref
  quake.x %d3 : (!quake.ref) -> ()
  %e3 = quake.extract_ref %3 [4] : (!quake.veq<7>) -> !quake.ref
  quake.x %e3 : (!quake.ref) -> ()
  %f3 = quake.extract_ref %3 [5] : (!quake.veq<7>) -> !quake.ref
  quake.x %f3 : (!quake.ref) -> ()
  %g3 = quake.extract_ref %3 [6] : (!quake.veq<7>) -> !quake.ref
  quake.x %g3 : (!quake.ref) -> ()
  quake.dealloc %0 : !quake.ref
  quake.dealloc %1 : !quake.veq<4>
  quake.dealloc %2 : !quake.ref
  quake.dealloc %3 : !quake.veq<7>
  return
}

// CHECK-LABEL:   func.func @a() {
// CHECK:           %[[VAL_0:.*]] = quake.alloca !quake.veq<13>
// CHECK:           %[[VAL_1:.*]] = quake.extract_ref %[[VAL_0]][0] : (!quake.veq<13>) -> !quake.ref
// CHECK:           quake.x %[[VAL_1]] : (!quake.ref) -> ()
// CHECK:           %[[VAL_2:.*]] = quake.extract_ref %[[VAL_0]][1] : (!quake.veq<13>) -> !quake.ref
// CHECK:           quake.x %[[VAL_2]] : (!quake.ref) -> ()
// CHECK:           %[[VAL_3:.*]] = quake.extract_ref %[[VAL_0]][2] : (!quake.veq<13>) -> !quake.ref
// CHECK:           quake.x %[[VAL_3]] : (!quake.ref) -> ()
// CHECK:           %[[VAL_4:.*]] = quake.extract_ref %[[VAL_0]][5] : (!quake.veq<13>) -> !quake.ref
// CHECK:           quake.x %[[VAL_4]] : (!quake.ref) -> ()
// CHECK:           %[[VAL_5:.*]] = quake.extract_ref %[[VAL_0]][6] : (!quake.veq<13>) -> !quake.ref
// CHECK:           quake.x %[[VAL_5]] : (!quake.ref) -> ()
// CHECK:           %[[VAL_6:.*]] = quake.extract_ref %[[VAL_0]][7] : (!quake.veq<13>) -> !quake.ref
// CHECK:           quake.x %[[VAL_6]] : (!quake.ref) -> ()
// CHECK:           %[[VAL_7:.*]] = quake.extract_ref %[[VAL_0]][8] : (!quake.veq<13>) -> !quake.ref
// CHECK:           quake.x %[[VAL_7]] : (!quake.ref) -> ()
// CHECK:           %[[VAL_8:.*]] = quake.extract_ref %[[VAL_0]][3] : (!quake.veq<13>) -> !quake.ref
// CHECK:           quake.x %[[VAL_8]] : (!quake.ref) -> ()
// CHECK:           %[[VAL_9:.*]] = quake.extract_ref %[[VAL_0]][4] : (!quake.veq<13>) -> !quake.ref
// CHECK:           quake.x %[[VAL_9]] : (!quake.ref) -> ()
// CHECK:           %[[VAL_10:.*]] = quake.extract_ref %[[VAL_0]][9] : (!quake.veq<13>) -> !quake.ref
// CHECK:           quake.x %[[VAL_10]] : (!quake.ref) -> ()
// CHECK:           %[[VAL_11:.*]] = quake.extract_ref %[[VAL_0]][10] : (!quake.veq<13>) -> !quake.ref
// CHECK:           quake.x %[[VAL_11]] : (!quake.ref) -> ()
// CHECK:           %[[VAL_12:.*]] = quake.extract_ref %[[VAL_0]][11] : (!quake.veq<13>) -> !quake.ref
// CHECK:           quake.x %[[VAL_12]] : (!quake.ref) -> ()
// CHECK:           %[[VAL_13:.*]] = quake.extract_ref %[[VAL_0]][12] : (!quake.veq<13>) -> !quake.ref
// CHECK:           quake.x %[[VAL_13]] : (!quake.ref) -> ()
// CHECK:           quake.dealloc %[[VAL_0]] : !quake.veq<13>
// CHECK:           return
// CHECK:         }

// FACTOR-LABEL:   func.func @a() {
// FACTOR:           %[[VAL_0:.*]] = quake.alloca !quake.ref
// FACTOR:           quake.x %[[VAL_0]] : (!quake.ref) -> ()
// FACTOR:           %[[VAL_1:.*]] = quake.alloca !quake.ref
// FACTOR:           %[[VAL_2:.*]] = quake.alloca !quake.ref
// FACTOR:           %[[VAL_3:.*]] = quake.alloca !quake.ref
// FACTOR:           %[[VAL_4:.*]] = quake.alloca !quake.ref
// FACTOR:           quake.x %[[VAL_1]] : (!quake.ref) -> ()
// FACTOR:           quake.x %[[VAL_2]] : (!quake.ref) -> ()
// FACTOR:           %[[VAL_5:.*]] = quake.alloca !quake.ref
// FACTOR:           quake.x %[[VAL_5]] : (!quake.ref) -> ()
// FACTOR:           %[[VAL_6:.*]] = quake.alloca !quake.ref
// FACTOR:           %[[VAL_7:.*]] = quake.alloca !quake.ref
// FACTOR:           %[[VAL_8:.*]] = quake.alloca !quake.ref
// FACTOR:           %[[VAL_9:.*]] = quake.alloca !quake.ref
// FACTOR:           %[[VAL_10:.*]] = quake.alloca !quake.ref
// FACTOR:           %[[VAL_11:.*]] = quake.alloca !quake.ref
// FACTOR:           %[[VAL_12:.*]] = quake.alloca !quake.ref
// FACTOR:           quake.x %[[VAL_6]] : (!quake.ref) -> ()
// FACTOR:           quake.x %[[VAL_7]] : (!quake.ref) -> ()
// FACTOR:           quake.x %[[VAL_8]] : (!quake.ref) -> ()
// FACTOR:           quake.x %[[VAL_3]] : (!quake.ref) -> ()
// FACTOR:           quake.x %[[VAL_4]] : (!quake.ref) -> ()
// FACTOR:           quake.x %[[VAL_9]] : (!quake.ref) -> ()
// FACTOR:           quake.x %[[VAL_10]] : (!quake.ref) -> ()
// FACTOR:           quake.x %[[VAL_11]] : (!quake.ref) -> ()
// FACTOR:           quake.x %[[VAL_12]] : (!quake.ref) -> ()
// FACTOR:           quake.dealloc %[[VAL_0]] : !quake.ref
// FACTOR:           quake.dealloc %[[VAL_1]] : !quake.ref
// FACTOR:           quake.dealloc %[[VAL_2]] : !quake.ref
// FACTOR:           quake.dealloc %[[VAL_3]] : !quake.ref
// FACTOR:           quake.dealloc %[[VAL_4]] : !quake.ref
// FACTOR:           quake.dealloc %[[VAL_5]] : !quake.ref
// FACTOR:           quake.dealloc %[[VAL_6]] : !quake.ref
// FACTOR:           quake.dealloc %[[VAL_7]] : !quake.ref
// FACTOR:           quake.dealloc %[[VAL_8]] : !quake.ref
// FACTOR:           quake.dealloc %[[VAL_9]] : !quake.ref
// FACTOR:           quake.dealloc %[[VAL_10]] : !quake.ref
// FACTOR:           quake.dealloc %[[VAL_11]] : !quake.ref
// FACTOR:           quake.dealloc %[[VAL_12]] : !quake.ref
// FACTOR:           return
// FACTOR:         }

func.func @b(%c4: i16) {
  %1 = quake.alloca !quake.veq<4>
  %2 = quake.alloca !quake.ref
  %3 = quake.extract_ref %1 [%c4] : (!quake.veq<4>, i16) -> !quake.ref
  quake.x [%2] %3 : (!quake.ref, !quake.ref) -> ()
  return
}

// CHECK-LABEL:   func.func @b(
// CHECK-SAME:                 %[[VAL_0:.*]]: i16) {
// CHECK:           %[[VAL_1:.*]] = quake.alloca !quake.veq<5>
// CHECK:           %[[VAL_2:.*]] = quake.extract_ref %[[VAL_1]][4] : (!quake.veq<5>) -> !quake.ref
// CHECK:           %[[VAL_3:.*]] = cc.cast unsigned %[[VAL_0]] : (i16) -> i64
// CHECK:           %[[VAL_4:.*]] = quake.extract_ref %[[VAL_1]][%[[VAL_3]]] : (!quake.veq<5>, i64) -> !quake.ref
// CHECK:           quake.x [%[[VAL_2]]] %[[VAL_4]] : (!quake.ref, !quake.ref) -> ()
// CHECK:           return
// CHECK:         }

func.func @c() {
  %1 = quake.alloca !quake.veq<4>
  %c2 = arith.constant 2 : i64
  %c3 = arith.constant 3 : i64
  %2 = quake.subveq %1, %c2, %c3 : (!quake.veq<4>, i64, i64) -> !quake.veq<2>
  %c1 = arith.constant 1 : i64
  %3 = quake.subveq %2, %c1, %c1 : (!quake.veq<2>, i64, i64) -> !quake.veq<1>
  %4 = quake.extract_ref %3 [0] : (!quake.veq<1>) -> !quake.ref
  quake.x %4 : (!quake.ref) -> ()
  return
}

// CHECK-LABEL:   func.func @c() {
// CHECK:           %[[VAL_0:.*]] = quake.alloca !quake.veq<4>
// CHECK:           %[[VAL_1:.*]] = quake.extract_ref %[[VAL_0]][3] : (!quake.veq<4>) -> !quake.ref
// CHECK:           quake.x %[[VAL_1]] : (!quake.ref) -> ()
// CHECK:           return
// CHECK:         }

func.func @d(%c2: i64, %c3: i64, %c1: i64, %off: i16) {
  %1 = quake.alloca !quake.veq<4>
  %2 = quake.subveq %1, %c2, %c3 : (!quake.veq<4>, i64, i64) -> !quake.veq<2>
  %3 = quake.subveq %2, %c1, %c1 : (!quake.veq<2>, i64, i64) -> !quake.veq<1>
  %4 = quake.extract_ref %3 [%off] : (!quake.veq<1>, i16) -> !quake.ref
  quake.x %4 : (!quake.ref) -> ()
  return
}

// CHECK-LABEL:   func.func @d(
// CHECK-SAME:      %[[VAL_0:.*]]: i64, %[[VAL_1:.*]]: i64, %[[VAL_2:.*]]: i64, %[[VAL_3:.*]]: i16) {
// CHECK:           %[[VAL_4:.*]] = quake.alloca !quake.veq<4>
// CHECK:           %[[VAL_5:.*]] = arith.addi %[[VAL_0]], %[[VAL_2]] : i64
// CHECK:           %[[VAL_6:.*]] = cc.cast unsigned %[[VAL_3]] : (i16) -> i64
// CHECK:           %[[VAL_7:.*]] = arith.addi %[[VAL_6]], %[[VAL_5]] : i64
// CHECK:           %[[VAL_8:.*]] = quake.extract_ref %[[VAL_4]]{{\[}}%[[VAL_7]]] : (!quake.veq<4>, i64) -> !quake.ref
// CHECK:           quake.x %[[VAL_8]] : (!quake.ref) -> ()
// CHECK:           return
// CHECK:         }

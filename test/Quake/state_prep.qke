// ========================================================================== //
// Copyright (c) 2022 - 2024 NVIDIA Corporation & Affiliates.                 //
// All rights reserved.                                                       //
//                                                                            //
// This source code and the accompanying materials are made available under   //
// the terms of the Apache License 2.0 which accompanies this distribution.   //
// ========================================================================== //

// RUN: cudaq-opt -state-prep -canonicalize -symbol-dce %s | FileCheck %s

module {
  func.func @test_complex_constant_array() attributes {"cudaq-entrypoint", "cudaq-kernel", no_this} {
    %0 = cc.address_of @test_complex_constant_array.rodata_0 : !cc.ptr<!cc.array<complex<f32> x 4>>
    %1 = quake.alloca !quake.veq<2>
    %2 = quake.init_state %1, %0 : (!quake.veq<2>, !cc.ptr<!cc.array<complex<f32> x 4>>) -> !quake.veq<2>
    return
  }
  cc.global constant private @test_complex_constant_array.rodata_0 (dense<[(0.707106769,0.000000e+00), (0.707106769,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00)]> : tensor<4xcomplex<f32>>) : !cc.array<complex<f32> x 4>

// CHECK-LABEL:   func.func @test_complex_constant_array() attributes {"cudaq-entrypoint", "cudaq-kernel", no_this} {
// CHECK:           %[[VAL_1:.*]] = arith.constant 0.000000e+00 : f64
// CHECK:           %[[VAL_0:.*]] = arith.constant 0.78539816339744839 : f64
// CHECK:           %[[VAL_2:.*]] = quake.alloca !quake.veq<2>
// CHECK:           %[[VAL_3:.*]] = quake.extract_ref %[[VAL_2]][1] : (!quake.veq<2>) -> !quake.ref
// CHECK:           quake.ry (%[[VAL_1]]) %[[VAL_3]] : (f64, !quake.ref) -> ()
// CHECK:           %[[VAL_4:.*]] = quake.extract_ref %[[VAL_2]][0] : (!quake.veq<2>) -> !quake.ref
// CHECK:           quake.ry (%[[VAL_0]]) %[[VAL_4:.*]] : (f64, !quake.ref) -> ()
// CHECK:           quake.x [%[[VAL_3]]] %[[VAL_4:.*]] : (!quake.ref, !quake.ref) -> ()
// CHECK:           quake.ry (%[[VAL_0]]) %[[VAL_4:.*]] : (f64, !quake.ref) -> ()
// CHECK:           quake.x [%[[VAL_3]]] %[[VAL_4:.*]] : (!quake.ref, !quake.ref) -> ()
// CHECK:           return
// CHECK:         }

 func.func @test_real_constant_array() attributes {"cudaq-entrypoint", "cudaq-kernel", no_this} {
    %0 = cc.address_of @test_real_constant_array.rodata_0 : !cc.ptr<!cc.array<f64 x 4>>
    %1 = quake.alloca !quake.veq<2>
    %2 = quake.init_state %1, %0 : (!quake.veq<2>, !cc.ptr<!cc.array<f64 x 4>>) -> !quake.veq<2>
    return
  }
  cc.global constant private @test_real_constant_array.rodata_0 (dense<[0.70710678118654757, 0.70710678118654757, 0.000000e+00, 0.000000e+00]> : tensor<4xf64>) : !cc.array<f64 x 4>

// CHECK-LABEL:   func.func @test_real_constant_array() attributes {"cudaq-entrypoint", "cudaq-kernel", no_this} {
// CHECK:           %[[VAL_1:.*]] = arith.constant 0.000000e+00 : f64
// CHECK:           %[[VAL_0:.*]] = arith.constant 0.78539816339744839 : f64
// CHECK:           %[[VAL_3:.*]] = quake.alloca !quake.veq<2>
// CHECK:           %[[VAL_4:.*]] = quake.extract_ref %[[VAL_3]][1] : (!quake.veq<2>) -> !quake.ref
// CHECK:           quake.ry (%[[VAL_1]]) %[[VAL_4]] : (f64, !quake.ref) -> ()
// CHECK:           %[[VAL_5:.*]] = quake.extract_ref %[[VAL_3]][0] : (!quake.veq<2>) -> !quake.ref
// CHECK:           quake.ry (%[[VAL_0]]) %[[VAL_5]] : (f64, !quake.ref) -> ()
// CHECK:           quake.x [%[[VAL_4]]] %[[VAL_5]] : (!quake.ref, !quake.ref) -> ()
// CHECK:           quake.ry (%[[VAL_0]]) %[[VAL_5]] : (f64, !quake.ref) -> ()
// CHECK:           quake.x [%[[VAL_4]]] %[[VAL_5]] : (!quake.ref, !quake.ref) -> ()
// CHECK:           return
// CHECK:         }

  func.func @test_complex_array_param() attributes {"cudaq-entrypoint", "cudaq-kernel", no_this} {
    %0 = cc.address_of @test_complex_array_param.rodata_init_state.0 : !cc.ptr<!cc.array<complex<f32> x 4>>
    %1 = cc.cast %0 : (!cc.ptr<!cc.array<complex<f32> x 4>>) -> !cc.ptr<!cc.array<complex<f32> x ?>>
    %2 = quake.alloca !quake.veq<2>
    %3 = quake.init_state %2, %1 : (!quake.veq<2>, !cc.ptr<!cc.array<complex<f32> x ?>>) -> !quake.veq<2>
    return
  }
  cc.global constant private @test_complex_array_param.rodata_init_state.0 (dense<[(0.707106769,0.000000e+00), (0.707106769,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00)]> : tensor<4xcomplex<f32>>) : !cc.array<complex<f32> x 4>

// CHECK-LABEL:   func.func @test_complex_array_param() attributes {"cudaq-entrypoint", "cudaq-kernel", no_this} {
// CHECK:           %[[VAL_1:.*]] = arith.constant 0.000000e+00 : f64
// CHECK:           %[[VAL_0:.*]] = arith.constant 0.78539816339744839 : f64
// CHECK:           %[[VAL_2:.*]] = quake.alloca !quake.veq<2>
// CHECK:           %[[VAL_3:.*]] = quake.extract_ref %[[VAL_2]][1] : (!quake.veq<2>) -> !quake.ref
// CHECK:           quake.ry (%[[VAL_1]]) %[[VAL_3]] : (f64, !quake.ref) -> ()
// CHECK:           %[[VAL_4:.*]] = quake.extract_ref %[[VAL_2]][0] : (!quake.veq<2>) -> !quake.ref
// CHECK:           quake.ry (%[[VAL_0]]) %[[VAL_4]] : (f64, !quake.ref) -> ()
// CHECK:           quake.x [%[[VAL_3]]] %[[VAL_4]] : (!quake.ref, !quake.ref) -> ()
// CHECK:           quake.ry (%[[VAL_0]]) %[[VAL_4]] : (f64, !quake.ref) -> ()
// CHECK:           quake.x [%[[VAL_3]]] %[[VAL_4]] : (!quake.ref, !quake.ref) -> ()
// CHECK:           return
// CHECK:         }

  func.func @test_real_array_param() attributes {"cudaq-entrypoint", "cudaq-kernel", no_this} {
    %0 = cc.address_of @test_real_array_param.rodata_init_state.1 : !cc.ptr<!cc.array<f32 x 4>>
    %1 = cc.cast %0 : (!cc.ptr<!cc.array<f32 x 4>>) -> !cc.ptr<!cc.array<f32 x ?>>
    %2 = quake.alloca !quake.veq<2>
    %3 = quake.init_state %2, %1 : (!quake.veq<2>, !cc.ptr<!cc.array<f32 x ?>>) -> !quake.veq<2>
    return
  }
  cc.global constant private @test_real_array_param.rodata_init_state.1 (dense<[0.707106769, 0.707106769, 0.000000e+00, 0.000000e+00]> : tensor<4xf32>) : !cc.array<f32 x 4>

// CHECK-LABEL:   func.func @test_real_array_param() attributes {"cudaq-entrypoint", "cudaq-kernel", no_this} {
// CHECK:           %[[VAL_1:.*]] = arith.constant 0.000000e+00 : f64
// CHECK:           %[[VAL_0:.*]] = arith.constant 0.78539816339744839 : f64
// CHECK:           %[[VAL_2:.*]] = quake.alloca !quake.veq<2>
// CHECK:           %[[VAL_3:.*]] = quake.extract_ref %[[VAL_2:.*]][1] : (!quake.veq<2>) -> !quake.ref
// CHECK:           quake.ry (%[[VAL_1]]) %[[VAL_3]] : (f64, !quake.ref) -> ()
// CHECK:           %[[VAL_4:.*]] = quake.extract_ref %0[0] : (!quake.veq<2>) -> !quake.ref
// CHECK:           quake.ry (%[[VAL_0]]) %[[VAL_4]] : (f64, !quake.ref) -> ()
// CHECK:           quake.x [%[[VAL_3]]] %[[VAL_4]] : (!quake.ref, !quake.ref) -> ()
// CHECK:           quake.ry (%[[VAL_0]]) %[[VAL_4]] : (f64, !quake.ref) -> ()
// CHECK:           quake.x [%[[VAL_3]]] %[[VAL_4]] : (!quake.ref, !quake.ref) -> ()
// CHECK:           return
// CHECK:         }
}

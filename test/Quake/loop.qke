// ========================================================================== //
// Copyright (c) 2022 - 2023 NVIDIA Corporation & Affiliates.                 //
// All rights reserved.                                                       //
//                                                                            //
// This source code and the accompanying materials are made available under   //
// the terms of the Apache License 2.0 which accompanies this distribution.   //
// ========================================================================== //

// RUN: cudaq-opt %s | cudaq-opt | FileCheck %s

func.func @test_old_for() {
  %1 = memref.alloc() : memref<i32>
  %zero = arith.constant 0 : i32
  memref.store %zero, %1[] : memref<i32>
  cc.loop while {
    %3 = memref.load %1[] : memref<i32>
    %ten = arith.constant 10 : i32
    %8 = arith.cmpi slt, %3, %ten : i32
    cc.condition %8
  } do {
    ^bb0:
      %13 = memref.load %1[] : memref<i32>
      %five = arith.constant 5 : i32
      %18 = arith.cmpi slt, %13, %five : i32
      cf.cond_br %18, ^bb1, ^bb2
    ^bb1:
      cc.break
    ^bb2:
      cc.continue
  } step {
    %4 = arith.constant 12 : i32
    %5 = memref.load %1[] : memref<i32>
    %6 = arith.addi %4, %5 : i32
    memref.store %6, %1[] : memref<i32>
    cc.continue
  }
  func.return
}

// CHECK-LABEL:   func.func @test_old_for() {
// CHECK:           %[[VAL_0:.*]] = memref.alloc() : memref<i32>
// CHECK:           %[[VAL_1:.*]] = arith.constant 0 : i32
// CHECK:           memref.store %[[VAL_1]], %[[VAL_0]][] : memref<i32>
// CHECK:           cc.loop while {
// CHECK:             %[[VAL_2:.*]] = memref.load %[[VAL_0]][] : memref<i32>
// CHECK:             %[[VAL_3:.*]] = arith.constant 10 : i32
// CHECK:             %[[VAL_4:.*]] = arith.cmpi slt, %[[VAL_2]], %[[VAL_3]] : i32
// CHECK:             cc.condition %[[VAL_4]]
// CHECK:           } do {
// CHECK:             %[[VAL_5:.*]] = memref.load %[[VAL_0]][] : memref<i32>
// CHECK:             %[[VAL_6:.*]] = arith.constant 5 : i32
// CHECK:             %[[VAL_7:.*]] = arith.cmpi slt, %[[VAL_5]], %[[VAL_6]] : i32
// CHECK:             cf.cond_br %[[VAL_7]], ^bb1, ^bb2
// CHECK:           ^bb1:
// CHECK:             cc.break
// CHECK:           ^bb2:
// CHECK:             cc.continue
// CHECK:           } step {
// CHECK:             %[[VAL_8:.*]] = arith.constant 12 : i32
// CHECK:             %[[VAL_9:.*]] = memref.load %[[VAL_0]][] : memref<i32>
// CHECK:             %[[VAL_10:.*]] = arith.addi %[[VAL_8]], %[[VAL_9]] : i32
// CHECK:             memref.store %[[VAL_10]], %[[VAL_0]][] : memref<i32>
// CHECK:           }
// CHECK:           return
// CHECK:         }

func.func @test_scoped_for() {
  cc.scope {
    %1 = memref.alloc() : memref<i32>
    %zero = arith.constant 0 : i32
    memref.store %zero, %1[] : memref<i32>
    cc.loop while {
      %3 = memref.load %1[] : memref<i32>
      %ten = arith.constant 10 : i32
      %8 = arith.cmpi slt, %3, %ten : i32
      cc.condition %8
    } do {
      ^bb0:
        %13 = memref.load %1[] : memref<i32>
        %five = arith.constant 5 : i32
        %18 = arith.cmpi slt, %13, %five : i32
        cf.cond_br %18, ^bb1, ^bb2
      ^bb1:
        cc.break
      ^bb2:
        cc.continue
    } step {
      %4 = arith.constant 12 : i32
      %5 = memref.load %1[] : memref<i32>
      %6 = arith.addi %4, %5 : i32
      memref.store %6, %1[] : memref<i32>
      cc.continue
    }
    cc.continue
  }
  func.return
}

// CHECK-LABEL:   func.func @test_scoped_for() {
// CHECK:           cc.scope {
// CHECK:             %[[VAL_0:.*]] = memref.alloc() : memref<i32>
// CHECK:             %[[VAL_1:.*]] = arith.constant 0 : i32
// CHECK:             memref.store %[[VAL_1]], %[[VAL_0]][] : memref<i32>
// CHECK:             cc.loop while {
// CHECK:               %[[VAL_2:.*]] = memref.load %[[VAL_0]][] : memref<i32>
// CHECK:               %[[VAL_3:.*]] = arith.constant 10 : i32
// CHECK:               %[[VAL_4:.*]] = arith.cmpi slt, %[[VAL_2]], %[[VAL_3]] : i32
// CHECK:               cc.condition %[[VAL_4]]
// CHECK:             } do {
// CHECK:               %[[VAL_5:.*]] = memref.load %[[VAL_0]][] : memref<i32>
// CHECK:               %[[VAL_6:.*]] = arith.constant 5 : i32
// CHECK:               %[[VAL_7:.*]] = arith.cmpi slt, %[[VAL_5]], %[[VAL_6]] : i32
// CHECK:               cf.cond_br %[[VAL_7]], ^bb1, ^bb2
// CHECK:             ^bb1:
// CHECK:               cc.break
// CHECK:             ^bb2:
// CHECK:               cc.continue
// CHECK:             } step {
// CHECK:               %[[VAL_8:.*]] = arith.constant 12 : i32
// CHECK:               %[[VAL_9:.*]] = memref.load %[[VAL_0]][] : memref<i32>
// CHECK:               %[[VAL_10:.*]] = arith.addi %[[VAL_8]], %[[VAL_9]] : i32
// CHECK:               memref.store %[[VAL_10]], %[[VAL_0]][] : memref<i32>
// CHECK:             }
// CHECK:           }
// CHECK:           return
// CHECK:         }

func.func @test_scoped_for_with_args() {
  cc.scope {
    %1 = memref.alloc() : memref<i32>
    %zero = arith.constant 0 : i32
    memref.store %zero, %1[] : memref<i32>
    %z2 = cc.loop while ((%xtra = %zero) -> i32) {
      %3 = memref.load %1[] : memref<i32>
      %ten = arith.constant 10 : i32
      %8 = arith.cmpi slt, %3, %ten : i32
      cc.condition %8 (%xtra : i32)
    } do {
      ^bb0(%x2 : i32):
        %13 = memref.load %1[] : memref<i32>
        %five = arith.constant 5 : i32
        %18 = arith.cmpi slt, %13, %five : i32
        cf.cond_br %18, ^bb1, ^bb2
      ^bb1:
        cc.break %x2 : i32
      ^bb2:
        cc.continue %x2 : i32
    } step {
      ^bb4 (%x3 : i32):
        %4 = arith.constant 12 : i32
        %16 = arith.addi %x3, %4 : i32
        %5 = memref.load %1[] : memref<i32>
        %6 = arith.addi %16, %5 : i32
        memref.store %6, %1[] : memref<i32>
        cc.continue %x3 : i32
    }
  }
  func.return
}

func.func private @getI32() -> i32

// CHECK-LABEL:   func.func @test_scoped_for_with_args() {
// CHECK:           cc.scope {
// CHECK:             %[[VAL_0:.*]] = memref.alloc() : memref<i32>
// CHECK:             %[[VAL_1:.*]] = arith.constant 0 : i32
// CHECK:             memref.store %[[VAL_1]], %[[VAL_0]][] : memref<i32>
// CHECK:             %[[VAL_2:.*]] = cc.loop while ((%[[VAL_3:.*]] = %[[VAL_1]]) -> (i32)) {
// CHECK:               %[[VAL_4:.*]] = memref.load %[[VAL_0]][] : memref<i32>
// CHECK:               %[[VAL_5:.*]] = arith.constant 10 : i32
// CHECK:               %[[VAL_6:.*]] = arith.cmpi slt, %[[VAL_4]], %[[VAL_5]] : i32
// CHECK:               cc.condition %[[VAL_6]](%[[VAL_3]] : i32)
// CHECK:             } do {
// CHECK:             ^bb0(%[[VAL_7:.*]]: i32):
// CHECK:               %[[VAL_8:.*]] = memref.load %[[VAL_0]][] : memref<i32>
// CHECK:               %[[VAL_9:.*]] = arith.constant 5 : i32
// CHECK:               %[[VAL_10:.*]] = arith.cmpi slt, %[[VAL_8]], %[[VAL_9]] : i32
// CHECK:               cf.cond_br %[[VAL_10]], ^bb1, ^bb2
// CHECK:             ^bb1:
// CHECK:               cc.break %[[VAL_7]] : i32
// CHECK:             ^bb2:
// CHECK:               cc.continue %[[VAL_7]] : i32
// CHECK:             } step {
// CHECK:             ^bb0(%[[VAL_11:.*]]: i32):
// CHECK:               %[[VAL_12:.*]] = arith.constant 12 : i32
// CHECK:               %[[VAL_13:.*]] = arith.addi %[[VAL_11]], %[[VAL_12]] : i32
// CHECK:               %[[VAL_14:.*]] = memref.load %[[VAL_0]][] : memref<i32>
// CHECK:               %[[VAL_15:.*]] = arith.addi %[[VAL_13]], %[[VAL_14]] : i32
// CHECK:               memref.store %[[VAL_15]], %[[VAL_0]][] : memref<i32>
// CHECK:               cc.continue %[[VAL_11]] : i32
// CHECK:             }
// CHECK:           }
// CHECK:           return
// CHECK:         }

// CHECK-LABEL:   func.func private @getI32() -> i32

func.func @test_do_while() {
  %1 = memref.alloc() : memref<i32>
  %zero = arith.constant 0 : i32
  memref.store %zero, %1[] : memref<i32>
  cc.loop do {
    ^bb0:
      %8 = func.call @getI32() : () -> i32
      memref.store %8, %1[] : memref<i32>
      cc.continue
  } while {
    %3 = arith.constant 1 : i1
    cc.condition %3
  }
  func.return
}

// CHECK-LABEL:   func.func @test_do_while() {
// CHECK:           %[[VAL_0:.*]] = memref.alloc() : memref<i32>
// CHECK:           %[[VAL_1:.*]] = arith.constant 0 : i32
// CHECK:           memref.store %[[VAL_1]], %[[VAL_0]][] : memref<i32>
// CHECK:           cc.loop do {
// CHECK:             %[[VAL_2:.*]] = func.call @getI32() : () -> i32
// CHECK:             memref.store %[[VAL_2]], %[[VAL_0]][] : memref<i32>
// CHECK:           } while {
// CHECK:             %[[VAL_3:.*]] = arith.constant true
// CHECK:             cc.condition %[[VAL_3]]
// CHECK:           }
// CHECK:           return
// CHECK:         }

func.func @test_do_while_with_args() {
  %1 = memref.alloc() : memref<i32>
  %zero = arith.constant 0 : i32
  memref.store %zero, %1[] : memref<i32>
  cc.loop do ((%i = %zero) -> i32) {
      %8 = func.call @getI32() : () -> i32
      memref.store %i, %1[] : memref<i32>
      cc.continue %i : i32
  } while {
    ^bb9(%arg0 : i32):
      %3 = arith.constant 1 : i32
      %33 = arith.constant 97 : i32
      %34 = arith.addi %arg0, %3 : i32
      %35 = arith.cmpi slt, %34, %33 : i32
      cc.condition %35 (%34 : i32)
  }
  func.return
}

// CHECK-LABEL:   func.func @test_do_while_with_args() {
// CHECK:           %[[VAL_0:.*]] = memref.alloc() : memref<i32>
// CHECK:           %[[VAL_1:.*]] = arith.constant 0 : i32
// CHECK:           memref.store %[[VAL_1]], %[[VAL_0]][] : memref<i32>
// CHECK:           %[[VAL_2:.*]] = cc.loop do ((%[[VAL_3:.*]] = %[[VAL_1]]) -> (i32)) {
// CHECK:             %[[VAL_4:.*]] = func.call @getI32() : () -> i32
// CHECK:             memref.store %[[VAL_3]], %[[VAL_0]][] : memref<i32>
// CHECK:             cc.continue %[[VAL_3]] : i32
// CHECK:           } while {
// CHECK:           ^bb0(%[[VAL_5:.*]]: i32):
// CHECK:             %[[VAL_6:.*]] = arith.constant 1 : i32
// CHECK:             %[[VAL_7:.*]] = arith.constant 97 : i32
// CHECK:             %[[VAL_8:.*]] = arith.addi %[[VAL_5]], %[[VAL_6]] : i32
// CHECK:             %[[VAL_9:.*]] = arith.cmpi slt, %[[VAL_8]], %[[VAL_7]] : i32
// CHECK:             cc.condition %[[VAL_9]](%[[VAL_8]] : i32)
// CHECK:           }
// CHECK:           return
// CHECK:         }

func.func @test_while() {
  %1 = memref.alloc() : memref<i32>
  %zero = arith.constant 0 : i32
  memref.store %zero, %1[] : memref<i32>
  cc.loop while {
    %3 = arith.constant 1 : i1
    cc.condition %3
  } do {
    ^bb0:
      %8 = func.call @getI32() : () -> i32
      memref.store %8, %1[] : memref<i32>
      cc.continue
  }
  func.return
}

// CHECK-LABEL:   func.func @test_while() {
// CHECK:           %[[VAL_0:.*]] = memref.alloc() : memref<i32>
// CHECK:           %[[VAL_1:.*]] = arith.constant 0 : i32
// CHECK:           memref.store %[[VAL_1]], %[[VAL_0]][] : memref<i32>
// CHECK:           cc.loop while {
// CHECK:             %[[VAL_2:.*]] = arith.constant true
// CHECK:             cc.condition %[[VAL_2]]
// CHECK:           } do {
// CHECK:             %[[VAL_3:.*]] = func.call @getI32() : () -> i32
// CHECK:             memref.store %[[VAL_3]], %[[VAL_0]][] : memref<i32>
// CHECK:             cc.continue
// CHECK:           }
// CHECK:           return
// CHECK:         }

func.func @test_if_else(%c : i1) {
  %1 = memref.alloc() : memref<i32>
  %zero = arith.constant 0 : i32
  memref.store %zero, %1[] : memref<i32>
  cc.if (%c) {
    ^bb0:
      %3 = arith.constant 1 : i1
      cc.continue
  } else {
    ^bb1:
      %8 = func.call @getI32() : () -> i32
      cf.br ^bb2
    ^bb2:
      cc.continue
  }
  func.return
}

// CHECK-LABEL:   func.func @test_if_else(
// CHECK-SAME:                            %[[VAL_0:.*]]: i1) {
// CHECK:           %[[VAL_1:.*]] = memref.alloc() : memref<i32>
// CHECK:           %[[VAL_2:.*]] = arith.constant 0 : i32
// CHECK:           memref.store %[[VAL_2]], %[[VAL_1]][] : memref<i32>
// CHECK:           cc.if(%[[VAL_0]]) {
// CHECK:             %[[VAL_3:.*]] = arith.constant true
// CHECK:           } else {
// CHECK:             %[[VAL_4:.*]] = func.call @getI32() : () -> i32
// CHECK:             cf.br ^bb1
// CHECK:           ^bb1:
// CHECK:             cc.continue
// CHECK:           }
// CHECK:           return
// CHECK:         }

func.func @test_if(%c : i1) {
  %1 = memref.alloc() : memref<i32>
  %zero = arith.constant 0 : i32
  memref.store %zero, %1[] : memref<i32>
  cc.if (%c) {
    ^bb1:
      %8 = func.call @getI32() : () -> i32
      cf.br ^bb2
    ^bb2:
      cc.continue
  }
  func.return
}

// CHECK-LABEL:   func.func @test_if(
// CHECK-SAME:                       %[[VAL_0:.*]]: i1) {
// CHECK:           %[[VAL_1:.*]] = memref.alloc() : memref<i32>
// CHECK:           %[[VAL_2:.*]] = arith.constant 0 : i32
// CHECK:           memref.store %[[VAL_2]], %[[VAL_1]][] : memref<i32>
// CHECK:           cc.if(%[[VAL_0]]) {
// CHECK:             %[[VAL_3:.*]] = func.call @getI32() : () -> i32
// CHECK:             cf.br ^bb1
// CHECK:           ^bb1:
// CHECK:             cc.continue
// CHECK:           }
// CHECK:           return
// CHECK:         }

func.func @test_if_else_thread(%c : i1) -> i32 {
  %1 = memref.alloc() : memref<i32>
  %zero = arith.constant 0 : i32
  memref.store %zero, %1[] : memref<i32>
  %2 = cc.if (%c) -> i32 {
      %3 = arith.constant 1 : i32
      cc.continue %3 : i32
  } else {
      %8 = func.call @getI32() : () -> i32
      cc.continue %8 : i32
  }
  func.return %2 : i32
}

// CHECK-LABEL:   func.func @test_if_else_thread(
// CHECK-SAME:                                   %[[VAL_0:.*]]: i1) -> i32 {
// CHECK:           %[[VAL_1:.*]] = memref.alloc() : memref<i32>
// CHECK:           %[[VAL_2:.*]] = arith.constant 0 : i32
// CHECK:           memref.store %[[VAL_2]], %[[VAL_1]][] : memref<i32>
// CHECK:           %[[VAL_3:.*]] = cc.if(%[[VAL_0]]) -> i32 {
// CHECK:             %[[VAL_4:.*]] = arith.constant 1 : i32
// CHECK:             cc.continue %[[VAL_4]] : i32
// CHECK:           } else {
// CHECK:             %[[VAL_5:.*]] = func.call @getI32() : () -> i32
// CHECK:             cc.continue %[[VAL_5]] : i32
// CHECK:           }
// CHECK:           return %[[VAL_3]] : i32
// CHECK:         }

func.func @empty_step() {
  %c1_i32 = arith.constant 1 : i32
  %0 = arith.extsi %c1_i32 : i32 to i64
  %1 = quake.alloca !quake.veq<?>[%0 : i64]
  cc.scope {
    %c3_i32 = arith.constant 3 : i32
    %3 = arith.extsi %c3_i32 : i32 to i64
    %4 = cc.alloca i64
    cc.store %3, %4 : !cc.ptr<i64>
    cc.loop while {
      %5 = cc.load %4 : !cc.ptr<i64>
      %c1_i64 = arith.constant 1 : i64
      %6 = arith.subi %5, %c1_i64 : i64
      cc.store %6, %4 : !cc.ptr<i64>
      %c0_i32 = arith.constant 0 : i32
      %7 = arith.extsi %c0_i32 : i32 to i64
      %8 = arith.cmpi ugt, %5, %7 : i64
      cc.condition %8
    } do {
      %c0_i32 = arith.constant 0 : i32
      %5 = arith.extsi %c0_i32 : i32 to i64
      %6 = quake.extract_ref %1[%5] : (!quake.veq<?>, i64) -> !quake.ref
      quake.x %6 : (!quake.ref) -> ()
      cc.continue
    } step {
    }
  }
  %2 = quake.mz %1 : (!quake.veq<?>) -> !cc.stdvec<!quake.measure>
  return
}

// CHECK-LABEL:   func.func @empty_step() {
// CHECK:           cc.scope {
// CHECK:             cc.loop while {
// CHECK:               cc.condition %
// CHECK:             } do {
// CHECK:               quake.x
// CHECK:               cc.continue
// CHECK:             }
// CHECK:           }
// CHECK:           quake.mz
// CHECK:         }

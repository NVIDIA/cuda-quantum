// ========================================================================== //
// Copyright (c) 2022 - 2024 NVIDIA Corporation & Affiliates.                 //
// All rights reserved.                                                       //
//                                                                            //
// This source code and the accompanying materials are made available under   //
// the terms of the Apache License 2.0 which accompanies this distribution.   //
// ========================================================================== //

// RUN: cudaq-opt -canonicalize %s | FileCheck %s

func.func @folding_conversion() -> (complex<f32>, complex<f64>) {
  %1 = complex.constant [5.0, 6.0] : complex<f64>
  %2 = cc.cast %1 : (complex<f64>) -> complex<f32>
  %3 = complex.constant [15.0 : f32, 6.2 :f32] : complex<f32>
  %4 = cc.cast %3 : (complex<f32>) -> complex<f64>
  return %2, %4 : complex<f32>, complex<f64>
}

// CHECK-LABEL:   func.func @folding_conversion() -> (complex<f32>, complex<f64>) {
// CHECK:           %[[VAL_0:.*]] = complex.constant [5.000000e+00 : f32, 6.000000e+00 : f32] : complex<f32>
// CHECK:           %[[VAL_1:.*]] = complex.constant [1.500000e+01, 6.1999998092651367] : complex<f64>
// CHECK:           return %[[VAL_0]], %[[VAL_1]] : complex<f32>, complex<f64>
// CHECK:         }

func.func @folds_like_a_lawn_chair() {
    %cst = arith.constant 0.000000e+00 : f32
    %cst_0 = arith.constant 0.70710678118654757 : f64
    %0 = cc.cast %cst_0 : (f64) -> f32
    %1 = complex.create %0, %cst : complex<f32>
    %2 = cc.cast %cst_0 : (f64) -> f32
    %3 = complex.create %2, %cst : complex<f32>
    %4 = complex.create %cst, %cst : complex<f32>
    %5 = complex.create %cst, %cst : complex<f32>
    %6 = cc.alloca !cc.array<complex<f32> x 4>
    %7 = cc.cast %6 : (!cc.ptr<!cc.array<complex<f32> x 4>>) -> !cc.ptr<complex<f32>>
    cc.store %1, %7 : !cc.ptr<complex<f32>>
    return
}

// CHECK-LABEL:   func.func @folds_like_a_lawn_chair() {
// CHECK:           %[[VAL_0:.*]] = complex.constant [0.707106769 : f32, 0.000000e+00 : f32] : complex<f32>
// CHECK:           %[[VAL_1:.*]] = cc.alloca !cc.array<complex<f32> x 4>
// CHECK:           %[[VAL_2:.*]] = cc.cast %[[VAL_1]] : (!cc.ptr<!cc.array<complex<f32> x 4>>) -> !cc.ptr<complex<f32>>
// CHECK:           cc.store %[[VAL_0]], %[[VAL_2]] : !cc.ptr<complex<f32>>
// CHECK:           return
// CHECK:         }

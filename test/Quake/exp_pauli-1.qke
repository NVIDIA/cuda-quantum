// ========================================================================== //
// Copyright (c) 2022 - 2025 NVIDIA Corporation & Affiliates.                 //
// All rights reserved.                                                       //
//                                                                            //
// This source code and the accompanying materials are made available under   //
// the terms of the Apache License 2.0 which accompanies this distribution.   //
// ========================================================================== //

// RUN: cudaq-opt --convert-to-qir-api=api=base-profile %s | FileCheck %s

func.func @ep_0() {
  %0 = quake.alloca !quake.ref
  %1 = arith.constant 2.0 : f64
  quake.exp_pauli (%1) %0 to "XYZ" : (f64, !quake.ref) -> ()
  quake.mz %0 : (!quake.ref) -> !quake.measure
  return
}

func.func @ep_1() {
  %0 = quake.alloca !quake.ref
  %1 = arith.constant 2.0 : f64
  %2 = cc.string_literal "XYZ" : !cc.ptr<!cc.array<i8 x 4>>
  quake.exp_pauli (%1) %0 to %2 : (f64, !quake.ref, !cc.ptr<!cc.array<i8 x 4>>) -> ()
  quake.mz %0 : (!quake.ref) -> !quake.measure
  return
}

// CHECK-LABEL:   func.func @ep_0() {
// CHECK:           %[[VAL_0:.*]] = arith.constant 8 : i32
// CHECK:           %[[VAL_1:.*]] = arith.constant 3 : i64
// CHECK:           %[[VAL_2:.*]] = arith.constant 0 : i64
// CHECK:           %[[VAL_3:.*]] = arith.constant 2.000000e+00 : f64
// CHECK:           %[[VAL_4:.*]] = arith.constant 1 : i64
// CHECK:           %[[VAL_5:.*]] = cc.alloca !cc.array<!cc.struct<{!cc.ptr<i8>, i64}> x 1>
// CHECK:           %[[VAL_6:.*]] = cc.cast %[[VAL_2]] : (i64) -> !cc.ptr<!llvm.struct<"Qubit", opaque>>
// CHECK:           %[[VAL_7:.*]] = call @__quantum__rt__array_create_1d(%[[VAL_0]], %[[VAL_4]]) : (i32, i64) -> !cc.ptr<!llvm.struct<"Array", opaque>>
// CHECK:           %[[VAL_8:.*]] = call @__quantum__rt__array_get_element_ptr_1d(%[[VAL_7]], %[[VAL_2]]) : (!cc.ptr<!llvm.struct<"Array", opaque>>, i64) -> !cc.ptr<!cc.ptr<!llvm.struct<"Qubit", opaque>>>
// CHECK:           cc.store %[[VAL_6]], %[[VAL_8]] : !cc.ptr<!cc.ptr<!llvm.struct<"Qubit", opaque>>>
// CHECK:           %[[VAL_9:.*]] = cc.address_of @cstr.58595A00 : !cc.ptr<!llvm.array<4 x i8>>
// CHECK:           %[[VAL_10:.*]] = cc.cast %[[VAL_9]] : (!cc.ptr<!llvm.array<4 x i8>>) -> !cc.ptr<i8>
// CHECK:           %[[VAL_11:.*]] = cc.cast %[[VAL_5]] : (!cc.ptr<!cc.array<!cc.struct<{!cc.ptr<i8>, i64}> x 1>>) -> !cc.ptr<!cc.ptr<i8>>
// CHECK:           cc.store %[[VAL_10]], %[[VAL_11]] : !cc.ptr<!cc.ptr<i8>>
// CHECK:           %[[VAL_12:.*]] = cc.compute_ptr %[[VAL_5]][0, 1] : (!cc.ptr<!cc.array<!cc.struct<{!cc.ptr<i8>, i64}> x 1>>) -> !cc.ptr<i64>
// CHECK:           cc.store %[[VAL_1]], %[[VAL_12]] : !cc.ptr<i64>
// CHECK:           %[[VAL_13:.*]] = cc.cast %[[VAL_5]] : (!cc.ptr<!cc.array<!cc.struct<{!cc.ptr<i8>, i64}> x 1>>) -> !cc.ptr<i8>
// CHECK:           call @__quantum__qis__exp_pauli__body(%[[VAL_3]], %[[VAL_7]], %[[VAL_13]]) : (f64, !cc.ptr<!llvm.struct<"Array", opaque>>, !cc.ptr<i8>) -> ()
// CHECK:           %[[VAL_14:.*]] = cc.cast %[[VAL_2]] : (i64) -> !cc.ptr<!llvm.struct<"Result", opaque>>
// CHECK:           call @__quantum__qis__mz__body(%[[VAL_6]], %[[VAL_14]]) {registerName = "r00000"} : (!cc.ptr<!llvm.struct<"Qubit", opaque>>, !cc.ptr<!llvm.struct<"Result", opaque>>) -> ()
// CHECK:           %[[VAL_15:.*]] = cc.address_of @cstr.72303030303000 : !cc.ptr<!llvm.array<7 x i8>>
// CHECK:           %[[VAL_16:.*]] = cc.cast %[[VAL_15]] : (!cc.ptr<!llvm.array<7 x i8>>) -> !cc.ptr<i8>
// CHECK:           call @__quantum__rt__result_record_output(%[[VAL_14]], %[[VAL_16]]) {ResultIndex = 0 : i64, registerName = "r00000"} : (!cc.ptr<!llvm.struct<"Result", opaque>>, !cc.ptr<i8>) -> ()
// CHECK:           return
// CHECK:         }

// CHECK-LABEL:   func.func @ep_1() {
// CHECK:           %[[VAL_0:.*]] = arith.constant 8 : i32
// CHECK:           %[[VAL_1:.*]] = arith.constant 3 : i64
// CHECK:           %[[VAL_2:.*]] = arith.constant 0 : i64
// CHECK:           %[[VAL_3:.*]] = arith.constant 2.000000e+00 : f64
// CHECK:           %[[VAL_4:.*]] = arith.constant 1 : i64
// CHECK:           %[[VAL_5:.*]] = cc.alloca !cc.array<!cc.struct<{!cc.ptr<i8>, i64}> x 1>
// CHECK:           %[[VAL_6:.*]] = cc.cast %[[VAL_2]] : (i64) -> !cc.ptr<!llvm.struct<"Qubit", opaque>>
// CHECK:           %[[VAL_7:.*]] = cc.string_literal "XYZ" : !cc.ptr<!cc.array<i8 x 4>>
// CHECK:           %[[VAL_8:.*]] = call @__quantum__rt__array_create_1d(%[[VAL_0]], %[[VAL_4]]) : (i32, i64) -> !cc.ptr<!llvm.struct<"Array", opaque>>
// CHECK:           %[[VAL_9:.*]] = call @__quantum__rt__array_get_element_ptr_1d(%[[VAL_8]], %[[VAL_2]]) : (!cc.ptr<!llvm.struct<"Array", opaque>>, i64) -> !cc.ptr<!cc.ptr<!llvm.struct<"Qubit", opaque>>>
// CHECK:           cc.store %[[VAL_6]], %[[VAL_9]] : !cc.ptr<!cc.ptr<!llvm.struct<"Qubit", opaque>>>
// CHECK:           %[[VAL_10:.*]] = cc.cast %[[VAL_7]] : (!cc.ptr<!cc.array<i8 x 4>>) -> !cc.ptr<i8>
// CHECK:           %[[VAL_11:.*]] = cc.cast %[[VAL_5]] : (!cc.ptr<!cc.array<!cc.struct<{!cc.ptr<i8>, i64}> x 1>>) -> !cc.ptr<!cc.ptr<i8>>
// CHECK:           cc.store %[[VAL_10]], %[[VAL_11]] : !cc.ptr<!cc.ptr<i8>>
// CHECK:           %[[VAL_12:.*]] = cc.compute_ptr %[[VAL_5]][0, 1] : (!cc.ptr<!cc.array<!cc.struct<{!cc.ptr<i8>, i64}> x 1>>) -> !cc.ptr<i64>
// CHECK:           cc.store %[[VAL_1]], %[[VAL_12]] : !cc.ptr<i64>
// CHECK:           %[[VAL_13:.*]] = cc.cast %[[VAL_5]] : (!cc.ptr<!cc.array<!cc.struct<{!cc.ptr<i8>, i64}> x 1>>) -> !cc.ptr<i8>
// CHECK:           call @__quantum__qis__exp_pauli__body(%[[VAL_3]], %[[VAL_8]], %[[VAL_13]]) : (f64, !cc.ptr<!llvm.struct<"Array", opaque>>, !cc.ptr<i8>) -> ()
// CHECK:           %[[VAL_14:.*]] = cc.cast %[[VAL_2]] : (i64) -> !cc.ptr<!llvm.struct<"Result", opaque>>
// CHECK:           call @__quantum__qis__mz__body(%[[VAL_6]], %[[VAL_14]]) {registerName = "r00000"} : (!cc.ptr<!llvm.struct<"Qubit", opaque>>, !cc.ptr<!llvm.struct<"Result", opaque>>) -> ()
// CHECK:           %[[VAL_15:.*]] = cc.address_of @cstr.72303030303000 : !cc.ptr<!llvm.array<7 x i8>>
// CHECK:           %[[VAL_16:.*]] = cc.cast %[[VAL_15]] : (!cc.ptr<!llvm.array<7 x i8>>) -> !cc.ptr<i8>
// CHECK:           call @__quantum__rt__result_record_output(%[[VAL_14]], %[[VAL_16]]) {ResultIndex = 0 : i64, registerName = "r00000"} : (!cc.ptr<!llvm.struct<"Result", opaque>>, !cc.ptr<i8>) -> ()
// CHECK:           return
// CHECK:         }

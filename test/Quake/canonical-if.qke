// ========================================================================== //
// Copyright (c) 2022 - 2024 NVIDIA Corporation & Affiliates.                 //
// All rights reserved.                                                       //
//                                                                            //
// This source code and the accompanying materials are made available under   //
// the terms of the Apache License 2.0 which accompanies this distribution.   //
// ========================================================================== //

// RUN: cudaq-opt -canonicalize %s | FileCheck %s

module {
  func.func @if_single_result() {
    %c0_i64 = arith.constant 1 : i64
    %c1_i64 = arith.constant 1 : i64
    %true = arith.constant true
    %false = arith.constant false
    %0 = quake.alloca !quake.veq<2>
    %2 = cc.if(%true) -> i64 {
      cc.continue %c0_i64 : i64
    } else {
      cc.continue %c1_i64 : i64
    }
    %6 = quake.extract_ref %0[%2] : (!quake.veq<2>, i64) -> !quake.ref
    quake.x %6 : (!quake.ref) -> ()
    return
  }

// CHECK-LABEL:  func.func @if_single_result() {
// CHECK:          %[[VAL_0:.*]] = quake.alloca !quake.veq<2>
// CHECK:          %[[VAL_1:.*]] = quake.extract_ref %[[VAL_0]][1] : (!quake.veq<2>) -> !quake.ref
// CHECK:          quake.x %[[VAL_1]] : (!quake.ref) -> ()
// CHECK:          return
// CHECK:        }

  func.func @if_multiple_results() {
    %c0_i64 = arith.constant 0 : i64
    %c1_i64 = arith.constant 1 : i64
    %true = arith.constant true
    %false = arith.constant false
    %0 = quake.alloca !quake.veq<2>
    %2:2 = cc.if(%true) -> (i64, i64) {
      cc.continue %c0_i64, %c1_i64 : i64, i64
    } else {
      cc.continue %c1_i64, %c0_i64 : i64, i64
    }
    %6 = quake.extract_ref %0[%2#0] : (!quake.veq<2>, i64) -> !quake.ref
    %7 = quake.extract_ref %0[%2#1] : (!quake.veq<2>, i64) -> !quake.ref
    quake.x %6 : (!quake.ref) -> ()
    quake.x %7 : (!quake.ref) -> ()
    return
  }

// CHECK-LABEL:  func.func @if_multiple_results() {
// CHECK:          %[[VAL_0:.*]] = quake.alloca !quake.veq<2>
// CHECK:          %[[VAL_1:.*]] = quake.extract_ref %[[VAL_0]][0] : (!quake.veq<2>) -> !quake.ref
// CHECK:          %[[VAL_2:.*]] = quake.extract_ref %[[VAL_0]][1] : (!quake.veq<2>) -> !quake.ref
// CHECK:          quake.x %[[VAL_1]] : (!quake.ref) -> ()
// CHECK:          quake.x %[[VAL_2]] : (!quake.ref) -> ()
// CHECK:          return
// CHECK:        }
}

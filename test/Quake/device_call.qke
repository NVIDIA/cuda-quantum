// ========================================================================== //
// Copyright (c) 2022 - 2025 NVIDIA Corporation & Affiliates.                 //
// All rights reserved.                                                       //
//                                                                            //
// This source code and the accompanying materials are made available under   //
// the terms of the Apache License 2.0 which accompanies this distribution.   //
// ========================================================================== //

// RUN: cudaq-opt -canonicalize -distributed-device-call -cse %s | FileCheck %s

func.func @__nvqpp__mlirgen__function_callGpu.1(%arg0: !cc.struct<"device_ptr" {i64, i64, i64}>) attributes {"cudaq-entrypoint", "cudaq-kernel", no_this} {
  %c1_i64 = arith.constant 1 : i64
  %0 = cc.alloca !cc.struct<"device_ptr" {i64, i64, i64}>
  cc.store %arg0, %0 : !cc.ptr<!cc.struct<"device_ptr" {i64, i64, i64}>>
  %1 = quake.alloca !quake.ref
  quake.h %1 : (!quake.ref) -> ()
  %2 = cc.resolve_device_ptr %0 : (!cc.ptr<!cc.struct<"device_ptr" {i64, i64, i64}>>) -> !cc.ptr<i32>
  cc.device_call @incrementInt<%c1_i64 * %c1_i64>(%2) : (i64, i64, !cc.ptr<i32>) -> ()
  return
}
  
func.func private @incrementInt(!cc.ptr<i32>) attributes {"cudaq-devicecall"}

func.func @__nvqpp__mlirgen__function_callback.2(%arg0 : i64, %arg1 : i64) attributes {"cudaq-entrypoint", "cudaq-kernel", no_this} {
  %1 = quake.alloca !quake.ref
  quake.h %1 : (!quake.ref) -> ()
  %2 = arith.constant 4 : i64
  %3 = cc.device_call @addThem on %2 (%arg0, %arg1) : (i64, i64, i64) -> i64
  return
}
  
func.func private @addThem(i64, i64) -> i64 attributes {"cudaq-devicecall"}

// clang-format off
// CHECK-LABEL:   func.func @__nvqpp__mlirgen__function_callGpu.1(
// CHECK-SAME:      %[[VAL_0:.*]]: !cc.struct<"device_ptr" {i64, i64, i64}>) attributes {"cudaq-entrypoint", "cudaq-kernel", no_this} {
// CHECK:           %[[VAL_1:.*]] = cc.alloca !cc.struct<"device_ptr" {i64, i64, i64}>
// CHECK:           cc.store %[[VAL_0]], %[[VAL_1]] : !cc.ptr<!cc.struct<"device_ptr" {i64, i64, i64}>>
// CHECK:           %[[VAL_2:.*]] = quake.alloca !quake.ref
// CHECK:           quake.h %[[VAL_2]] : (!quake.ref) -> ()
// CHECK:           %[[VAL_3:.*]] = call @__nvqpp__device_extract_device_ptr(%[[VAL_1]]) : (!cc.ptr<!cc.struct<"device_ptr" {i64, i64, i64}>>) -> !cc.ptr<i8>
// CHECK:           %[[VAL_4:.*]] = cc.cast %[[VAL_3]] : (!cc.ptr<i8>) -> !cc.ptr<i32>
// CHECK:           call @marshal.incrementInt(%[[VAL_4]]) : (!cc.ptr<i32>) -> ()
// CHECK:           return
// CHECK:         }
// CHECK:         func.func private @incrementInt(!cc.ptr<i32>) attributes {"cudaq-devicecall"}

// CHECK-LABEL:   func.func @__nvqpp__mlirgen__function_callback.2(
// CHECK-SAME:      %[[VAL_0:.*]]: i64, %[[VAL_1:.*]]: i64) attributes {"cudaq-entrypoint", "cudaq-kernel", no_this} {
// CHECK:           %[[VAL_2:.*]] = quake.alloca !quake.ref
// CHECK:           quake.h %[[VAL_2]] : (!quake.ref) -> ()
// CHECK:           %[[VAL_3:.*]] = call @marshal.addThem(%[[VAL_0]], %[[VAL_1]]) : (i64, i64) -> i64
// CHECK:           return
// CHECK:         }
// CHECK:         func.func private @addThem(i64, i64) -> i64 attributes {"cudaq-devicecall"}
// CHECK:         func.func private @__nvqpp__device_extract_device_ptr(!cc.ptr<!cc.struct<"device_ptr" {i64, i64, i64}>>) -> !cc.ptr<i8>
// CHECK:         func.func private @cudaqRegisterCallbackName(!cc.ptr<i8>, !cc.ptr<i8>, !cc.ptr<i8>)
// CHECK:         func.func private @__nvqpp__device_callback_run(i64, !cc.ptr<i8>, !cc.ptr<i8>, !cc.ptr<i8>, i64, i64, i64, i64) -> !cc.struct<{!cc.ptr<i8>, i64}>

// CHECK-LABEL:   func.func private @__nvqpp_zeroDynamicResult() -> !cc.struct<{!cc.ptr<i8>, i64}> {
// CHECK:           %[[VAL_0:.*]] = arith.constant 0 : i64
// CHECK:           %[[VAL_1:.*]] = cc.cast %[[VAL_0]] : (i64) -> !cc.ptr<i8>
// CHECK:           %[[VAL_2:.*]] = cc.undef !cc.struct<{!cc.ptr<i8>, i64}>
// CHECK:           %[[VAL_3:.*]] = cc.insert_value %[[VAL_2]][0], %[[VAL_1]] : (!cc.struct<{!cc.ptr<i8>, i64}>, !cc.ptr<i8>) -> !cc.struct<{!cc.ptr<i8>, i64}>
// CHECK:           %[[VAL_4:.*]] = cc.insert_value %[[VAL_3]][1], %[[VAL_0]] : (!cc.struct<{!cc.ptr<i8>, i64}>, i64) -> !cc.struct<{!cc.ptr<i8>, i64}>
// CHECK:           return %[[VAL_4]] : !cc.struct<{!cc.ptr<i8>, i64}>
// CHECK:         }
// CHECK:         func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)
// CHECK:         func.func private @__nvqpp_initializeStringFromSpan(!cc.ptr<i8>, !cc.ptr<i8>, i64)
// CHECK:         func.func private @__nvqpp_deconstructString(!cc.ptr<i8>)

// CHECK-LABEL:   func.func @marshal.addThem(
// CHECK-SAME:      %[[VAL_0:.*]]: i64, %[[VAL_1:.*]]: i64) -> i64 {
// CHECK:           %[[VAL_2:.*]] = arith.constant 0 : i64
// CHECK:           %[[VAL_3:.*]] = constant @unmarshal.addThem : (!cc.ptr<i8>, i1) -> !cc.struct<{!cc.ptr<i8>, i64}>
// CHECK:           %[[VAL_4:.*]] = cc.address_of @addThem.callbackName : !cc.ptr<!llvm.array<8 x i8>>
// CHECK:           %[[VAL_5:.*]] = cc.cast %[[VAL_4]] : (!cc.ptr<!llvm.array<8 x i8>>) -> !cc.ptr<i8>
// CHECK:           %[[VAL_6:.*]] = cc.func_ptr %[[VAL_3]] : ((!cc.ptr<i8>, i1) -> !cc.struct<{!cc.ptr<i8>, i64}>) -> !cc.ptr<i8>
// CHECK:           %[[VAL_7:.*]] = cc.alloca i64
// CHECK:           %[[VAL_8:.*]] = cc.sizeof !cc.struct<{i64, i64, i64}> : i64
// CHECK:           %[[VAL_9:.*]] = cc.alloca i8{{\[}}%[[VAL_8]] : i64]
// CHECK:           %[[VAL_10:.*]] = cc.cast %[[VAL_9]] : (!cc.ptr<!cc.array<i8 x ?>>) -> !cc.ptr<!cc.struct<{i64, i64, i64}>>
// CHECK:           %[[VAL_11:.*]] = cc.compute_ptr %[[VAL_10]][0] : (!cc.ptr<!cc.struct<{i64, i64, i64}>>) -> !cc.ptr<i64>
// CHECK:           cc.store %[[VAL_0]], %[[VAL_11]] : !cc.ptr<i64>
// CHECK:           %[[VAL_12:.*]] = cc.compute_ptr %[[VAL_10]][1] : (!cc.ptr<!cc.struct<{i64, i64, i64}>>) -> !cc.ptr<i64>
// CHECK:           cc.store %[[VAL_1]], %[[VAL_12]] : !cc.ptr<i64>
// CHECK:           %[[VAL_13:.*]] = cc.cast %[[VAL_9]] : (!cc.ptr<!cc.array<i8 x ?>>) -> !cc.ptr<i8>
// CHECK:           %[[VAL_14:.*]] = cc.offsetof !cc.struct<{i64, i64, i64}> [2] : i64
// CHECK:           %[[VAL_15:.*]] = call @__nvqpp__device_callback_run(%[[VAL_2]], %[[VAL_5]], %[[VAL_6]], %[[VAL_13]], %[[VAL_8]], %[[VAL_14]], %[[VAL_2]], %[[VAL_2]]) : (i64, !cc.ptr<i8>, !cc.ptr<i8>, !cc.ptr<i8>, i64, i64, i64, i64) -> !cc.struct<{!cc.ptr<i8>, i64}>
// CHECK:           %[[VAL_16:.*]] = cc.compute_ptr %[[VAL_10]][2] : (!cc.ptr<!cc.struct<{i64, i64, i64}>>) -> !cc.ptr<i64>
// CHECK:           %[[VAL_17:.*]] = cc.load %[[VAL_16]] : !cc.ptr<i64>
// CHECK:           return %[[VAL_17]] : i64
// CHECK:         }
// CHECK:         llvm.mlir.global external constant @addThem.callbackName("addThem\00") {addr_space = 0 : i32}

// CHECK-LABEL:   func.func @unmarshal.addThem(
// CHECK-SAME:      %[[VAL_0:.*]]: !cc.ptr<i8>, %[[VAL_1:.*]]: i1) -> !cc.struct<{!cc.ptr<i8>, i64}> {
// CHECK:           %[[VAL_2:.*]] = cc.cast %[[VAL_0]] : (!cc.ptr<i8>) -> !cc.ptr<!cc.struct<{i64, i64, i64}>>
// CHECK:           %[[VAL_3:.*]] = cc.compute_ptr %[[VAL_2]][0] : (!cc.ptr<!cc.struct<{i64, i64, i64}>>) -> !cc.ptr<i64>
// CHECK:           %[[VAL_4:.*]] = cc.load %[[VAL_3]] : !cc.ptr<i64>
// CHECK:           %[[VAL_5:.*]] = cc.compute_ptr %[[VAL_2]][1] : (!cc.ptr<!cc.struct<{i64, i64, i64}>>) -> !cc.ptr<i64>
// CHECK:           %[[VAL_6:.*]] = cc.load %[[VAL_5]] : !cc.ptr<i64>
// CHECK:           %[[VAL_7:.*]] = call @addThem(%[[VAL_4]], %[[VAL_6]]) : (i64, i64) -> i64
// CHECK:           %[[VAL_8:.*]] = cc.compute_ptr %[[VAL_2]][2] : (!cc.ptr<!cc.struct<{i64, i64, i64}>>) -> !cc.ptr<i64>
// CHECK:           cc.store %[[VAL_7]], %[[VAL_8]] : !cc.ptr<i64>
// CHECK:           %[[VAL_9:.*]] = call @__nvqpp_zeroDynamicResult() : () -> !cc.struct<{!cc.ptr<i8>, i64}>
// CHECK:           return %[[VAL_9]] : !cc.struct<{!cc.ptr<i8>, i64}>
// CHECK:         }

// CHECK-LABEL:   llvm.func @addThem.callbackRegFunc() {
// CHECK:           %[[VAL_0:.*]] = func.constant @unmarshal.addThem : (!cc.ptr<i8>, i1) -> !cc.struct<{!cc.ptr<i8>, i64}>
// CHECK:           %[[VAL_1:.*]] = func.constant @addThem : (i64, i64) -> i64
// CHECK:           %[[VAL_2:.*]] = cc.address_of @addThem.callbackName : !cc.ptr<!llvm.array<8 x i8>>
// CHECK:           %[[VAL_3:.*]] = cc.cast %[[VAL_2]] : (!cc.ptr<!llvm.array<8 x i8>>) -> !cc.ptr<i8>
// CHECK:           %[[VAL_4:.*]] = cc.cast %[[VAL_0]] : ((!cc.ptr<i8>, i1) -> !cc.struct<{!cc.ptr<i8>, i64}>) -> !cc.ptr<i8>
// CHECK:           %[[VAL_5:.*]] = cc.cast %[[VAL_1]] : ((i64, i64) -> i64) -> !cc.ptr<i8>
// CHECK:           func.call @cudaqRegisterCallbackName(%[[VAL_3]], %[[VAL_4]], %[[VAL_5]]) : (!cc.ptr<i8>, !cc.ptr<i8>, !cc.ptr<i8>) -> ()
// CHECK:           llvm.return
// CHECK:         }

// CHECK:         llvm.mlir.global_ctors {ctors = [@addThem.callbackRegFunc], priorities = [17 : i32]}

// CHECK-LABEL:   func.func @marshal.incrementInt(
// CHECK-SAME:      %[[VAL_0:.*]]: !cc.ptr<i32>) {
// CHECK:           %[[VAL_1:.*]] = arith.constant 0 : i64
// CHECK:           %[[VAL_2:.*]] = constant @unmarshal.incrementInt : (!cc.ptr<i8>, i1) -> !cc.struct<{!cc.ptr<i8>, i64}>
// CHECK:           %[[VAL_3:.*]] = arith.constant 2147483647 : i64
// CHECK:           %[[VAL_4:.*]] = arith.constant 1 : i64
// CHECK:           %[[VAL_5:.*]] = cc.address_of @incrementInt.callbackName : !cc.ptr<!llvm.array<13 x i8>>
// CHECK:           %[[VAL_6:.*]] = cc.cast %[[VAL_5]] : (!cc.ptr<!llvm.array<13 x i8>>) -> !cc.ptr<i8>
// CHECK:           %[[VAL_7:.*]] = cc.func_ptr %[[VAL_2]] : ((!cc.ptr<i8>, i1) -> !cc.struct<{!cc.ptr<i8>, i64}>) -> !cc.ptr<i8>
// CHECK:           %[[VAL_8:.*]] = cc.alloca i64
// CHECK:           %[[VAL_9:.*]] = cc.sizeof !cc.struct<{!cc.ptr<i32>}> : i64
// CHECK:           %[[VAL_10:.*]] = cc.alloca i8{{\[}}%[[VAL_9]] : i64]
// CHECK:           %[[VAL_11:.*]] = cc.cast %[[VAL_10]] : (!cc.ptr<!cc.array<i8 x ?>>) -> !cc.ptr<!cc.struct<{!cc.ptr<i32>}>>
// CHECK:           %[[VAL_12:.*]] = cc.compute_ptr %[[VAL_11]][0] : (!cc.ptr<!cc.struct<{!cc.ptr<i32>}>>) -> !cc.ptr<!cc.ptr<i32>>
// CHECK:           cc.store %[[VAL_0]], %[[VAL_12]] : !cc.ptr<!cc.ptr<i32>>
// CHECK:           %[[VAL_13:.*]] = cc.cast %[[VAL_10]] : (!cc.ptr<!cc.array<i8 x ?>>) -> !cc.ptr<i8>
// CHECK:           %[[VAL_14:.*]] = call @__nvqpp__device_callback_run(%[[VAL_1]], %[[VAL_6]], %[[VAL_7]], %[[VAL_13]], %[[VAL_9]], %[[VAL_3]], %[[VAL_4]], %[[VAL_4]]) : (i64, !cc.ptr<i8>, !cc.ptr<i8>, !cc.ptr<i8>, i64, i64, i64, i64) -> !cc.struct<{!cc.ptr<i8>, i64}>
// CHECK:           return
// CHECK:         }
// CHECK:         llvm.mlir.global external constant @incrementInt.callbackName("incrementInt\00") {addr_space = 0 : i32}

// CHECK-LABEL:   func.func @unmarshal.incrementInt(
// CHECK-SAME:      %[[VAL_0:.*]]: !cc.ptr<i8>, %[[VAL_1:.*]]: i1) -> !cc.struct<{!cc.ptr<i8>, i64}> {
// CHECK:           %[[VAL_2:.*]] = cc.cast %[[VAL_0]] : (!cc.ptr<i8>) -> !cc.ptr<!cc.struct<{!cc.ptr<i32>}>>
// CHECK:           %[[VAL_3:.*]] = cc.compute_ptr %[[VAL_2]][0] : (!cc.ptr<!cc.struct<{!cc.ptr<i32>}>>) -> !cc.ptr<!cc.ptr<i32>>
// CHECK:           %[[VAL_4:.*]] = cc.load %[[VAL_3]] : !cc.ptr<!cc.ptr<i32>>
// CHECK:           call @incrementInt(%[[VAL_4]]) : (!cc.ptr<i32>) -> ()
// CHECK:           %[[VAL_5:.*]] = call @__nvqpp_zeroDynamicResult() : () -> !cc.struct<{!cc.ptr<i8>, i64}>
// CHECK:           return %[[VAL_5]] : !cc.struct<{!cc.ptr<i8>, i64}>
// CHECK:         }

// CHECK-LABEL:   llvm.func @incrementInt.callbackRegFunc() {
// CHECK:           %[[VAL_0:.*]] = func.constant @unmarshal.incrementInt : (!cc.ptr<i8>, i1) -> !cc.struct<{!cc.ptr<i8>, i64}>
// CHECK:           %[[VAL_1:.*]] = func.constant @incrementInt : (!cc.ptr<i32>) -> ()
// CHECK:           %[[VAL_2:.*]] = cc.address_of @incrementInt.callbackName : !cc.ptr<!llvm.array<13 x i8>>
// CHECK:           %[[VAL_3:.*]] = cc.cast %[[VAL_2]] : (!cc.ptr<!llvm.array<13 x i8>>) -> !cc.ptr<i8>
// CHECK:           %[[VAL_4:.*]] = cc.cast %[[VAL_0]] : ((!cc.ptr<i8>, i1) -> !cc.struct<{!cc.ptr<i8>, i64}>) -> !cc.ptr<i8>
// CHECK:           %[[VAL_5:.*]] = cc.cast %[[VAL_1]] : ((!cc.ptr<i32>) -> ()) -> !cc.ptr<i8>
// CHECK:           func.call @cudaqRegisterCallbackName(%[[VAL_3]], %[[VAL_4]], %[[VAL_5]]) : (!cc.ptr<i8>, !cc.ptr<i8>, !cc.ptr<i8>) -> ()
// CHECK:           llvm.return
// CHECK:         }

// CHECK:         llvm.mlir.global_ctors {ctors = [@incrementInt.callbackRegFunc], priorities = [17 : i32]}
// clang-format on

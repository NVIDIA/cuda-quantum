// ========================================================================== //
// Copyright (c) 2022 - 2023 NVIDIA Corporation & Affiliates.                 //
// All rights reserved.                                                       //
//                                                                            //
// This source code and the accompanying materials are made available under   //
// the terms of the Apache License 2.0 which accompanies this distribution.   //
// ========================================================================== //

// RUN: cudaq-opt --add-dealloc --inline --factor-quantum-alloc --memtoreg --canonicalize %s | FileCheck %s

func.func @duplicate_rotation_check() {
  %0 = arith.constant 2 : i32
  %c_0 = arith.constant 0 : i32
  %qubits = quake.alloca !quake.veq<?>[ %0 : i32 ]
  %q0 = quake.extract_ref %qubits[%c_0] : (!quake.veq<?>,i32) -> !quake.ref
  %c_angle = arith.constant 0.59 : f64
  quake.rx (%c_angle) %q0: (f64, !quake.ref) -> ()
  quake.rx (%c_angle) %q0 : (f64, !quake.ref) -> ()
  %measurements0 = quake.mz %q0 : (!quake.ref) -> !quake.measure
  return
}

// CHECK-LABEL:   func.func @duplicate_rotation_check() {
// CHECK-DAG:       %[[VAL_0:.*]] = arith.constant 1.180{{.*}} : f64
// CHECK-DAG:       %[[VAL_1:.*]] = quake.null_wire
// CHECK-DAG:       %[[VAL_2:.*]] = quake.null_wire
// CHECK:           %[[VAL_4:.*]] = quake.rx (%[[VAL_0]]) %[[VAL_1]] : (f64, !quake.wire) -> !quake.wire
// CHECK:           %[[VAL_5:.*]], %[[VAL_6:.*]] = quake.mz %[[VAL_4]] : (!quake.wire) -> (!quake.measure, !quake.wire)
// CHECK-DAG:       quake.sink %[[VAL_6]] : !quake.wire
// CHECK-DAG:       quake.sink %[[VAL_2]] : !quake.wire
// CHECK:           return
// CHECK:         }

func.func @duplicate_rotation_check2() {
  %0 = arith.constant 2 : i32
  %c_0 = arith.constant 0 : i32
  %qubits = quake.alloca  !quake.veq<?>[ %0 : i32]
  %q0 = quake.extract_ref %qubits[%c_0] : (!quake.veq<?>, i32) -> !quake.ref
  %c_angle = arith.constant 0.59 : f64
  %c_angle2 = arith.constant 0.23 : f64
  quake.rx (%c_angle) %q0 : (f64, !quake.ref) -> ()
  quake.rx (%c_angle) %q0 : (f64, !quake.ref) -> ()
  quake.rx (%c_angle2) %q0 : (f64, !quake.ref) -> ()
  %measurement = quake.mz %q0 : (!quake.ref) -> !quake.measure
  return
}

// CHECK-LABEL:   func.func @duplicate_rotation_check2() {
// CHECK-DAG:       %[[VAL_0:.*]] = arith.constant 1.410{{.*}} : f64
// CHECK-DAG:       %[[VAL_2:.*]] = quake.null_wire
// CHECK-DAG:       %[[VAL_3:.*]] = quake.null_wire
// CHECK:           %[[VAL_6:.*]] = quake.rx (%[[VAL_0]]) %[[VAL_2]] : (f64, !quake.wire) -> !quake.wire
// CHECK:           %[[VAL_7:.*]], %[[VAL_8:.*]] = quake.mz %[[VAL_6]] : (!quake.wire) -> (!quake.measure, !quake.wire)
// CHECK-DAG:       quake.sink %[[VAL_8]] : !quake.wire
// CHECK-DAG:       quake.sink %[[VAL_3]] : !quake.wire
// CHECK:           return
// CHECK:         }

func.func @returns_angle(%arg0 : f64, %arg1 : f64) -> (f64) {
  %0 = arith.divf %arg0, %arg1 : f64
  return %0 : f64
}

func.func @duplicate_rotation_check3() {
  %0 = arith.constant 2 : i32
  %c_0 = arith.constant 0 : i32
  %qubits = quake.alloca  !quake.veq<?> [ %0 : i32 ]
  %q0 = quake.extract_ref %qubits[%c_0] : (!quake.veq<?>, i32) -> !quake.ref
  %c_angle = arith.constant 0.59 : f64
  %c_angle2 = arith.constant 0.23 : f64
  %c_angle3 = arith.constant 0.64 : f64
  %new_angle = call @returns_angle(%c_angle, %c_angle2) : (f64, f64) -> (f64) 
  %new_angle2 = call @returns_angle(%c_angle3, %c_angle2) : (f64, f64) -> (f64)
  quake.rx (%c_angle) %q0 : (f64, !quake.ref) -> ()
  quake.rx (%new_angle2) %q0 : (f64, !quake.ref) -> ()
  quake.rx (%new_angle) %q0 : (f64, !quake.ref) -> ()
  %measurement = quake.mz %q0 : (!quake.ref) -> !quake.measure
  return
}

// CHECK-LABEL:   func.func @duplicate_rotation_check3() {
// CHECK-DAG:       %[[VAL_0:.*]] = arith.constant 5.93782{{.*}} : f64
// CHECK-DAG:       %[[VAL_3:.*]] = quake.null_wire
// CHECK-DAG:       %[[VAL_4:.*]] = quake.null_wire
// CHECK:           %[[VAL_7:.*]] = quake.rx (%[[VAL_0]]) %[[VAL_3]] : (f64, !quake.wire) -> !quake.wire
// CHECK:           %[[VAL_8:.*]], %[[VAL_9:.*]] = quake.mz %[[VAL_7]] : (!quake.wire) -> (!quake.measure, !quake.wire)
// CHECK-DAG:       quake.sink %[[VAL_9]] : !quake.wire
// CHECK-DAG:       quake.sink %[[VAL_4]] : !quake.wire
// CHECK:           return
// CHECK:         }

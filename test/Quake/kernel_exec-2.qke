// ========================================================================== //
// Copyright (c) 2022 - 2025 NVIDIA Corporation & Affiliates.                 //
// All rights reserved.                                                       //
//                                                                            //
// This source code and the accompanying materials are made available under   //
// the terms of the Apache License 2.0 which accompanies this distribution.   //
// ========================================================================== //

// RUN: cudaq-opt -kernel-execution %s | FileCheck %s

module attributes {quake.mangled_name_map = {
__nvqpp__mlirgen__function_hawaiian = "shirt",
__nvqpp__mlirgen__function_cargo = "pants"}} {

  // pure devive kernel: cargo. C++ function: pants.
  func.func @__nvqpp__mlirgen__function_cargo(%arg0: !cc.stdvec<i32>, %arg1: !quake.ref) attributes {"cudaq-kernel", no_this} {
    return
  }

  // entry-point kernel: hawaiian. C++ function: shirt.
  func.func @__nvqpp__mlirgen__function_hawaiian(%arg0: i1, %arg1: !cc.stdvec<i32>) attributes {"cudaq-entrypoint", "cudaq-kernel", no_this} {
    %0 = quake.alloca !quake.ref
    %1 = quake.alloca !quake.ref
    %2 = quake.alloca !quake.ref
    cc.if(%arg0) {
      quake.x %2 : (!quake.ref) -> ()
    } else {
    }
    call @__nvqpp__mlirgen__function_cargo(%arg1, %2) : (!cc.stdvec<i32>, !quake.ref) -> ()
    return
  }

  // dummy definition of C++ entry-point.
  func.func @shirt(%0: i1, %1: !cc.ptr<!cc.struct<{!cc.ptr<i32>, !cc.ptr<i32>, !cc.ptr<i32>}>>) {
    return
  }
}

// CHECK-LABEL:   func.func @__nvqpp__mlirgen__function_cargo(
// CHECK-SAME:      %[[VAL_0:.*]]: !cc.stdvec<i32>,
// CHECK-SAME:      %[[VAL_1:.*]]: !quake.ref) attributes {"cudaq-kernel", no_this} {
// CHECK:           return
// CHECK:         }

// CHECK-LABEL:   func.func @__nvqpp__mlirgen__function_hawaiian(
// CHECK-SAME:      %[[VAL_0:.*]]: i1,
// CHECK-SAME:      %[[VAL_1:.*]]: !cc.stdvec<i32>) attributes {"cudaq-entrypoint", "cudaq-kernel", no_this} {
// CHECK:           %[[VAL_2:.*]] = quake.alloca !quake.ref
// CHECK:           %[[VAL_3:.*]] = quake.alloca !quake.ref
// CHECK:           %[[VAL_4:.*]] = quake.alloca !quake.ref
// CHECK:           cc.if(%[[VAL_0]]) {
// CHECK:             quake.x %[[VAL_4]] : (!quake.ref) -> ()
// CHECK:           }
// CHECK:           call @__nvqpp__mlirgen__function_cargo(%[[VAL_1]], %[[VAL_4]]) : (!cc.stdvec<i32>, !quake.ref) -> ()
// CHECK:           return
// CHECK:         }

// CHECK-LABEL:   func.func @shirt(
// CHECK-SAME:      %[[VAL_0:.*]]: i1,
// CHECK-SAME:      %[[VAL_1:.*]]: !cc.ptr<!cc.struct<{!cc.ptr<i32>, !cc.ptr<i32>, !cc.ptr<i32>}>>) {
// CHECK:           %[[VAL_2:.*]] = cc.alloca i64
// CHECK:           %[[VAL_3:.*]] = cc.sizeof !cc.struct<{i1, i64}> : i64
// CHECK:           %[[VAL_4:.*]] = cc.compute_ptr %[[VAL_1]][1] : (!cc.ptr<!cc.struct<{!cc.ptr<i32>, !cc.ptr<i32>, !cc.ptr<i32>}>>) -> !cc.ptr<!cc.ptr<i32>>
// CHECK:           %[[VAL_5:.*]] = cc.compute_ptr %[[VAL_1]][0] : (!cc.ptr<!cc.struct<{!cc.ptr<i32>, !cc.ptr<i32>, !cc.ptr<i32>}>>) -> !cc.ptr<!cc.ptr<i32>>
// CHECK:           %[[VAL_6:.*]] = cc.load %[[VAL_4]] : !cc.ptr<!cc.ptr<i32>>
// CHECK:           %[[VAL_7:.*]] = cc.load %[[VAL_5]] : !cc.ptr<!cc.ptr<i32>>
// CHECK:           %[[VAL_8:.*]] = cc.cast %[[VAL_6]] : (!cc.ptr<i32>) -> i64
// CHECK:           %[[VAL_9:.*]] = cc.cast %[[VAL_7]] : (!cc.ptr<i32>) -> i64
// CHECK:           %[[VAL_10:.*]] = arith.subi %[[VAL_8]], %[[VAL_9]] : i64
// CHECK:           %[[VAL_11:.*]] = arith.addi %[[VAL_10]], %[[VAL_3]] : i64
// CHECK:           %[[VAL_12:.*]] = cc.alloca i8{{\[}}%[[VAL_11]] : i64]
// CHECK:           %[[VAL_13:.*]] = cc.cast %[[VAL_12]] : (!cc.ptr<!cc.array<i8 x ?>>) -> !cc.ptr<!cc.struct<{i1, i64}>>
// CHECK:           %[[VAL_14:.*]] = cc.alloca !cc.ptr<i8>
// CHECK:           %[[VAL_15:.*]] = cc.sizeof !cc.struct<{i1, i64}> : i64
// CHECK:           %[[VAL_16:.*]] = cc.compute_ptr %[[VAL_12]]{{\[}}%[[VAL_15]]] : (!cc.ptr<!cc.array<i8 x ?>>, i64) -> !cc.ptr<i8>
// CHECK:           %[[VAL_17:.*]] = cc.compute_ptr %[[VAL_13]][0] : (!cc.ptr<!cc.struct<{i1, i64}>>) -> !cc.ptr<i1>
// CHECK:           cc.store %[[VAL_0]], %[[VAL_17]] : !cc.ptr<i1>
// CHECK:           %[[VAL_18:.*]] = cc.compute_ptr %[[VAL_13]][1] : (!cc.ptr<!cc.struct<{i1, i64}>>) -> !cc.ptr<i64>
// CHECK:           %[[VAL_19:.*]] = cc.compute_ptr %[[VAL_1]][1] : (!cc.ptr<!cc.struct<{!cc.ptr<i32>, !cc.ptr<i32>, !cc.ptr<i32>}>>) -> !cc.ptr<!cc.ptr<i32>>
// CHECK:           %[[VAL_20:.*]] = cc.compute_ptr %[[VAL_1]][0] : (!cc.ptr<!cc.struct<{!cc.ptr<i32>, !cc.ptr<i32>, !cc.ptr<i32>}>>) -> !cc.ptr<!cc.ptr<i32>>
// CHECK:           %[[VAL_21:.*]] = cc.load %[[VAL_19]] : !cc.ptr<!cc.ptr<i32>>
// CHECK:           %[[VAL_22:.*]] = cc.load %[[VAL_20]] : !cc.ptr<!cc.ptr<i32>>
// CHECK:           %[[VAL_23:.*]] = cc.cast %[[VAL_21]] : (!cc.ptr<i32>) -> i64
// CHECK:           %[[VAL_24:.*]] = cc.cast %[[VAL_22]] : (!cc.ptr<i32>) -> i64
// CHECK:           %[[VAL_25:.*]] = arith.subi %[[VAL_23]], %[[VAL_24]] : i64
// CHECK:           cc.store %[[VAL_25]], %[[VAL_18]] : !cc.ptr<i64>
// CHECK:           %[[VAL_26:.*]] = cc.cast %[[VAL_1]] : (!cc.ptr<!cc.struct<{!cc.ptr<i32>, !cc.ptr<i32>, !cc.ptr<i32>}>>) -> !cc.ptr<!cc.ptr<i8>>
// CHECK:           %[[VAL_27:.*]] = cc.load %[[VAL_26]] : !cc.ptr<!cc.ptr<i8>>
// CHECK:           %[[VAL_28:.*]] = arith.constant false
// CHECK:           %[[VAL_29:.*]] = cc.cast %[[VAL_16]] : (!cc.ptr<i8>) -> !cc.ptr<i8>
// CHECK:           call @llvm.memcpy.p0i8.p0i8.i64(%[[VAL_29]], %[[VAL_27]], %[[VAL_25]], %[[VAL_28]]) : (!cc.ptr<i8>, !cc.ptr<i8>, i64, i1) -> ()
// CHECK:           %[[VAL_30:.*]] = cc.cast %[[VAL_16]] : (!cc.ptr<i8>) -> !cc.ptr<!cc.array<i8 x ?>>
// CHECK:           %[[VAL_31:.*]] = cc.compute_ptr %[[VAL_30]]{{\[}}%[[VAL_25]]] : (!cc.ptr<!cc.array<i8 x ?>>, i64) -> !cc.ptr<i8>
// CHECK:           %[[VAL_32:.*]] = constant @function_hawaiian.thunk : (!cc.ptr<i8>, i1) -> !cc.struct<{!cc.ptr<i8>, i64}>
// CHECK:           %[[VAL_33:.*]] = cc.func_ptr %[[VAL_32]] : ((!cc.ptr<i8>, i1) -> !cc.struct<{!cc.ptr<i8>, i64}>) -> !cc.ptr<i8>
// CHECK:           %[[VAL_34:.*]] = cc.cast %[[VAL_13]] : (!cc.ptr<!cc.struct<{i1, i64}>>) -> !cc.ptr<i8>
// CHECK:           %[[VAL_35:.*]] = arith.constant 2147483647 : i64
// CHECK:           %[[VAL_36:.*]] = cc.alloca !cc.struct<{!cc.ptr<!cc.ptr<i8>>, !cc.ptr<!cc.ptr<i8>>, !cc.ptr<!cc.ptr<i8>>}>
// CHECK:           %[[VAL_37:.*]] = cc.alloca !cc.array<!cc.ptr<i8> x 2>
// CHECK:           %[[VAL_38:.*]] = cc.sizeof !cc.array<!cc.ptr<i8> x 2> : i64
// CHECK:           %[[VAL_39:.*]] = cc.cast %[[VAL_37]] : (!cc.ptr<!cc.array<!cc.ptr<i8> x 2>>) -> !cc.ptr<!cc.ptr<i8>>
// CHECK:           %[[VAL_40:.*]] = cc.cast %[[VAL_36]] : (!cc.ptr<!cc.struct<{!cc.ptr<!cc.ptr<i8>>, !cc.ptr<!cc.ptr<i8>>, !cc.ptr<!cc.ptr<i8>>}>>) -> !cc.ptr<!cc.ptr<!cc.ptr<i8>>>
// CHECK:           cc.store %[[VAL_39]], %[[VAL_40]] : !cc.ptr<!cc.ptr<!cc.ptr<i8>>>
// CHECK:           %[[VAL_41:.*]] = cc.cast %[[VAL_37]] : (!cc.ptr<!cc.array<!cc.ptr<i8> x 2>>) -> i64
// CHECK:           %[[VAL_42:.*]] = arith.addi %[[VAL_41]], %[[VAL_38]] : i64
// CHECK:           %[[VAL_43:.*]] = cc.cast %[[VAL_42]] : (i64) -> !cc.ptr<!cc.ptr<i8>>
// CHECK:           %[[VAL_44:.*]] = cc.compute_ptr %[[VAL_36]][1] : (!cc.ptr<!cc.struct<{!cc.ptr<!cc.ptr<i8>>, !cc.ptr<!cc.ptr<i8>>, !cc.ptr<!cc.ptr<i8>>}>>) -> !cc.ptr<!cc.ptr<!cc.ptr<i8>>>
// CHECK:           cc.store %[[VAL_43]], %[[VAL_44]] : !cc.ptr<!cc.ptr<!cc.ptr<i8>>>
// CHECK:           %[[VAL_45:.*]] = cc.compute_ptr %[[VAL_36]][2] : (!cc.ptr<!cc.struct<{!cc.ptr<!cc.ptr<i8>>, !cc.ptr<!cc.ptr<i8>>, !cc.ptr<!cc.ptr<i8>>}>>) -> !cc.ptr<!cc.ptr<!cc.ptr<i8>>>
// CHECK:           cc.store %[[VAL_43]], %[[VAL_45]] : !cc.ptr<!cc.ptr<!cc.ptr<i8>>>
// CHECK:           %[[VAL_46:.*]] = cc.compute_ptr %[[VAL_37]][0] : (!cc.ptr<!cc.array<!cc.ptr<i8> x 2>>) -> !cc.ptr<!cc.ptr<i8>>
// CHECK:           %[[VAL_47:.*]] = cc.alloca i1
// CHECK:           cc.store %[[VAL_0]], %[[VAL_47]] : !cc.ptr<i1>
// CHECK:           %[[VAL_48:.*]] = cc.cast %[[VAL_47]] : (!cc.ptr<i1>) -> !cc.ptr<i8>
// CHECK:           cc.store %[[VAL_48]], %[[VAL_46]] : !cc.ptr<!cc.ptr<i8>>
// CHECK:           %[[VAL_49:.*]] = cc.compute_ptr %[[VAL_37]][1] : (!cc.ptr<!cc.array<!cc.ptr<i8> x 2>>) -> !cc.ptr<!cc.ptr<i8>>
// CHECK:           %[[VAL_50:.*]] = cc.cast %[[VAL_1]] : (!cc.ptr<!cc.struct<{!cc.ptr<i32>, !cc.ptr<i32>, !cc.ptr<i32>}>>) -> !cc.ptr<i8>
// CHECK:           cc.store %[[VAL_50]], %[[VAL_49]] : !cc.ptr<!cc.ptr<i8>>
// CHECK:           %[[VAL_51:.*]] = cc.cast %[[VAL_36]] : (!cc.ptr<!cc.struct<{!cc.ptr<!cc.ptr<i8>>, !cc.ptr<!cc.ptr<i8>>, !cc.ptr<!cc.ptr<i8>>}>>) -> !cc.ptr<i8>
// CHECK:           %[[VAL_52:.*]] = llvm.mlir.addressof @function_hawaiian.kernelName : !llvm.ptr<array<18 x i8>>
// CHECK:           %[[VAL_53:.*]] = cc.cast %[[VAL_52]] : (!llvm.ptr<array<18 x i8>>) -> !cc.ptr<i8>
// CHECK:           %[[VAL_54:.*]] = call @hybridLaunchKernel(%[[VAL_53]], %[[VAL_33]], %[[VAL_34]], %[[VAL_11]], %[[VAL_35]], %[[VAL_51]]) : (!cc.ptr<i8>, !cc.ptr<i8>, !cc.ptr<i8>, i64, i64, !cc.ptr<i8>) -> !cc.struct<{!cc.ptr<i8>, i64}>
// CHECK:           return
// CHECK:         }
// CHECK:         func.func private @hybridLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>, !cc.ptr<i8>, i64, i64, !cc.ptr<i8>) -> !cc.struct<{!cc.ptr<i8>, i64}>
// CHECK:         func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
// CHECK:         llvm.func @cudaqRegisterLambdaName(!llvm.ptr<i8>, !llvm.ptr<i8>) attributes {sym_visibility = "private"}
// CHECK:         func.func private @__cudaq_registerLinkableKernel(!cc.ptr<i8>, !cc.ptr<i8>, !cc.ptr<i8>)
// CHECK:         func.func private @__cudaq_getLinkableKernelKey(!cc.ptr<i8>) -> i64
// CHECK:         func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
// CHECK:         func.func private @malloc(i64) -> !cc.ptr<i8>
// CHECK:         func.func private @free(!cc.ptr<i8>)
// CHECK:         func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
// CHECK:         func.func private @__nvqpp_vector_bool_to_initializer_list(!cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.ptr<i1>, !cc.ptr<i1>}>>, !cc.ptr<!cc.struct<{!cc.ptr<i1>, !cc.array<i8 x 32>}>>, !cc.ptr<!cc.ptr<i8>>)
// CHECK:         func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)

// CHECK-LABEL:   func.func private @__nvqpp_zeroDynamicResult() -> !cc.struct<{!cc.ptr<i8>, i64}> {
// CHECK:           %[[VAL_0:.*]] = arith.constant 0 : i64
// CHECK:           %[[VAL_1:.*]] = cc.cast %[[VAL_0]] : (i64) -> !cc.ptr<i8>
// CHECK:           %[[VAL_2:.*]] = cc.undef !cc.struct<{!cc.ptr<i8>, i64}>
// CHECK:           %[[VAL_3:.*]] = cc.insert_value %[[VAL_1]], %[[VAL_2]][0] : (!cc.struct<{!cc.ptr<i8>, i64}>, !cc.ptr<i8>) -> !cc.struct<{!cc.ptr<i8>, i64}>
// CHECK:           %[[VAL_4:.*]] = cc.insert_value %[[VAL_0]], %[[VAL_3]][1] : (!cc.struct<{!cc.ptr<i8>, i64}>, i64) -> !cc.struct<{!cc.ptr<i8>, i64}>
// CHECK:           return %[[VAL_4]] : !cc.struct<{!cc.ptr<i8>, i64}>
// CHECK:         }

// CHECK-LABEL:   func.func private @__nvqpp_createDynamicResult(
// CHECK-SAME:      %[[VAL_0:.*]]: !cc.ptr<i8>, %[[VAL_1:.*]]: i64, %[[VAL_2:.*]]: !cc.ptr<!cc.struct<{!cc.ptr<i8>, i64}>>, %[[VAL_3:.*]]: i64) -> !cc.struct<{!cc.ptr<i8>, i64}> {
// CHECK:           %[[VAL_4:.*]] = cc.compute_ptr %[[VAL_2]][1] : (!cc.ptr<!cc.struct<{!cc.ptr<i8>, i64}>>) -> !cc.ptr<i64>
// CHECK:           %[[VAL_5:.*]] = cc.load %[[VAL_4]] : !cc.ptr<i64>
// CHECK:           %[[VAL_6:.*]] = arith.addi %[[VAL_1]], %[[VAL_5]] : i64
// CHECK:           %[[VAL_7:.*]] = call @malloc(%[[VAL_6]]) : (i64) -> !cc.ptr<i8>
// CHECK:           %[[VAL_8:.*]] = cc.cast %[[VAL_7]] : (!cc.ptr<i8>) -> !cc.ptr<!cc.array<i8 x ?>>
// CHECK:           %[[VAL_9:.*]] = arith.constant false
// CHECK:           call @llvm.memcpy.p0i8.p0i8.i64(%[[VAL_7]], %[[VAL_0]], %[[VAL_1]], %[[VAL_9]]) : (!cc.ptr<i8>, !cc.ptr<i8>, i64, i1) -> ()
// CHECK:           %[[VAL_10:.*]] = cc.compute_ptr %[[VAL_2]][0] : (!cc.ptr<!cc.struct<{!cc.ptr<i8>, i64}>>) -> !cc.ptr<!cc.ptr<i8>>
// CHECK:           %[[VAL_11:.*]] = cc.load %[[VAL_10]] : !cc.ptr<!cc.ptr<i8>>
// CHECK:           %[[VAL_12:.*]] = cc.compute_ptr %[[VAL_8]]{{\[}}%[[VAL_1]]] : (!cc.ptr<!cc.array<i8 x ?>>, i64) -> !cc.ptr<i8>
// CHECK:           call @llvm.memcpy.p0i8.p0i8.i64(%[[VAL_12]], %[[VAL_11]], %[[VAL_5]], %[[VAL_9]]) : (!cc.ptr<i8>, !cc.ptr<i8>, i64, i1) -> ()
// CHECK:           %[[VAL_13:.*]] = cc.undef !cc.struct<{!cc.ptr<i8>, i64}>
// CHECK:           %[[VAL_14:.*]] = cc.insert_value %[[VAL_7]], %[[VAL_13]][0] : (!cc.struct<{!cc.ptr<i8>, i64}>, !cc.ptr<i8>) -> !cc.struct<{!cc.ptr<i8>, i64}>
// CHECK:           %[[VAL_15:.*]] = cc.insert_value %[[VAL_6]], %[[VAL_14]][1] : (!cc.struct<{!cc.ptr<i8>, i64}>, i64) -> !cc.struct<{!cc.ptr<i8>, i64}>
// CHECK:           %[[VAL_16:.*]] = cc.compute_ptr %[[VAL_8]]{{\[}}%[[VAL_3]]] : (!cc.ptr<!cc.array<i8 x ?>>, i64) -> !cc.ptr<i8>
// CHECK:           %[[VAL_17:.*]] = cc.cast %[[VAL_16]] : (!cc.ptr<i8>) -> !cc.ptr<!cc.ptr<i8>>
// CHECK:           cc.store %[[VAL_12]], %[[VAL_17]] : !cc.ptr<!cc.ptr<i8>>
// CHECK:           return %[[VAL_15]] : !cc.struct<{!cc.ptr<i8>, i64}>
// CHECK:         }
// CHECK:         llvm.mlir.global external constant @function_hawaiian.kernelName("function_hawaiian\00") {addr_space = 0 : i32}

// CHECK-LABEL:   func.func @function_hawaiian.returnOffset() -> i64 {
// CHECK:           %[[VAL_0:.*]] = arith.constant 2147483647 : i64
// CHECK:           return %[[VAL_0]] : i64
// CHECK:         }

// CHECK-LABEL:   func.func @function_hawaiian.thunk(
// CHECK-SAME:        %[[VAL_0:.*]]: !cc.ptr<i8>,
// CHECK-SAME:        %[[VAL_1:.*]]: i1) -> !cc.struct<{!cc.ptr<i8>, i64}> {
// CHECK:           %[[VAL_2:.*]] = cc.cast %[[VAL_0]] : (!cc.ptr<i8>) -> !cc.ptr<!cc.struct<{i1, i64}>>
// CHECK:           %[[VAL_3:.*]] = cc.sizeof !cc.struct<{i1, i64}> : i64
// CHECK:           %[[VAL_4:.*]] = cc.cast %[[VAL_0]] : (!cc.ptr<i8>) -> !cc.ptr<!cc.array<i8 x ?>>
// CHECK:           %[[VAL_5:.*]] = cc.compute_ptr %[[VAL_4]]{{\[}}%[[VAL_3]]] : (!cc.ptr<!cc.array<i8 x ?>>, i64) -> !cc.ptr<i8>
// CHECK:           %[[VAL_6:.*]] = cc.compute_ptr %[[VAL_2]][0] : (!cc.ptr<!cc.struct<{i1, i64}>>) -> !cc.ptr<i1>
// CHECK:           %[[VAL_7:.*]] = cc.load %[[VAL_6]] : !cc.ptr<i1>
// CHECK:           %[[VAL_8:.*]] = cc.compute_ptr %[[VAL_2]][1] : (!cc.ptr<!cc.struct<{i1, i64}>>) -> !cc.ptr<i64>
// CHECK:           %[[VAL_9:.*]] = cc.sizeof i32 : i64
// CHECK:           %[[VAL_10:.*]] = cc.load %[[VAL_8]] : !cc.ptr<i64>
// CHECK:           %[[VAL_11:.*]] = arith.divsi %[[VAL_10]], %[[VAL_9]] : i64
// CHECK:           %[[VAL_12:.*]] = cc.cast %[[VAL_5]] : (!cc.ptr<i8>) -> !cc.ptr<i32>
// CHECK:           %[[VAL_13:.*]] = cc.stdvec_init %[[VAL_12]], %[[VAL_11]] : (!cc.ptr<i32>, i64) -> !cc.stdvec<i32>
// CHECK:           %[[VAL_14:.*]] = cc.cast %[[VAL_5]] : (!cc.ptr<i8>) -> !cc.ptr<!cc.array<i8 x ?>>
// CHECK:           %[[VAL_15:.*]] = cc.compute_ptr %[[VAL_14]]{{\[}}%[[VAL_10]]] : (!cc.ptr<!cc.array<i8 x ?>>, i64) -> !cc.ptr<i8>
// CHECK:           call @__nvqpp__mlirgen__function_hawaiian(%[[VAL_7]], %[[VAL_13]]) : (i1, !cc.stdvec<i32>) -> ()
// CHECK:           %[[VAL_16:.*]] = call @__nvqpp_zeroDynamicResult() : () -> !cc.struct<{!cc.ptr<i8>, i64}>
// CHECK:           return %[[VAL_16]] : !cc.struct<{!cc.ptr<i8>, i64}>
// CHECK:         }

// CHECK-LABEL:   func.func @function_hawaiian.argsCreator(
// CHECK-SAME:              %[[VAL_0:.*]]: !cc.ptr<!cc.ptr<i8>>,
// CHECK-SAME:              %[[VAL_1:.*]]: !cc.ptr<!cc.ptr<i8>>) -> i64 {
// CHECK:           %[[VAL_2:.*]] = cc.cast %[[VAL_0]] : (!cc.ptr<!cc.ptr<i8>>) -> !cc.ptr<!cc.array<!cc.ptr<i8> x ?>>
// CHECK:           %[[VAL_3:.*]] = cc.compute_ptr %[[VAL_2]][0] : (!cc.ptr<!cc.array<!cc.ptr<i8> x ?>>) -> !cc.ptr<!cc.ptr<i8>>
// CHECK:           %[[VAL_4:.*]] = cc.load %[[VAL_3]] : !cc.ptr<!cc.ptr<i8>>
// CHECK:           %[[VAL_5:.*]] = cc.cast %[[VAL_4]] : (!cc.ptr<i8>) -> !cc.ptr<i1>
// CHECK:           %[[VAL_6:.*]] = cc.compute_ptr %[[VAL_2]][1] : (!cc.ptr<!cc.array<!cc.ptr<i8> x ?>>) -> !cc.ptr<!cc.ptr<i8>>
// CHECK:           %[[VAL_7:.*]] = cc.load %[[VAL_6]] : !cc.ptr<!cc.ptr<i8>>
// CHECK:           %[[VAL_8:.*]] = cc.cast %[[VAL_7]] : (!cc.ptr<i8>) -> !cc.ptr<!cc.struct<{!cc.ptr<i32>, !cc.ptr<i32>, !cc.ptr<i32>}>>
// CHECK:           %[[VAL_9:.*]] = cc.load %[[VAL_5]] : !cc.ptr<i1>
// CHECK:           %[[VAL_10:.*]] = cc.alloca i64
// CHECK:           %[[VAL_11:.*]] = cc.sizeof !cc.struct<{i1, i64}> : i64
// CHECK:           %[[VAL_12:.*]] = cc.compute_ptr %[[VAL_8]][1] : (!cc.ptr<!cc.struct<{!cc.ptr<i32>, !cc.ptr<i32>, !cc.ptr<i32>}>>) -> !cc.ptr<!cc.ptr<i32>>
// CHECK:           %[[VAL_13:.*]] = cc.compute_ptr %[[VAL_8]][0] : (!cc.ptr<!cc.struct<{!cc.ptr<i32>, !cc.ptr<i32>, !cc.ptr<i32>}>>) -> !cc.ptr<!cc.ptr<i32>>
// CHECK:           %[[VAL_14:.*]] = cc.load %[[VAL_12]] : !cc.ptr<!cc.ptr<i32>>
// CHECK:           %[[VAL_15:.*]] = cc.load %[[VAL_13]] : !cc.ptr<!cc.ptr<i32>>
// CHECK:           %[[VAL_16:.*]] = cc.cast %[[VAL_14]] : (!cc.ptr<i32>) -> i64
// CHECK:           %[[VAL_17:.*]] = cc.cast %[[VAL_15]] : (!cc.ptr<i32>) -> i64
// CHECK:           %[[VAL_18:.*]] = arith.subi %[[VAL_16]], %[[VAL_17]] : i64
// CHECK:           %[[VAL_19:.*]] = arith.addi %[[VAL_18]], %[[VAL_11]] : i64
// CHECK:           %[[VAL_20:.*]] = call @malloc(%[[VAL_19]]) : (i64) -> !cc.ptr<i8>
// CHECK:           %[[VAL_21:.*]] = cc.cast %[[VAL_20]] : (!cc.ptr<i8>) -> !cc.ptr<!cc.struct<{i1, i64}>>
// CHECK:           %[[VAL_22:.*]] = cc.alloca !cc.ptr<i8>
// CHECK:           %[[VAL_23:.*]] = cc.sizeof !cc.struct<{i1, i64}> : i64
// CHECK:           %[[VAL_24:.*]] = cc.cast %[[VAL_20]] : (!cc.ptr<i8>) -> !cc.ptr<!cc.array<i8 x ?>>
// CHECK:           %[[VAL_25:.*]] = cc.compute_ptr %[[VAL_24]]{{\[}}%[[VAL_23]]] : (!cc.ptr<!cc.array<i8 x ?>>, i64) -> !cc.ptr<i8>
// CHECK:           %[[VAL_26:.*]] = cc.compute_ptr %[[VAL_21]][0] : (!cc.ptr<!cc.struct<{i1, i64}>>) -> !cc.ptr<i1>
// CHECK:           cc.store %[[VAL_9]], %[[VAL_26]] : !cc.ptr<i1>
// CHECK:           %[[VAL_27:.*]] = cc.compute_ptr %[[VAL_21]][1] : (!cc.ptr<!cc.struct<{i1, i64}>>) -> !cc.ptr<i64>
// CHECK:           %[[VAL_28:.*]] = cc.compute_ptr %[[VAL_8]][1] : (!cc.ptr<!cc.struct<{!cc.ptr<i32>, !cc.ptr<i32>, !cc.ptr<i32>}>>) -> !cc.ptr<!cc.ptr<i32>>
// CHECK:           %[[VAL_29:.*]] = cc.compute_ptr %[[VAL_8]][0] : (!cc.ptr<!cc.struct<{!cc.ptr<i32>, !cc.ptr<i32>, !cc.ptr<i32>}>>) -> !cc.ptr<!cc.ptr<i32>>
// CHECK:           %[[VAL_30:.*]] = cc.load %[[VAL_28]] : !cc.ptr<!cc.ptr<i32>>
// CHECK:           %[[VAL_31:.*]] = cc.load %[[VAL_29]] : !cc.ptr<!cc.ptr<i32>>
// CHECK:           %[[VAL_32:.*]] = cc.cast %[[VAL_30]] : (!cc.ptr<i32>) -> i64
// CHECK:           %[[VAL_33:.*]] = cc.cast %[[VAL_31]] : (!cc.ptr<i32>) -> i64
// CHECK:           %[[VAL_34:.*]] = arith.subi %[[VAL_32]], %[[VAL_33]] : i64
// CHECK:           cc.store %[[VAL_34]], %[[VAL_27]] : !cc.ptr<i64>
// CHECK:           %[[VAL_35:.*]] = cc.cast %[[VAL_8]] : (!cc.ptr<!cc.struct<{!cc.ptr<i32>, !cc.ptr<i32>, !cc.ptr<i32>}>>) -> !cc.ptr<!cc.ptr<i8>>
// CHECK:           %[[VAL_36:.*]] = cc.load %[[VAL_35]] : !cc.ptr<!cc.ptr<i8>>
// CHECK:           %[[VAL_37:.*]] = arith.constant false
// CHECK:           %[[VAL_38:.*]] = cc.cast %[[VAL_25]] : (!cc.ptr<i8>) -> !cc.ptr<i8>
// CHECK:           call @llvm.memcpy.p0i8.p0i8.i64(%[[VAL_38]], %[[VAL_36]], %[[VAL_34]], %[[VAL_37]]) : (!cc.ptr<i8>, !cc.ptr<i8>, i64, i1) -> ()
// CHECK:           %[[VAL_39:.*]] = cc.cast %[[VAL_25]] : (!cc.ptr<i8>) -> !cc.ptr<!cc.array<i8 x ?>>
// CHECK:           %[[VAL_40:.*]] = cc.compute_ptr %[[VAL_39]]{{\[}}%[[VAL_34]]] : (!cc.ptr<!cc.array<i8 x ?>>, i64) -> !cc.ptr<i8>
// CHECK:           cc.store %[[VAL_20]], %[[VAL_1]] : !cc.ptr<!cc.ptr<i8>>
// CHECK:           return %[[VAL_19]] : i64
// CHECK:         }

// CHECK-LABEL:   llvm.func @function_hawaiian.kernelRegFunc() {
// CHECK:           %[[VAL_0:.*]] = llvm.mlir.addressof @function_hawaiian.kernelName : !llvm.ptr<array<18 x i8>>
// CHECK:           %[[VAL_1:.*]] = cc.cast %[[VAL_0]] : (!llvm.ptr<array<18 x i8>>) -> !cc.ptr<i8>
// CHECK:           func.call @cudaqRegisterKernelName(%[[VAL_1]]) : (!cc.ptr<i8>) -> ()
// CHECK:           %[[VAL_2:.*]] = func.constant @function_hawaiian.argsCreator : (!cc.ptr<!cc.ptr<i8>>, !cc.ptr<!cc.ptr<i8>>) -> i64
// CHECK:           %[[VAL_3:.*]] = cc.func_ptr %[[VAL_2]] : ((!cc.ptr<!cc.ptr<i8>>, !cc.ptr<!cc.ptr<i8>>) -> i64) -> !cc.ptr<i8>
// CHECK:           func.call @cudaqRegisterArgsCreator(%[[VAL_1]], %[[VAL_3]]) : (!cc.ptr<i8>, !cc.ptr<i8>) -> ()
// CHECK:           llvm.return
// CHECK:         }
// CHECK:         llvm.mlir.global_ctors {ctors = [@function_hawaiian.kernelRegFunc], priorities = [17 : i32]}


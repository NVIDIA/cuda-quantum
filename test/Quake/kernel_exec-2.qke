// ========================================================================== //
// Copyright (c) 2022 - 2023 NVIDIA Corporation & Affiliates.                 //
// All rights reserved.                                                       //
//                                                                            //
// This source code and the accompanying materials are made available under   //
// the terms of the Apache License 2.0 which accompanies this distribution.   //
// ========================================================================== //

// RUN: cudaq-opt --kernel-execution %s | FileCheck %s

module attributes {quake.mangled_name_map = {__nvqpp__mlirgen__function_RzArcTan2._Z9RzArcTan2bSt6vectorIiSaIiEE = "_Z9RzArcTan2bSt6vectorIiSaIiEE", __nvqpp__mlirgen__function_prepQubit._Z9prepQubitRKSt6vectorIiSaIiEERN5cudaq5quditILm2EEE = "_Z9prepQubitRKSt6vectorIiSaIiEERN5cudaq5quditILm2EEE"}} {
  func.func @__nvqpp__mlirgen__function_prepQubit._Z9prepQubitRKSt6vectorIiSaIiEERN5cudaq5quditILm2EEE(%arg0: !cc.stdvec<i32>, %arg1: !quake.ref) attributes {"cudaq-kernel", no_this} {
    return
  }
  func.func @__nvqpp__mlirgen__function_RzArcTan2._Z9RzArcTan2bSt6vectorIiSaIiEE(%arg0: i1, %arg1: !cc.stdvec<i32>) attributes {"cudaq-entrypoint", "cudaq-kernel", no_this} {
    %0 = quake.alloca !quake.ref
    %1 = quake.alloca !quake.ref
    %2 = quake.alloca !quake.ref
    cc.if(%arg0) {
      quake.x %2 : (!quake.ref) -> ()
    } else {
    }
    call @__nvqpp__mlirgen__function_prepQubit._Z9prepQubitRKSt6vectorIiSaIiEERN5cudaq5quditILm2EEE(%arg1, %2) : (!cc.stdvec<i32>, !quake.ref) -> ()
    return
  }
}

// CHECK-DAG:     func.func private @altLaunchKernel(!cc.ptr<i8>, !cc.ptr<i8>, !cc.ptr<i8>, i64, i64)
// CHECK-DAG:     func.func private @cudaqRegisterKernelName(!cc.ptr<i8>)
// CHECK-DAG:     func.func private @cudaqRegisterArgsCreator(!cc.ptr<i8>, !cc.ptr<i8>)
// CHECK-DAG:     func.func private @malloc(i64) -> !cc.ptr<i8>
// CHECK-DAG:     func.func private @__nvqpp_initializer_list_to_vector_bool(!cc.ptr<none>, !cc.ptr<none>, i64)
// CHECK-DAG:     func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)

// CHECK-LABEL:   func.func private @__nvqpp_zeroDynamicResult() -> !cc.struct<{!cc.ptr<i8>, i64}> {

// CHECK-LABEL:   func.func private @__nvqpp_createDynamicResult(

// CHECK:         llvm.mlir.global external constant @function_RzArcTan2{{.*}}kernelName("function

// CHECK-LABEL:   func.func @function_RzArcTan2.
// CHECK-SAME:      .thunk(%[[VAL_0:.*]]: !cc.ptr<i8>, %[[VAL_1:.*]]: i1) -> !cc.struct<{!cc.ptr<i8>, i64}> {
// CHECK:           %[[VAL_2:.*]] = cc.cast %[[VAL_0]] : (!cc.ptr<i8>) -> !cc.ptr<!cc.struct<{i1, i64}>>
// CHECK:           %[[VAL_3:.*]] = cc.load %[[VAL_2]] : !cc.ptr<!cc.struct<{i1, i64}>>
// CHECK:           %[[VAL_4:.*]] = arith.constant 0 : i64
// CHECK:           %[[VAL_5:.*]] = cc.cast %[[VAL_4]] : (i64) -> !cc.ptr<!cc.array<!cc.struct<{i1, i64}> x ?>>
// CHECK:           %[[VAL_6:.*]] = cc.compute_ptr %[[VAL_5]][1] : (!cc.ptr<!cc.array<!cc.struct<{i1, i64}> x ?>>) -> !cc.ptr<!cc.struct<{i1, i64}>>
// CHECK:           %[[VAL_7:.*]] = cc.cast %[[VAL_6]] : (!cc.ptr<!cc.struct<{i1, i64}>>) -> i64
// CHECK:           %[[VAL_20:.*]] = cc.cast %[[VAL_0]] : (!cc.ptr<i8>) -> !cc.ptr<!cc.array<i8 x ?>>
// CHECK:           %[[VAL_8:.*]] = cc.compute_ptr %[[VAL_20]][%[[VAL_7]]] : (!cc.ptr<!cc.array<i8 x ?>>, i64) -> !cc.ptr<i8>
// CHECK:           %[[VAL_9:.*]] = cc.extract_value %[[VAL_3]][0] : (!cc.struct<{i1, i64}>) -> i1
// CHECK:           %[[VAL_10:.*]] = cc.extract_value %[[VAL_3]][1] : (!cc.struct<{i1, i64}>) -> i64
// CHECK:           %[[VAL_11:.*]] = arith.constant 4 : i64
// CHECK:           %[[VAL_12:.*]] = arith.divsi %[[VAL_10]], %[[VAL_11]] : i64
// CHECK:           %[[VAL_13:.*]] = cc.cast %[[VAL_8]] : (!cc.ptr<i8>) -> !cc.ptr<i32>
// CHECK:           %[[VAL_14:.*]] = cc.stdvec_init %[[VAL_13]], %[[VAL_12]] : (!cc.ptr<i32>, i64) -> !cc.stdvec<i32>
// CHECK:           %[[VAL_15:.*]] = cc.compute_ptr %[[VAL_8]][%[[VAL_10]]] : (!cc.ptr<i8>, i64) -> !cc.ptr<i8>
// CHECK:           call @__nvqpp__mlirgen__function_RzArcTan2._Z9RzArcTan2bSt6vectorIiSaIiEE(%[[VAL_9]], %[[VAL_14]]) : (i1, !cc.stdvec<i32>) -> ()
// CHECK:           %[[VAL_16:.*]] = call @__nvqpp_zeroDynamicResult() : () -> !cc.struct<{!cc.ptr<i8>, i64}>
// CHECK:           return %[[VAL_16]] : !cc.struct<{!cc.ptr<i8>, i64}>
// CHECK:         }

// CHECK-LABEL:   func.func @function_RzArcTan2.
// CHECK-SAME:      .argsCreator(%[[VAL_0:.*]]: !cc.ptr<!cc.ptr<i8>>, %[[VAL_1:.*]]: !cc.ptr<!cc.ptr<i8>>) -> i64 {
// CHECK:           %[[VAL_2:.*]] = cc.undef !cc.struct<{i1, i64}>
// CHECK:           %[[VAL_3:.*]] = arith.constant 0 : i64
// CHECK:           %[[VAL_4:.*]] = cc.compute_ptr %[[VAL_0]][0] : (!cc.ptr<!cc.ptr<i8>>) -> !cc.ptr<!cc.ptr<i8>>
// CHECK:           %[[VAL_5:.*]] = cc.load %[[VAL_4]] : !cc.ptr<!cc.ptr<i8>>
// CHECK:           %[[VAL_6:.*]] = cc.cast %[[VAL_5]] : (!cc.ptr<i8>) -> !cc.ptr<i1>
// CHECK:           %[[VAL_7:.*]] = cc.load %[[VAL_6]] : !cc.ptr<i1>
// CHECK:           %[[VAL_8:.*]] = cc.insert_value %[[VAL_7]], %[[VAL_2]][0] : (!cc.struct<{i1, i64}>, i1) -> !cc.struct<{i1, i64}>
// CHECK:           %[[VAL_9:.*]] = cc.compute_ptr %[[VAL_0]][1] : (!cc.ptr<!cc.ptr<i8>>) -> !cc.ptr<!cc.ptr<i8>>
// CHECK:           %[[VAL_10:.*]] = cc.load %[[VAL_9]] : !cc.ptr<!cc.ptr<i8>>
// CHECK:           %[[VAL_11:.*]] = cc.cast %[[VAL_10]] : (!cc.ptr<i8>) -> !cc.ptr<!cc.struct<{!cc.ptr<i32>, !cc.ptr<i32>, !cc.ptr<i32>}>>
// CHECK:           %[[VAL_12:.*]] = cc.compute_ptr %[[VAL_11]][0, 1] : (!cc.ptr<!cc.struct<{!cc.ptr<i32>, !cc.ptr<i32>, !cc.ptr<i32>}>>) -> !cc.ptr<!cc.ptr<i32>>
// CHECK:           %[[VAL_13:.*]] = cc.compute_ptr %[[VAL_11]][0, 0] : (!cc.ptr<!cc.struct<{!cc.ptr<i32>, !cc.ptr<i32>, !cc.ptr<i32>}>>) -> !cc.ptr<!cc.ptr<i32>>
// CHECK:           %[[VAL_14:.*]] = cc.load %[[VAL_12]] : !cc.ptr<!cc.ptr<i32>>
// CHECK:           %[[VAL_15:.*]] = cc.load %[[VAL_13]] : !cc.ptr<!cc.ptr<i32>>
// CHECK:           %[[VAL_16:.*]] = cc.cast %[[VAL_14]] : (!cc.ptr<i32>) -> i64
// CHECK:           %[[VAL_17:.*]] = cc.cast %[[VAL_15]] : (!cc.ptr<i32>) -> i64
// CHECK:           %[[VAL_18:.*]] = arith.subi %[[VAL_16]], %[[VAL_17]] : i64
// CHECK:           %[[VAL_19:.*]] = cc.insert_value %[[VAL_18]], %[[VAL_8]][1] : (!cc.struct<{i1, i64}>, i64) -> !cc.struct<{i1, i64}>
// CHECK:           %[[VAL_20:.*]] = arith.addi %[[VAL_3]], %[[VAL_18]] : i64
// CHECK:           %[[VAL_21:.*]] = cc.cast %[[VAL_3]] : (i64) -> !cc.ptr<!cc.struct<{i1, i64}>>
// CHECK:           %[[VAL_22:.*]] = cc.compute_ptr %[[VAL_21]][1] : (!cc.ptr<!cc.struct<{i1, i64}>>) -> !cc.ptr<!cc.struct<{i1, i64}>>
// CHECK:           %[[VAL_23:.*]] = cc.cast %[[VAL_22]] : (!cc.ptr<!cc.struct<{i1, i64}>>) -> i64
// CHECK:           %[[VAL_24:.*]] = arith.addi %[[VAL_23]], %[[VAL_20]] : i64
// CHECK:           %[[VAL_25:.*]] = call @malloc(%[[VAL_24]]) : (i64) -> !cc.ptr<i8>
// CHECK:           %[[VAL_26:.*]] = cc.cast %[[VAL_25]] : (!cc.ptr<i8>) -> !cc.ptr<!cc.struct<{i1, i64}>>
// CHECK:           cc.store %[[VAL_19]], %[[VAL_26]] : !cc.ptr<!cc.struct<{i1, i64}>>
// CHECK:           %[[VAL_27:.*]] = cc.compute_ptr %[[VAL_25]][%[[VAL_23]]] : (!cc.ptr<i8>, i64) -> !cc.ptr<i8>
// CHECK:           %[[VAL_28:.*]] = cc.extract_value %[[VAL_19]][1] : (!cc.struct<{i1, i64}>) -> i64
// CHECK:           %[[VAL_29:.*]] = cc.compute_ptr %[[VAL_0]][1] : (!cc.ptr<!cc.ptr<i8>>) -> !cc.ptr<!cc.ptr<i8>>
// CHECK:           %[[VAL_30:.*]] = cc.load %[[VAL_29]] : !cc.ptr<!cc.ptr<i8>>
// CHECK:           %[[VAL_31:.*]] = cc.cast %[[VAL_30]] : (!cc.ptr<i8>) -> !cc.ptr<!cc.struct<{!cc.ptr<i32>, !cc.ptr<i32>, !cc.ptr<i32>}>>
// CHECK:           %[[VAL_32:.*]] = arith.constant false
// CHECK:           %[[VAL_33:.*]] = cc.compute_ptr %[[VAL_31]][0, 0] : (!cc.ptr<!cc.struct<{!cc.ptr<i32>, !cc.ptr<i32>, !cc.ptr<i32>}>>) -> !cc.ptr<!cc.ptr<i32>>
// CHECK:           %[[VAL_34:.*]] = cc.load %[[VAL_33]] : !cc.ptr<!cc.ptr<i32>>
// CHECK:           %[[VAL_35:.*]] = cc.cast %[[VAL_34]] : (!cc.ptr<i32>) -> !cc.ptr<i8>
// CHECK:           call @llvm.memcpy.p0i8.p0i8.i64(%[[VAL_27]], %[[VAL_35]], %[[VAL_28]], %[[VAL_32]]) : (!cc.ptr<i8>, !cc.ptr<i8>, i64, i1) -> ()
// CHECK:           %[[VAL_36:.*]] = cc.compute_ptr %[[VAL_27]][%[[VAL_28]]] : (!cc.ptr<i8>, i64) -> !cc.ptr<i8>
// CHECK:           cc.store %[[VAL_25]], %[[VAL_1]] : !cc.ptr<!cc.ptr<i8>>
// CHECK:           return %[[VAL_24]] : i64
// CHECK:         }

// CHECK-LABEL:   func.func @_Z9RzArcTan2bSt6vectorIiSaIiEE(
// CHECK-SAME:        %[[VAL_0:.*]]: i1, %[[VAL_1:.*]]: !cc.ptr<!cc.struct<{!cc.ptr<i32>, !cc.ptr<i32>, !cc.ptr<i32>}>>) {
// CHECK:           %[[VAL_2:.*]] = cc.undef !cc.struct<{i1, i64}>
// CHECK:           %[[VAL_3:.*]] = arith.constant 0 : i64
// CHECK:           %[[VAL_4:.*]] = cc.insert_value %[[VAL_0]], %[[VAL_2]][0] : (!cc.struct<{i1, i64}>, i1) -> !cc.struct<{i1, i64}>
// CHECK:           %[[VAL_5:.*]] = cc.compute_ptr %[[VAL_1]][0, 1] : (!cc.ptr<!cc.struct<{!cc.ptr<i32>, !cc.ptr<i32>, !cc.ptr<i32>}>>) -> !cc.ptr<!cc.ptr<i32>>
// CHECK:           %[[VAL_6:.*]] = cc.compute_ptr %[[VAL_1]][0, 0] : (!cc.ptr<!cc.struct<{!cc.ptr<i32>, !cc.ptr<i32>, !cc.ptr<i32>}>>) -> !cc.ptr<!cc.ptr<i32>>
// CHECK:           %[[VAL_7:.*]] = cc.load %[[VAL_5]] : !cc.ptr<!cc.ptr<i32>>
// CHECK:           %[[VAL_8:.*]] = cc.load %[[VAL_6]] : !cc.ptr<!cc.ptr<i32>>
// CHECK:           %[[VAL_9:.*]] = cc.cast %[[VAL_7]] : (!cc.ptr<i32>) -> i64
// CHECK:           %[[VAL_10:.*]] = cc.cast %[[VAL_8]] : (!cc.ptr<i32>) -> i64
// CHECK:           %[[VAL_11:.*]] = arith.subi %[[VAL_9]], %[[VAL_10]] : i64
// CHECK:           %[[VAL_12:.*]] = cc.insert_value %[[VAL_11]], %[[VAL_4]][1] : (!cc.struct<{i1, i64}>, i64) -> !cc.struct<{i1, i64}>
// CHECK:           %[[VAL_13:.*]] = arith.addi %[[VAL_3]], %[[VAL_11]] : i64
// CHECK:           %[[VAL_14:.*]] = cc.cast %[[VAL_3]] : (i64) -> !cc.ptr<!cc.struct<{i1, i64}>>
// CHECK:           %[[VAL_15:.*]] = cc.compute_ptr %[[VAL_14]][1] : (!cc.ptr<!cc.struct<{i1, i64}>>) -> !cc.ptr<!cc.struct<{i1, i64}>>
// CHECK:           %[[VAL_16:.*]] = cc.cast %[[VAL_15]] : (!cc.ptr<!cc.struct<{i1, i64}>>) -> i64
// CHECK:           %[[VAL_17:.*]] = arith.addi %[[VAL_16]], %[[VAL_13]] : i64
// CHECK:           %[[VAL_18:.*]] = cc.alloca i8[%[[VAL_17]] : i64]
// CHECK:           %[[VAL_19:.*]] = cc.cast %[[VAL_18]] : (!cc.ptr<!cc.array<i8 x ?>>) -> !cc.ptr<!cc.struct<{i1, i64}>>
// CHECK:           cc.store %[[VAL_12]], %[[VAL_19]] : !cc.ptr<!cc.struct<{i1, i64}>>
// CHECK:           %[[VAL_20:.*]] = cc.compute_ptr %[[VAL_18]][%[[VAL_16]]] : (!cc.ptr<!cc.array<i8 x ?>>, i64) -> !cc.ptr<i8>
// CHECK-DAG:       %[[VAL_22:.*]] = cc.extract_value %[[VAL_12]][1] : (!cc.struct<{i1, i64}>) -> i64
// CHECK-DAG:       %[[VAL_21:.*]] = arith.constant false
// CHECK:           %[[VAL_23:.*]] = cc.compute_ptr %[[VAL_1]][0, 0] : (!cc.ptr<!cc.struct<{!cc.ptr<i32>, !cc.ptr<i32>, !cc.ptr<i32>}>>) -> !cc.ptr<!cc.ptr<i32>>
// CHECK:           %[[VAL_24:.*]] = cc.load %[[VAL_23]] : !cc.ptr<!cc.ptr<i32>>
// CHECK:           %[[VAL_25:.*]] = cc.cast %[[VAL_24]] : (!cc.ptr<i32>) -> !cc.ptr<i8>
// CHECK:           call @llvm.memcpy.p0i8.p0i8.i64(%[[VAL_20]], %[[VAL_25]], %[[VAL_22]], %[[VAL_21]]) : (!cc.ptr<i8>, !cc.ptr<i8>, i64, i1) -> ()
// CHECK:           %[[VAL_26:.*]] = cc.compute_ptr %[[VAL_20]][%[[VAL_22]]] : (!cc.ptr<i8>, i64) -> !cc.ptr<i8>
// CHECK:           %[[VAL_27:.*]] = llvm.mlir.addressof @function_RzArcTan2._Z9RzArcTan2bSt6vectorIiSaIiEE.kernelName : !llvm.ptr<array<50 x i8>>
// CHECK:           %[[VAL_28:.*]] = constant @function_RzArcTan2._Z9RzArcTan2bSt6vectorIiSaIiEE.thunk : (!cc.ptr<i8>, i1) -> !cc.struct<{!cc.ptr<i8>, i64}>
// CHECK:           %[[VAL_29:.*]] = cc.cast %[[VAL_27]] : (!llvm.ptr<array<50 x i8>>) -> !cc.ptr<i8>
// CHECK:           %[[VAL_30:.*]] = cc.func_ptr %[[VAL_28]] : ((!cc.ptr<i8>, i1) -> !cc.struct<{!cc.ptr<i8>, i64}>) -> !cc.ptr<i8>
// CHECK:           %[[VAL_31:.*]] = cc.cast %[[VAL_19]] : (!cc.ptr<!cc.struct<{i1, i64}>>) -> !cc.ptr<i8>
// CHECK:           %[[VAL_32:.*]] = arith.constant 2147483647 : i64
// CHECK:           call @altLaunchKernel(%[[VAL_29]], %[[VAL_30]], %[[VAL_31]], %[[VAL_17]], %[[VAL_32]]) : (!cc.ptr<i8>, !cc.ptr<i8>, !cc.ptr<i8>, i64, i64) -> ()
// CHECK:           return
// CHECK:         }

// CHECK-LABEL:   llvm.func @function_RzArcTan2._Z9RzArcTan2bSt6vectorIiSaIiEE.kernelRegFunc() {
// CHECK:           %[[VAL_0:.*]] = llvm.mlir.addressof @function_RzArcTan2.{{.*}}.kernelName : !llvm.ptr<array<50 x i8>>
// CHECK:           %[[VAL_1:.*]] = cc.cast %[[VAL_0]] : (!llvm.ptr<array<50 x i8>>) -> !cc.ptr<i8>
// CHECK:           func.call @cudaqRegisterKernelName(%[[VAL_1]]) : (!cc.ptr<i8>) -> ()
// CHECK:           %[[VAL_2:.*]] = func.constant @function_RzArcTan2._Z9RzArcTan2bSt6vectorIiSaIiEE.argsCreator : (!cc.ptr<!cc.ptr<i8>>, !cc.ptr<!cc.ptr<i8>>) -> i64
// CHECK:           %[[VAL_3:.*]] = cc.func_ptr %[[VAL_2]] : ((!cc.ptr<!cc.ptr<i8>>, !cc.ptr<!cc.ptr<i8>>) -> i64) -> !cc.ptr<i8>
// CHECK:           func.call @cudaqRegisterArgsCreator(%[[VAL_1]], %[[VAL_3]]) : (!cc.ptr<i8>, !cc.ptr<i8>) -> ()
// CHECK:           llvm.return
// CHECK:         }

// CHECK:         llvm.mlir.global_ctors {ctors = [@function_RzArcTan2{{.*}}], priorities = [17 : i32]}


// ========================================================================== //
// Copyright (c) 2022 - 2023 NVIDIA Corporation & Affiliates.                 //
// All rights reserved.                                                       //
//                                                                            //
// This source code and the accompanying materials are made available under   //
// the terms of the Apache License 2.0 which accompanies this distribution.   //
// ========================================================================== //

// RUN: cudaq-opt --apply-op-specialization --canonicalize %s | FileCheck %s

// Test the creation of an adjoint kernel with SESE regions.
module {
  func.func @__nvqpp__mlirgen__MyKernel(%arg0: i1, %arg1: i1, %arg2: i32) attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %c1_i64 = arith.constant 1 : i64
    %c0_i64 = arith.constant 0 : i64
    %c1_i32 = arith.constant 1 : i32
    %c0_i32 = arith.constant 0 : i32
    %0 = quake.alloca !quake.veq<2>
    cc.if(%arg0) {
      %3 = quake.extract_ref %0[%c0_i64] : (!quake.veq<2>,i64) -> !quake.ref
      %4 = quake.extract_ref %0[%c1_i64] : (!quake.veq<2>,i64) -> !quake.ref
      quake.h [%3] %4 : (!quake.ref, !quake.ref) -> ()
      quake.x %4 : (!quake.ref) -> ()
      quake.y [%3] %4 : (!quake.ref, !quake.ref) -> ()
    }
    %dead = cc.loop while ((%iter = %c0_i32) -> (i32)) {
      %5 = arith.cmpi slt, %iter, %arg2 : i32
      cc.condition %5 (%iter : i32)
    } do {
      ^bb1(%iter : i32):
        %3 = quake.extract_ref %0[%c0_i64] : (!quake.veq<2>,i64) -> !quake.ref
        %4 = quake.extract_ref %0[%c1_i64] : (!quake.veq<2>,i64) -> !quake.ref
        quake.x [%3] %4 : (!quake.ref, !quake.ref) -> ()
        quake.y %4 : (!quake.ref) -> ()
        quake.z [%3] %4 : (!quake.ref, !quake.ref) -> ()
        cc.continue %iter : i32
    } step {
      ^bb2(%iter : i32):
        %4 = arith.addi %iter, %c1_i32 : i32
	cc.continue %4 : i32
    }
    %b3 = cc.if(%arg0) -> i1 {
      cc.continue %arg0 : i1
    } else {
      cc.continue %arg1 : i1
    }
    cc.if(%b3) {
      %3 = quake.extract_ref %0[%c1_i64] : (!quake.veq<2>,i64) -> !quake.ref
      %4 = quake.extract_ref %0[%c0_i64] : (!quake.veq<2>,i64) -> !quake.ref
      quake.y %4 : (!quake.ref) -> ()
      quake.z [%3] %4 : (!quake.ref, !quake.ref) -> ()
      quake.h %4 : (!quake.ref) -> ()
    }
    return
  }

  // Function to trigger the auto-generation.
  func.func @build_adjoint(%arg0: i1, %arg1: i1, %arg2: i32) attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    quake.apply<adj> @__nvqpp__mlirgen__MyKernel %arg0, %arg1, %arg2 : (i1, i1, i32) -> ()
    return
  }
}

// CHECK-LABEL:   func.func private @__nvqpp__mlirgen__MyKernel.adj(
// CHECK-SAME:       %[[VAL_0:.*]]: i1, %[[VAL_1:.*]]: i1, %[[VAL_2:.*]]: i32) {
// CHECK:           %[[VAL_5:.*]] = arith.constant 1 : i32
// CHECK:           %[[VAL_6:.*]] = arith.constant 0 : i32
// CHECK:           %[[VAL_7:.*]] = quake.alloca !quake.veq<2>
// CHECK:           %[[VAL_8:.*]] = cc.if(%[[VAL_0]]) -> i1 {
// CHECK:             cc.continue %[[VAL_0]] : i1
// CHECK:           } else {
// CHECK:             cc.continue %[[VAL_1]] : i1
// CHECK:           }
// CHECK:           cc.if(%[[VAL_9:.*]]) {
// CHECK: %[[VAL_10:.*]] = quake.extract_ref %[[VAL_7]][1] : (!quake.veq<2>) -> !quake.ref
// CHECK: %[[VAL_11:.*]] = quake.extract_ref %[[VAL_7]][0] : (!quake.veq<2>) -> !quake.ref
// CHECK:             quake.h %[[VAL_11]] :
// CHECK:             quake.z [%[[VAL_10]]] %[[VAL_11]] :
// CHECK:             quake.y %[[VAL_11]] :
// CHECK:           }
// CHECK:           %[[VAL_12:.*]] = arith.cmpi sgt, %[[VAL_2]], %[[VAL_6]] : i32
// CHECK:           %[[VAL_13:.*]] = arith.select %[[VAL_12]], %[[VAL_2]], %[[VAL_6]] : i32
// CHECK:           %[[VAL_14:.*]] = arith.subi %[[VAL_13]], %[[VAL_5]] : i32
// CHECK:           %[[VAL_15:.*]]:2 = cc.loop while ((%[[VAL_16:.*]] = %[[VAL_14]], %[[VAL_17:.*]] = %[[VAL_13]]) -> (i32, i32)) {
// CHECK:             %[[VAL_18:.*]] = arith.cmpi sgt, %[[VAL_17]], %[[VAL_6]] : i32
// CHECK:             cc.condition %[[VAL_18]](%[[VAL_16]], %[[VAL_17]] : i32, i32)
// CHECK:           } do {
// CHECK:           ^bb0(%[[VAL_19:.*]]: i32, %[[VAL_20:.*]]: i32):
// CHECK:             %[[VAL_21:.*]] = quake.extract_ref %[[VAL_7]][0] : (!quake.veq<2>) -> !quake.ref
// CHECK:             %[[VAL_22:.*]] = quake.extract_ref %[[VAL_7]][1] : (!quake.veq<2>) -> !quake.ref
// CHECK:             quake.z [%[[VAL_21]]] %[[VAL_22]] :
// CHECK:             quake.y %[[VAL_22]] :
// CHECK:             quake.x [%[[VAL_21]]] %[[VAL_22]] :
// CHECK:             cc.continue %[[VAL_19]], %[[VAL_20]] : i32, i32
// CHECK:           } step {
// CHECK:           ^bb0(%[[VAL_23:.*]]: i32, %[[VAL_24:.*]]: i32):
// CHECK:             %[[VAL_25:.*]] = arith.subi %[[VAL_23]], %[[VAL_5]] : i32
// CHECK:             %[[VAL_26:.*]] = arith.subi %[[VAL_24]], %[[VAL_5]] : i32
// CHECK:             cc.continue %[[VAL_25]], %[[VAL_26]] : i32, i32
// CHECK:           }
// CHECK:           cc.if(%[[VAL_0]]) {
// CHECK:             %[[VAL_27:.*]] = quake.extract_ref %[[VAL_7]][0] : (!quake.veq<2>) -> !quake.ref
// CHECK:             %[[VAL_28:.*]] = quake.extract_ref %[[VAL_7]][1] : (!quake.veq<2>) -> !quake.ref
// CHECK:             quake.y [%[[VAL_27]]] %[[VAL_28]] :
// CHECK:             quake.x %[[VAL_28]] :
// CHECK:             quake.h [%[[VAL_27]]] %[[VAL_28]] :
// CHECK:           }
// CHECK:           return
// CHECK:         }

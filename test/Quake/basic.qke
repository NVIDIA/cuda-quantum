// ========================================================================== //
// Copyright (c) 2022 - 2023 NVIDIA Corporation & Affiliates.                 //
// All rights reserved.                                                       //
//                                                                            //
// This source code and the accompanying materials are made available under   //
// the terms of the Apache License 2.0 which accompanies this distribution.   //
// ========================================================================== //

// RUN: cudaq-opt %s | cudaq-opt | FileCheck %s

// CHECK-LABEL: func @alloc(
// CHECK-SAME: %[[SIZE:.*]]: i32
func.func @alloc(%size : i32) {
  // CHECK: %[[QUBIT:.*]] = quake.alloca !quake.ref
  %qubit = quake.alloca !quake.ref
  // CHECK: %[[QREG0:.*]] = quake.alloca !quake.veq<?>[%[[SIZE]] : i32]
  %veq0 = quake.alloca  !quake.veq<?>[%size : i32]
  // CHECK: %[[QREG1:.*]] = quake.alloca !quake.veq<4>
  %veq1 = quake.alloca !quake.veq<4>
  return
}

// CHECK-LABEL: func @alloc_qubit
func.func @alloc_qubit() {
  // CHECK: %[[QUBIT:.*]] = quake.alloca !quake.ref
  %qubit = quake.alloca !quake.ref
  return
}

// CHECK-LABEL: func @alloc_qreg
func.func @alloc_qreg() {
  // CHECK: %[[QREG1:.*]] = quake.alloca !quake.veq<2>
  %veq = quake.alloca !quake.veq<2>
  return
}

// CHECK-LABEL: func @args(
// CHECK-SAME: %{{.*}}: !quake.ref, %{{.*}}: !quake.veq<2>)
func.func @args(%qubit: !quake.ref, %veq: !quake.veq<2>) {
  return
}

// CHECK-LABEL: func @reset
func.func @reset() {
  // CHECK: %[[QUBIT:.*]] = quake.alloca !quake.ref
  %qubit = quake.alloca !quake.ref
  // CHECK: quake.reset %[[QUBIT]] : (!quake.ref) -> ()
  quake.reset %qubit : (!quake.ref) -> ()
  // CHECK: %[[QREG:.*]] = quake.alloca !quake.veq<2>
  %qreg = quake.alloca !quake.veq<2>
  // CHECK: quake.reset %[[QREG]] : (!quake.veq<2>) -> ()
  quake.reset %qreg : (!quake.veq<2>) -> ()
  return
}

// CHECK-LABEL: func @apply_x
func.func @apply_x() {
  // CHECK: %[[QUBIT:.*]] = quake.alloca !quake.ref
  %qubit = quake.alloca !quake.ref
  quake.x %qubit : (!quake.ref) -> ()
  return
}

// CHECK-LABEL: func @apply_cx
func.func @apply_cx() {
  %c0 = arith.constant 0 : index
  %c1 = arith.constant 1 : index
  // CHECK: %[[QREG1:.*]] = quake.alloca !quake.veq<2>
  %veq = quake.alloca  !quake.veq<2>
  %q0 = quake.extract_ref %veq[%c0] : (!quake.veq<2>,index) -> !quake.ref
  %q1 = quake.extract_ref %veq[%c1] : (!quake.veq<2>,index) -> !quake.ref
  quake.x [%q0] %q1 : (!quake.ref, !quake.ref) -> ()
  return
}

func.func @apply_cx_v() {
  %c0 = arith.constant 0 : index
  %c1 = arith.constant 1 : index
  // CHECK: %[[QREG1:.*]] = quake.alloca !quake.veq<2>
  %veq = quake.alloca  !quake.veq<2>
  %q0 = quake.extract_ref %veq[%c0] : (!quake.veq<2>,index) -> !quake.ref
  %q1 = quake.extract_ref %veq[%c1] : (!quake.veq<2>,index) -> !quake.ref
  %q2 = quake.unwrap %q0 : (!quake.ref) -> !quake.wire
  %q3 = quake.unwrap %q1 : (!quake.ref) -> !quake.wire
  // CHECK: %{{.*}} = quake.x [%{{.*}}] %{{.*}} : (!quake.wire, !quake.wire) -> (!quake.wire, !quake.wire)
  %q5:2 = quake.x [%q2] %q3 : (!quake.wire, !quake.wire) -> (!quake.wire, !quake.wire)
  quake.wrap %q5#1 to %q1 : !quake.wire, !quake.ref
  quake.wrap %q5#0 to %q0 : !quake.wire, !quake.ref
  return
}

// ========================================================================== //
// Copyright (c) 2022 - 2024 NVIDIA Corporation & Affiliates.                 //
// All rights reserved.                                                       //
//                                                                            //
// This source code and the accompanying materials are made available under   //
// the terms of the Apache License 2.0 which accompanies this distribution.   //
// ========================================================================== //

// cudaq-opt dependency_if_example_length.qke --add-wireset --assign-wire-indices --dep-analysis

// XFAIL: *

// This is a result of the TODO in liftAlloc here: https://github.com/bmhowe23/cuda-quantum/blob/3879872c5ddcf3aba3d521bd050a118c8fa1dddb/lib/Optimizer/Transforms/DependencyAnalysis.cpp#L2465
// The check here is failing: https://github.com/bmhowe23/cuda-quantum/blob/3879872c5ddcf3aba3d521bd050a118c8fa1dddb/lib/Optimizer/Transforms/DependencyAnalysis.cpp#L2692

func.func @test() -> !quake.measure attributes {"cudaq-entrypoint", "cudaq-kernel"} {
  %true = arith.constant true
  %0 = quake.null_wire
  %1 = quake.null_wire
  %2 = quake.null_wire
  %3 = quake.h %0 : (!quake.wire) -> !quake.wire
  %4:3 = cc.if(%true) ((%arg1 = %3, %arg2 = %1, %arg3 = %2)) -> (!quake.wire, !quake.wire, !quake.wire) {
    %5 = quake.h %arg2 : (!quake.wire) -> !quake.wire
    %6:2 = quake.x [%5] %arg1 : (!quake.wire, !quake.wire) -> (!quake.wire, !quake.wire)
    cc.continue %6#1, %6#0, %arg3: !quake.wire, !quake.wire, !quake.wire
  } else {
    %5 = quake.h %arg3 : (!quake.wire) -> !quake.wire
    %6:2 = quake.y [%5] %arg1 : (!quake.wire, !quake.wire) -> (!quake.wire, !quake.wire)
    cc.continue %6#1, %arg2, %6#0: !quake.wire, !quake.wire, !quake.wire
  }
  %measOut, %wires = quake.mz %4#0 : (!quake.wire) -> (!quake.measure, !quake.wire)
  quake.sink %wires : !quake.wire
  quake.sink %4#1 : !quake.wire
  quake.sink %4#2 : !quake.wire
  return %measOut : !quake.measure
}

// CHECK-LABEL:   quake.wire_set @wires[2147483647] attributes {sym_visibility = "private"}

// CHECK-LABEL:   func.func @test() -> !quake.measure attributes {"cudaq-entrypoint", "cudaq-kernel"} {
// CHECK:           %[[VAL_0:.*]] = quake.borrow_wire @wires[1] : !quake.wire
// CHECK:           %[[VAL_1:.*]] = quake.h %[[VAL_0]] : (!quake.wire) -> !quake.wire
// CHECK:           %[[VAL_2:.*]] = arith.constant true
// CHECK:           %[[VAL_3:.*]] = quake.borrow_wire @wires[0] : !quake.wire
// CHECK:           %[[VAL_4:.*]] = quake.h %[[VAL_3]] : (!quake.wire) -> !quake.wire
// CHECK:           %[[VAL_5:.*]]:2 = cc.if(%[[VAL_2]]) ((%[[VAL_5:.*]] = %[[VAL_1]], %[[VAL_6:.*]] = %[[VAL_4]])) -> (!quake.wire, !quake.wire) {
// CHECK:             %[[VAL_8:.*]]:2 = quake.x {{\[}}%[[VAL_6]]] %[[VAL_5]] : (!quake.wire, !quake.wire) -> (!quake.wire, !quake.wire)
// CHECK:             cc.continue %[[VAL_8]]#1, %[[VAL_8]]#0 : !quake.wire, !quake.wire
// CHECK:           } else {
// CHECK:             %[[VAL_11:.*]]:2 = quake.y {{\[}}%[[VAL_6]]] %[[VAL_12:.*]] : (!quake.wire, !quake.wire) -> (!quake.wire, !quake.wire)
// CHECK:             cc.continue %[[VAL_11]]#1, %[[VAL_11]]#0 : !quake.wire, !quake.wire
// CHECK:           }
// CHECK:           quake.return_wire %[[VAL_5]]#1 : !quake.wire
// CHECK:           %[[VAL_14:.*]], %[[VAL_15:.*]] = quake.mz %[[VAL_5]]#0 : (!quake.wire) -> (!quake.measure, !quake.wire)
// CHECK:           quake.return_wire %[[VAL_15]] : !quake.wire
// CHECK:           return %[[VAL_14]] : !quake.measure
// CHECK:         }
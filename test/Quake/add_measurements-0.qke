// ========================================================================== //
// Copyright (c) 2025 NVIDIA Corporation & Affiliates.                        //
// All rights reserved.                                                       //
//                                                                            //
// This source code and the accompanying materials are made available under   //
// the terms of the Apache License 2.0 which accompanies this distribution.   //
// ========================================================================== //

// RUN: cudaq-opt --add-measurements %s | FileCheck %s

func.func @__nvqpp__mlirgen__simple() attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %0 = quake.alloca !quake.ref
    quake.x %0 : (!quake.ref) -> ()
    return
}
// CHECK-LABEL:   func.func @__nvqpp__mlirgen__simple() attributes {"cudaq-entrypoint", "cudaq-kernel"} {
// CHECK:           %[[VAL_0:.*]] = quake.alloca !quake.ref
// CHECK:           quake.x %[[VAL_0]] : (!quake.ref) -> ()
// CHECK:           cf.br ^bb1
// CHECK:         ^bb1:
// CHECK:           %[[VAL_1:.*]] = quake.mz %[[VAL_0]] : (!quake.ref) -> !quake.measure
// CHECK:           return
// CHECK:         }

func.func @__nvqpp__mlirgen__two_qubits() attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %0 = quake.alloca !quake.ref
    %1 = quake.alloca !quake.ref
    quake.h %0 : (!quake.ref) -> ()
    quake.x [%0] %1 : (!quake.ref, !quake.ref) -> ()
    return
}
// CHECK-LABEL:   func.func @__nvqpp__mlirgen__two_qubits() attributes {"cudaq-entrypoint", "cudaq-kernel"} {
// CHECK:           %[[VAL_0:.*]] = quake.alloca !quake.ref
// CHECK:           %[[VAL_1:.*]] = quake.alloca !quake.ref
// CHECK:           quake.h %[[VAL_0]] : (!quake.ref) -> ()
// CHECK:           quake.x {{\[}}%[[VAL_0]]] %[[VAL_1]] : (!quake.ref, !quake.ref) -> ()
// CHECK:           cf.br ^bb1
// CHECK:         ^bb1:
// CHECK:           %[[VAL_2:.*]] = quake.mz %[[VAL_0]] : (!quake.ref) -> !quake.measure
// CHECK:           %[[VAL_3:.*]] = quake.mz %[[VAL_1]] : (!quake.ref) -> !quake.measure
// CHECK:           return
// CHECK:         }

func.func @__nvqpp__mlirgen__bell_pair_no_mz() attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %0 = quake.alloca !quake.veq<2>
    %1 = quake.extract_ref %0[0] : (!quake.veq<2>) -> !quake.ref
    quake.h %1 : (!quake.ref) -> ()
    %2 = quake.extract_ref %0[1] : (!quake.veq<2>) -> !quake.ref
    quake.x [%1] %2 : (!quake.ref, !quake.ref) -> ()
    return
}
// CHECK-LABEL:   func.func @__nvqpp__mlirgen__bell_pair_no_mz() attributes {"cudaq-entrypoint", "cudaq-kernel"} {
// CHECK:           %[[VAL_0:.*]] = quake.alloca !quake.veq<2>
// CHECK:           %[[VAL_1:.*]] = quake.extract_ref %[[VAL_0]][0] : (!quake.veq<2>) -> !quake.ref
// CHECK:           quake.h %[[VAL_1]] : (!quake.ref) -> ()
// CHECK:           %[[VAL_2:.*]] = quake.extract_ref %[[VAL_0]][1] : (!quake.veq<2>) -> !quake.ref
// CHECK:           quake.x {{\[}}%[[VAL_1]]] %[[VAL_2]] : (!quake.ref, !quake.ref) -> ()
// CHECK:           cf.br ^bb1
// CHECK:         ^bb1:
// CHECK:           %[[VAL_3:.*]] = quake.mz %[[VAL_0]] : (!quake.veq<2>) -> !cc.stdvec<!quake.measure>
// CHECK:           return
// CHECK:         }

func.func @__nvqpp__mlirgen__kernel_with_branch(%arg0: i1) attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %0 = cc.alloca i1
    cc.store %arg0, %0 : !cc.ptr<i1>
    %1 = quake.alloca !quake.ref
    %2 = cc.load %0 : !cc.ptr<i1>
    cc.if(%2) {
        quake.h %1 : (!quake.ref) -> ()
    } else {
        quake.x %1 : (!quake.ref) -> ()
    }
    return
}
// CHECK-LABEL:   func.func @__nvqpp__mlirgen__kernel_with_branch(
// CHECK-SAME:                                                    %[[VAL_0:.*]]: i1) attributes {"cudaq-entrypoint", "cudaq-kernel"} {
// CHECK:           %[[VAL_1:.*]] = cc.alloca i1
// CHECK:           cc.store %[[VAL_0]], %[[VAL_1]] : !cc.ptr<i1>
// CHECK:           %[[VAL_2:.*]] = quake.alloca !quake.ref
// CHECK:           %[[VAL_3:.*]] = cc.load %[[VAL_1]] : !cc.ptr<i1>
// CHECK:           cc.if(%[[VAL_3]]) {
// CHECK:             quake.h %[[VAL_2]] : (!quake.ref) -> ()
// CHECK:           } else {
// CHECK:             quake.x %[[VAL_2]] : (!quake.ref) -> ()
// CHECK:           }
// CHECK:           cf.br ^bb1
// CHECK:         ^bb1:
// CHECK:           %[[VAL_4:.*]] = quake.mz %[[VAL_2]] : (!quake.ref) -> !quake.measure
// CHECK:           return
// CHECK:         }

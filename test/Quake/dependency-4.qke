// ========================================================================== //
// Copyright (c) 2022 - 2024 NVIDIA Corporation & Affiliates.                 //
// All rights reserved.                                                       //
//                                                                            //
// This source code and the accompanying materials are made available under   //
// the terms of the Apache License 2.0 which accompanies this distribution.   //
// ========================================================================== //

// RUN: cudaq-opt --add-wireset --assign-wire-indices --dep-analysis %s | FileCheck %s

// This a test mostly for scheduling

func.func @test2() -> i1 attributes {"cudaq-kernel"} {
  %0 = quake.null_wire
  %1 = quake.null_wire
  %2:2 = quake.x [%0] %1 : (!quake.wire, !quake.wire) -> (!quake.wire, !quake.wire)
  %3 = quake.h %2#1 : (!quake.wire) -> !quake.wire
  %4:2 = quake.x [%2#0] %3 : (!quake.wire, !quake.wire) -> (!quake.wire, !quake.wire)
  %5:2 = quake.mz %4#0 : (!quake.wire) -> (!quake.measure, !quake.wire)
  %6 = quake.discriminate %5#0 : (!quake.measure) -> i1
  quake.sink %5#1 : !quake.wire
  quake.sink %4#1 : !quake.wire
  return %6 : i1
}

// CHECK-LABEL:   quake.wire_set @wires[2147483647]

// CHECK-LABEL:   func.func @test2() -> i1 attributes {"cudaq-kernel"} {
// CHECK-DAG:       %[[VAL_0:.*]] = quake.borrow_wire @wires[0] : !quake.wire
// CHECK-DAG:       %[[VAL_1:.*]] = quake.borrow_wire @wires[1] : !quake.wire
// CHECK:           %[[VAL_2:.*]]:2 = quake.x {{\[}}%[[VAL_0]]] %[[VAL_1]] : (!quake.wire, !quake.wire) -> (!quake.wire, !quake.wire)
// CHECK:           %[[VAL_3:.*]] = quake.h %[[VAL_2]]#1 : (!quake.wire) -> !quake.wire
// CHECK:           %[[VAL_4:.*]]:2 = quake.x {{\[}}%[[VAL_2]]#0] %[[VAL_3]] : (!quake.wire, !quake.wire) -> (!quake.wire, !quake.wire)
// CHECK:           quake.return_wire %[[VAL_4]]#1 : !quake.wire
// CHECK:           %[[VAL_5:.*]], %[[VAL_6:.*]] = quake.mz %[[VAL_4]]#0 : (!quake.wire) -> (!quake.measure, !quake.wire)
// CHECK-DAG:       %[[VAL_7:.*]] = quake.discriminate %[[VAL_5]] : (!quake.measure) -> i1
// CHECK-DAG:       quake.return_wire %[[VAL_6]] : !quake.wire
// CHECK:           return %[[VAL_7]] : i1
// CHECK:         }
// ========================================================================== //
// Copyright (c) 2022 - 2023 NVIDIA Corporation & Affiliates.                 //
// All rights reserved.                                                       //
//                                                                            //
// This source code and the accompanying materials are made available under   //
// the terms of the Apache License 2.0 which accompanies this distribution.   //
// ========================================================================== //

// We should get the same code regardless of which order the passes are run.

// RUN: cudaq-opt --inline --apply-op-specialization --inline --canonicalize %s | FileCheck %s
// RUN: cudaq-opt --apply-op-specialization --inline --canonicalize %s | FileCheck %s

func.func @__nvqpp__mlirgen____nvqppBuilderKernel_202375922897() {
  %0 = quake.alloca  !quake.ref
  %1 = quake.alloca  !quake.ref
  call @__nvqpp__mlirgen____nvqppBuilderKernel_367535629127(%0) : (!quake.ref) -> ()
  quake.h %1 : (!quake.ref) -> ()
  quake.apply @__nvqpp__mlirgen____nvqppBuilderKernel_367535629127[%1] %0 : (!quake.ref, !quake.ref) -> ()
  quake.h %1 : (!quake.ref) -> ()
  %2 = quake.mz %1 name "fido" : (!quake.ref) -> !quake.measure
  return
}
func.func @__nvqpp__mlirgen____nvqppBuilderKernel_367535629127(%arg0: !quake.ref) {
  quake.x %arg0 : (!quake.ref) -> ()
  return
}

// CHECK-LABEL:   func.func @__nvqpp__mlirgen____nvqppBuilderKernel_202375922897() {
// CHECK:           %[[VAL_0:.*]] = quake.alloca !quake.ref
// CHECK:           %[[VAL_1:.*]] = quake.alloca !quake.ref
// CHECK:           quake.x %[[VAL_0]]
// CHECK:           quake.h %[[VAL_1]]
// CHECK:           %[[VAL_2:.*]] = quake.concat %[[VAL_1]] : (!quake.ref) -> !quake.veq<1>
// CHECK:           quake.x [%[[VAL_2]]] %[[VAL_0]] :
// CHECK:           quake.h %[[VAL_1]] :
// CHECK:           quake.mz %[[VAL_1]] name "fido" : (!quake.ref) -> !quake.measure
// CHECK:           return
// CHECK:         }


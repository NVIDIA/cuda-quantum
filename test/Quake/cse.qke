// ========================================================================== //
// Copyright (c) 2022 - 2023 NVIDIA Corporation & Affiliates.                 //
// All rights reserved.                                                       //
//                                                                            //
// This source code and the accompanying materials are made available under   //
// the terms of the Apache License 2.0 which accompanies this distribution.   //
// ========================================================================== //

// RUN: cudaq-opt --canonicalize --cse %s | FileCheck %s

// CHECK-LABEL: func.func @__nvqpp__mlirgen__deuteron_n3_ansatz2
// CHECK: cc.stdvec_data
// CHECK-NOT: cc.stdvec_data
// CHECK: return

module {
  func.func @__nvqpp__mlirgen__deuteron_n3_ansatz2(%arg0: !cc.stdvec<f64>) {
    %c0_i64 = arith.constant 0 : i64
    %c1_i64 = arith.constant 1 : i64
    %c2_i64 = arith.constant 2 : i64
    %cst = arith.constant -1.000000e+00 : f64
    %0 = quake.alloca  !quake.veq<3>
    %1 = quake.extract_ref %0[%c0_i64] : (!quake.veq<3>,i64) -> !quake.ref
    quake.x %1 : (!quake.ref) -> ()
    %2 = cc.stdvec_data %arg0 : (!cc.stdvec<f64>) -> !llvm.ptr<f64>
    %3 = llvm.load %2 : !llvm.ptr<f64>
    %4 = quake.extract_ref %0[%c1_i64] : (!quake.veq<3>,i64) -> !quake.ref
    quake.ry (%3) %4 : (f64, !quake.ref) -> ()
    %5 = cc.stdvec_data %arg0 : (!cc.stdvec<f64>) -> !llvm.ptr<f64>
    %6 = llvm.getelementptr %5[1] : (!llvm.ptr<f64>) -> !llvm.ptr<f64>
    %7 = llvm.load %6 : !llvm.ptr<f64>
    %8 = quake.extract_ref %0[%c2_i64] : (!quake.veq<3>, i64) -> !quake.ref
    quake.ry (%7) %8 : (f64, !quake.ref) -> ()
    quake.x [%8] %1 : (!quake.ref, !quake.ref) -> ()
    quake.x [%1] %4 : (!quake.ref, !quake.ref) -> ()
    %9 = cc.stdvec_data %arg0 : (!cc.stdvec<f64>) -> !llvm.ptr<f64>
    %10 = llvm.load %9 : !llvm.ptr<f64>
    %11 = arith.mulf %10, %cst : f64
    quake.ry (%11) %4 : (f64, !quake.ref) -> ()
    quake.x [%1] %4   : (!quake.ref, !quake.ref) -> ()
    quake.x [%4] %1   : (!quake.ref, !quake.ref) -> ()
    return
  }

// CHECK-LABEL:   func.func @test_2() -> i1 {
// CHECK:           %[[VAL_0:.*]] = quake.alloca !quake.ref
// CHECK:           %[[VAL_1:.*]] = quake.mz %[[VAL_0]] : (!quake.ref) -> !quake.measure
// CHECK:           %[[VAL_2:.*]] = quake.discriminate %[[VAL_1]] :
// CHECK:           return %[[VAL_2]] : i1
// CHECK:         }

  func.func @test_2() -> i1 {
    %1 = quake.alloca !quake.ref
    %2 = quake.concat %1 : (!quake.ref) -> !quake.veq<?>
    %zero = arith.constant 0 : i32
    %3 = quake.extract_ref %2[%zero] : (!quake.veq<?>, i32) -> !quake.ref
    %4 = quake.mz %3 : (!quake.ref) -> !quake.measure
    %5 = quake.discriminate %4 : (!quake.measure) -> i1
    return %5 : i1
  }
}


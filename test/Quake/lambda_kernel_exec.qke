// ========================================================================== //
// Copyright (c) 2022 - 2023 NVIDIA Corporation & Affiliates.                 //
// All rights reserved.                                                       //
//                                                                            //
// This source code and the accompanying materials are made available under   //
// the terms of the Apache License 2.0 which accompanies this distribution.   //
// ========================================================================== //

// RUN: cudaq-opt --kernel-execution %s | FileCheck %s

// CHECK:   llvm.mlir.global external constant @lambda.main.canHaveMultiple.lambdaName("main::$_1\00") {addr_space = 0 : i32}
// CHECK:   llvm.mlir.global external constant @lambda.main.test.lambdaName("main::$_0\00") {addr_space = 0 : i32}
// CHECK: %[[VAL_0:.*]] = llvm.mlir.addressof @lambda.main.test.lambdaName : !llvm.ptr<array<10 x i8>>
// CHECK-NEXT: %[[VAL_1:.*]] = llvm.bitcast %[[VAL_0]] : !llvm.ptr<array<10 x i8>> to !llvm.ptr<i8>
// CHECK-NEXT: llvm.call @cudaqRegisterLambdaName(%[[VAL_1]], %[[VAL_2:.*]]) : (!llvm.ptr<i8>, !llvm.ptr<i8>) -> ()

module attributes {qtx.mangled_name_map = {__nvqpp__mlirgen__lambda.main.canHaveMultiple = "_ZZ4mainENK3$_1clEv", __nvqpp__mlirgen__lambda.main.test = "_ZZ4mainENK3$_0clEv"}} {
  func.func @__nvqpp__mlirgen__lambda.main.test() attributes {"cudaq-entrypoint"} {
    %c2_i32 = arith.constant 2 : i32
    %0 = arith.extsi %c2_i32 : i32 to i64
    %1 = quake.alloca[%0 : i64]  !quake.qvec<?>
    %c0_i32 = arith.constant 0 : i32
    %2 = arith.extsi %c0_i32 : i32 to i64
    %3 = quake.extract_ref %1[%2] : (!quake.qvec<?>,i64) -> !quake.qref
    quake.h %3 : (!quake.qref) -> ()
    %c0_i32_0 = arith.constant 0 : i32
    %4 = arith.extsi %c0_i32_0 : i32 to i64
    %5 = quake.extract_ref %1[%4] : (!quake.qvec<?>, i64) -> !quake.qref
    %6 = quake.mz %5 : (!quake.qref)->i1 {registerName = "b"} 
    %alloca = memref.alloca() : memref<i1>
    memref.store %6, %alloca[] : memref<i1>
    %7 = memref.load %alloca[] : memref<i1>
    cc.if(%7) {
      cc.scope {
        %c1_i32_1 = arith.constant 1 : i32
        %11 = arith.extsi %c1_i32_1 : i32 to i64
        %12 = quake.extract_ref %1[%11] : (!quake.qvec<?>,i64) -> !quake.qref
        quake.x %12 : (!quake.qref) -> ()
      }
    }
    %c1_i32 = arith.constant 1 : i32
    %8 = arith.extsi %c1_i32 : i32 to i64
    %9 = quake.extract_ref %1[%8] : (!quake.qvec<?>,i64) -> !quake.qref
    %10 = quake.mz %9 : (!quake.qref) -> i1
    return
  }

// CHECK: %[[VAL_3:.*]] = llvm.mlir.addressof @lambda.main.canHaveMultiple.lambdaName : !llvm.ptr<array<10 x i8>>
// CHECK-NEXT: %[[VAL_4:.*]] = llvm.bitcast %[[VAL_3]] : !llvm.ptr<array<10 x i8>> to !llvm.ptr<i8>
// CHECK-NEXT: llvm.call @cudaqRegisterLambdaName(%[[VAL_4]], %[[VAL_5:.*]]) : (!llvm.ptr<i8>, !llvm.ptr<i8>) -> ()

  func.func @__nvqpp__mlirgen__lambda.main.canHaveMultiple() attributes {"cudaq-entrypoint"} {
    %c2_i32 = arith.constant 2 : i32
    %0 = arith.extsi %c2_i32 : i32 to i64
    %1 = quake.alloca[%0 : i64] !quake.qvec<?>
    %c0_i32 = arith.constant 0 : i32
    %2 = arith.extsi %c0_i32 : i32 to i64
    %3 = quake.extract_ref %1[%2] : (!quake.qvec<?>,i64) -> !quake.qref
    quake.h %3 : (!quake.qref) -> ()
    %c0_i32_0 = arith.constant 0 : i32
    %4 = arith.extsi %c0_i32_0 : i32 to i64
    %5 = quake.extract_ref %1[%4] : (!quake.qvec<?>,i64) -> !quake.qref
    %6 = quake.mz %5 : (!quake.qref) ->i1 {registerName = "b"} 
    %alloca = memref.alloca() : memref<i1>
    memref.store %6, %alloca[] : memref<i1>
    %7 = memref.load %alloca[] : memref<i1>
    cc.if(%7) {
      cc.scope {
        %c1_i32_1 = arith.constant 1 : i32
        %11 = arith.extsi %c1_i32_1 : i32 to i64
        %12 = quake.extract_ref %1[%11] : (!quake.qvec<?>, i64) -> !quake.qref
        quake.x %12 : (!quake.qref) -> ()
      }
    }
    %c1_i32 = arith.constant 1 : i32
    %8 = arith.extsi %c1_i32 : i32 to i64
    %9 = quake.extract_ref %1[%8] : (!quake.qvec<?>,i64) -> !quake.qref
    %10 = quake.mz %9 : (!quake.qref) -> i1
    return
  }
}

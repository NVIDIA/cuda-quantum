// ========================================================================== //
// Copyright (c) 2022 - 2025 NVIDIA Corporation & Affiliates.                 //
// All rights reserved.                                                       //
//                                                                            //
// This source code and the accompanying materials are made available under   //
// the terms of the Apache License 2.0 which accompanies this distribution.   //
// ========================================================================== //

// RUN: cudaq-opt --apply-op-specialization=constant-prop=1 %s | FileCheck %s

func.func @test(%angle : f32, %arg : !quake.ref) {
  quake.t %arg : (!quake.ref) -> ()
  quake.h %arg : (!quake.ref) -> ()
  %1 = arith.constant 1.0 : f32
  quake.rx (%angle) %arg : (f32, !quake.ref) -> ()
  quake.x %arg : (!quake.ref) -> ()
  return
}
  
func.func @do_apply(%arg : !quake.ref, %brg : !quake.ref) {
  %cst = arith.constant 2.97 : f32
  quake.apply<adj> @test [%brg] %cst, %arg : (!quake.ref, f32, !quake.ref) -> ()
  return
}

// CHECK-LABEL:   func.func private @test.0.adj.ctrl(
// CHECK-SAME:      %[[VAL_0:.*]]: !quake.veq<?>, %[[VAL_1:.*]]: !quake.ref) {
// CHECK:           %[[VAL_2:.*]] = arith.constant -2.97{{[0]*}}e+00 : f32
// CHECK:           quake.x [%[[VAL_0]]] %[[VAL_1]] : (!quake.veq<?>, !quake.ref) -> ()
// CHECK:           quake.rx (%[[VAL_2]]) {{\[}}%[[VAL_0]]] %[[VAL_1]] : (f32, !quake.veq<?>, !quake.ref) -> ()
// CHECK:           quake.h [%[[VAL_0]]] %[[VAL_1]] : (!quake.veq<?>, !quake.ref) -> ()
// CHECK:           quake.t<adj> [%[[VAL_0]]] %[[VAL_1]] : (!quake.veq<?>, !quake.ref) -> ()
// CHECK:           return
// CHECK:         }

// ========================================================================== //
// Copyright (c) 2022 - 2024 NVIDIA Corporation & Affiliates.                 //
// All rights reserved.                                                       //
//                                                                            //
// This source code and the accompanying materials are made available under   //
// the terms of the Apache License 2.0 which accompanies this distribution.   //
// ========================================================================== //

// RUN: cudaq-opt --assign-ids --dep-analysis %s | FileCheck %s

func.func @test1() attributes {"cudaq-kernel"} {
  %cst_0 = arith.constant 2.000000e+00 : f64
  %0 = quake.null_wire
  %1 = quake.rx (%cst_0) %0 : (f64, !quake.wire) -> !quake.wire
  quake.sink %1 : !quake.wire
  return
}

// CHECK-LABEL:   func.func @test1() attributes {"cudaq-kernel"} {
// CHECK-DAG:       %[[VAL_0:.*]] = quake.null_wire
// CHECK-DAG:       %[[VAL_1:.*]] = arith.constant 2.000000e+00 : f64
// CHECK:           %[[VAL_2:.*]] = quake.rx (%[[VAL_1]]) %[[VAL_0]] : (f64, !quake.wire) -> !quake.wire
// CHECK:           quake.sink %[[VAL_2]] : !quake.wire
// CHECK:           return
// CHECK:         }

func.func @test2() attributes {"cudaq-kernel"} {
  %cst = arith.constant 7.000000e+00 : f64
  %cst_0 = arith.constant 2.000000e+00 : f64
  %0 = quake.null_wire
  %measOut, %wires = quake.mz %0 : (!quake.wire) -> (!quake.measure, !quake.wire)
  %1 = quake.discriminate %measOut : (!quake.measure) -> i1
  %2 = arith.uitofp %1 : i1 to f64
  %3 = arith.mulf %2, %cst_0 : f64
  %4 = arith.addf %3, %cst : f64
  %5 = quake.rx (%4) %wires : (f64, !quake.wire) -> !quake.wire
  quake.sink %5 : !quake.wire
  return
}

// CHECK-LABEL:   func.func @test2() attributes {"cudaq-kernel"} {
// CHECK:           %[[VAL_0:.*]] = quake.null_wire
// CHECK:           %[[VAL_1:.*]], %[[VAL_2:.*]] = quake.mz %[[VAL_0]] : (!quake.wire) -> (!quake.measure, !quake.wire)
// CHECK:           %[[VAL_3:.*]] = quake.discriminate %[[VAL_1]] : (!quake.measure) -> i1
// CHECK-DAG:       %[[VAL_4:.*]] = arith.uitofp %[[VAL_3]] : i1 to f64
// CHECK-DAG:       %[[VAL_5:.*]] = arith.constant 2.000000e+00 : f64
// CHECK-NOT:       foo
// CHECK-DAG:       %[[VAL_6:.*]] = arith.mulf %[[VAL_4]], %[[VAL_5]] : f64
// CHECK-DAG:       %[[VAL_7:.*]] = arith.constant 7.000000e+00 : f64
// CHECK:           %[[VAL_8:.*]] = arith.addf %[[VAL_6]], %[[VAL_7]] : f64
// CHECK:           %[[VAL_9:.*]] = quake.rx (%[[VAL_8]]) %[[VAL_2]] : (f64, !quake.wire) -> !quake.wire
// CHECK:           quake.sink %[[VAL_9]] : !quake.wire
// CHECK:           return
// CHECK:         }

func.func @test3() attributes {"cudaq-kernel"} {
  %cst_0 = arith.constant 2.000000e+00 : f64
  %0 = quake.null_wire
  %1 = quake.null_wire
  %2 = quake.rx (%cst_0) %0 : (f64, !quake.wire) -> !quake.wire
  %3 = quake.x %2 : (!quake.wire) -> !quake.wire
  %4 = quake.y %3 : (!quake.wire) -> !quake.wire
  %5 = quake.rx (%cst_0) %1 : (f64, !quake.wire) -> !quake.wire
  %6:2 = quake.x [%4] %5 : (!quake.wire, !quake.wire) -> (!quake.wire, !quake.wire)
  quake.sink %6#0 : !quake.wire
  quake.sink %6#1 : !quake.wire
  return
}

// CHECK-LABEL:   func.func @test3() attributes {"cudaq-kernel"} {
// CHECK-DAG:       %[[VAL_0:.*]] = quake.null_wire
// CHECK-DAG:       %[[VAL_1:.*]] = arith.constant 2.000000e+00 : f64
// CHECK:           %[[VAL_2:.*]] = quake.rx (%[[VAL_1]]) %[[VAL_0]] : (f64, !quake.wire) -> !quake.wire
// CHECK-DAG:       %[[VAL_3:.*]] = quake.x %[[VAL_2]] : (!quake.wire) -> !quake.wire
// CHECK-DAG:       %[[VAL_4:.*]] = quake.null_wire
// CHECK-NOT:       foo
// CHECK-DAG:       %[[VAL_5:.*]] = quake.y %[[VAL_3]] : (!quake.wire) -> !quake.wire
// CHECK-DAG:       %[[VAL_6:.*]] = quake.rx (%[[VAL_1]]) %[[VAL_4]] : (f64, !quake.wire) -> !quake.wire
// CHECK:           %[[VAL_7:.*]]:2 = quake.x [%[[VAL_5]]] %[[VAL_6]] : (!quake.wire, !quake.wire) -> (!quake.wire, !quake.wire)
// CHECK-DAG:       quake.sink %[[VAL_7]]#0 : !quake.wire
// CHECK-DAG:       quake.sink %[[VAL_7]]#1 : !quake.wire
// CHECK:           return
// CHECK:         }

func.func @test4() attributes {"cudaq-kernel"} {
  %cst_0 = arith.constant 2.000000e+00 : f64
  return
}

// CHECK-LABEL: func.func @test4() attributes {"cudaq-kernel"} {
// CHECK:         return
// CHECK:       }

func.func @test5() attributes {"cudaq-kernel"} {
  %cst_0 = arith.constant 2.000000e+00 : f64
  %0 = quake.null_wire
  %1 = quake.null_wire
  %2 = quake.rx (%cst_0) %0 : (f64, !quake.wire) -> !quake.wire
  %3 = quake.x %2 : (!quake.wire) -> !quake.wire
  %4 = quake.y %3 : (!quake.wire) -> !quake.wire
  %5 = quake.rx (%cst_0) %1 : (f64, !quake.wire) -> !quake.wire
  quake.sink %4 : !quake.wire
  quake.sink %5 : !quake.wire
  return
}

// CHECK-LABEL:   func.func @test5() attributes {"cudaq-kernel"} {
// CHECK-DAG:       %[[VAL_0:.*]] = quake.null_wire
// CHECK-DAG:       %[[VAL_2:.*]] = arith.constant 2.000000e+00 : f64
// CHECK-DAG:       %[[VAL_3:.*]] = quake.rx (%[[VAL_2]]) %[[VAL_0]] : (f64, !quake.wire) -> !quake.wire
// CHECK-DAG:       %[[VAL_1:.*]] = quake.null_wire
// CHECK-DAG:       %[[VAL_4:.*]] = quake.rx (%[[VAL_2]]) %[[VAL_1]] : (f64, !quake.wire) -> !quake.wire
// CHECK:           %[[VAL_5:.*]] = quake.x %[[VAL_3]] : (!quake.wire) -> !quake.wire
// CHECK:           %[[VAL_6:.*]] = quake.y %[[VAL_5]] : (!quake.wire) -> !quake.wire
// CHECK-DAG:       quake.sink %[[VAL_6]] : !quake.wire
// CHECK-DAG:       quake.sink %[[VAL_4]] : !quake.wire
// CHECK:           return
// CHECK:         }

func.func @test6() attributes {"cudaq-kernel"} {
  %0 = quake.null_wire
  %1 = quake.null_wire
  %2 = quake.h %1 : (!quake.wire) -> !quake.wire
  %measOut, %wires = quake.mz %0 : (!quake.wire) -> (!quake.measure, !quake.wire)
  %3 = quake.discriminate %measOut : (!quake.measure) -> i1
  %4 = arith.uitofp %3 : i1 to f64
  %5 = quake.rx (%4) %2 : (f64, !quake.wire) -> !quake.wire
  quake.sink %wires : !quake.wire
  quake.sink %5 : !quake.wire
  return
}

// CHECK-LABEL:   func.func @test6() attributes {"cudaq-kernel"} {
// CHECK-DAG:       %[[VAL_0:.*]] = quake.null_wire
// CHECK-DAG:       %[[VAL_1:.*]] = quake.null_wire
// CHECK-NOT:       foo
// CHECK-DAG:       %[[VAL_2:.*]], %[[VAL_3:.*]] = quake.mz %[[VAL_0]] : (!quake.wire) -> (!quake.measure, !quake.wire)
// CHECK-DAG:       %[[VAL_4:.*]] = quake.h %[[VAL_1]] : (!quake.wire) -> !quake.wire
// CHECK-DAG:       %[[VAL_5:.*]] = quake.discriminate %[[VAL_2]] : (!quake.measure) -> i1
// CHECK-DAG:       %[[VAL_6:.*]] = arith.uitofp %[[VAL_5]] : i1 to f64
// CHECK:           %[[VAL_7:.*]] = quake.rx (%[[VAL_6]]) %[[VAL_4]] : (f64, !quake.wire) -> !quake.wire
// CHECK-DAG:       quake.sink %[[VAL_7]] : !quake.wire
// CHECK-DAG:       quake.sink %[[VAL_3]] : !quake.wire
// CHECK:           return
// CHECK:         }

func.func @test7() attributes {"cudaq-kernel"} {
  %0 = quake.null_wire
  %1 = quake.null_wire
  %2 = quake.null_wire
  %measOut, %wires = quake.mz %0 : (!quake.wire) -> (!quake.measure, !quake.wire)
  %3 = quake.discriminate %measOut : (!quake.measure) -> i1
  %4 = arith.uitofp %3 : i1 to f64
  %5 = quake.rx (%4) %1 : (f64, !quake.wire) -> !quake.wire
  %6 = quake.rx (%4) %2 : (f64, !quake.wire) -> !quake.wire
  quake.sink %wires : !quake.wire
  quake.sink %5 : !quake.wire
  quake.sink %6 : !quake.wire
  return
}

// CHECK-LABEL:   func.func @test7() attributes {"cudaq-kernel"} {
// CHECK-DAG:       %[[VAL_0:.*]] = quake.null_wire
// CHECK-DAG:       %[[VAL_1:.*]], %[[VAL_2:.*]] = quake.mz %[[VAL_0]] : (!quake.wire) -> (!quake.measure, !quake.wire)
// CHECK:           %[[VAL_4:.*]] = quake.discriminate %[[VAL_1]] : (!quake.measure) -> i1
// CHECK:           %[[VAL_5:.*]] = arith.uitofp %[[VAL_4]] : i1 to f64
// CHECK:           %[[VAL_3:.*]] = quake.null_wire
// CHECK-DAG:       %[[VAL_6:.*]] = quake.rx (%[[VAL_5]]) %[[VAL_2]] : (f64, !quake.wire) -> !quake.wire
// CHECK-DAG:       %[[VAL_7:.*]] = quake.rx (%[[VAL_5]]) %[[VAL_3]] : (f64, !quake.wire) -> !quake.wire
// CHECK-NOT:       foo
// CHECK-DAG:       quake.sink %[[VAL_6]] : !quake.wire
// CHECK-DAG:       quake.sink %[[VAL_7]] : !quake.wire
// CHECK:           return
// CHECK:         }

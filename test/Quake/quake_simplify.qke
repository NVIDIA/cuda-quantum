// ========================================================================== //
// Copyright (c) 2022 - 2025 NVIDIA Corporation & Affiliates.                 //
// All rights reserved.                                                       //
//                                                                            //
// This source code and the accompanying materials are made available under   //
// the terms of the Apache License 2.0 which accompanies this distribution.   //
// ========================================================================== //

// RUN: cudaq-opt --quake-simplify %s | FileCheck %s

func.func @simp1() -> (i1, i1) {
  %0 = quake.null_wire
  %1 = quake.null_wire
  %2:2 = quake.x [%0] %1 : (!quake.wire, !quake.wire) -> (!quake.wire, !quake.wire)
  %3:2 = quake.x [%2#0] %2#1 : (!quake.wire, !quake.wire) -> (!quake.wire, !quake.wire)
  %4:2 = quake.mz %3#0 : (!quake.wire) -> (!quake.measure, !quake.wire)
  %5:2 = quake.mz %3#1 : (!quake.wire) -> (!quake.measure, !quake.wire)
  %6 = quake.discriminate %4#0 : (!quake.measure) -> i1
  %7 = quake.discriminate %5#0 : (!quake.measure) -> i1
  quake.sink %4#1 : !quake.wire
  quake.sink %5#1 : !quake.wire
  func.return %6, %7 : i1, i1
}

// CHECK-LABEL:   func.func @simp1() -> (i1, i1) {
// CHECK:           %[[VAL_0:.*]] = quake.null_wire
// CHECK:           %[[VAL_1:.*]] = quake.null_wire
// CHECK:           %[[VAL_2:.*]], %[[VAL_3:.*]] = quake.mz %[[VAL_0]] : (!quake.wire) -> (!quake.measure, !quake.wire)
// CHECK:           %[[VAL_4:.*]], %[[VAL_5:.*]] = quake.mz %[[VAL_1]] : (!quake.wire) -> (!quake.measure, !quake.wire)
// CHECK:           %[[VAL_6:.*]] = quake.discriminate %[[VAL_2]] : (!quake.measure) -> i1
// CHECK:           %[[VAL_7:.*]] = quake.discriminate %[[VAL_4]] : (!quake.measure) -> i1
// CHECK:           quake.sink %[[VAL_3]] : !quake.wire
// CHECK:           quake.sink %[[VAL_5]] : !quake.wire
// CHECK:           return %[[VAL_6]], %[[VAL_7]] : i1, i1
// CHECK:         }

func.func @simp4() -> (i1, i1) {
  %0 = quake.null_wire
  %1 = quake.null_wire
  %2:2 = quake.y [%0] %1 : (!quake.wire, !quake.wire) -> (!quake.wire, !quake.wire)
  %3:2 = quake.y [%2#0] %2#1 : (!quake.wire, !quake.wire) -> (!quake.wire, !quake.wire)
  %5:2 = quake.y [%3#0] %3#1 : (!quake.wire, !quake.wire) -> (!quake.wire, !quake.wire)
  %4:2 = quake.mz %5#0 : (!quake.wire) -> (!quake.measure, !quake.wire)
  %8:2 = quake.mz %5#1 : (!quake.wire) -> (!quake.measure, !quake.wire)
  %6 = quake.discriminate %4#0 : (!quake.measure) -> i1
  %7 = quake.discriminate %8#0 : (!quake.measure) -> i1
  quake.sink %4#1 : !quake.wire
  quake.sink %8#1 : !quake.wire
  func.return %6, %7 : i1, i1
}

// CHECK-LABEL:   func.func @simp4() -> (i1, i1) {
// CHECK:           %[[VAL_0:.*]] = quake.null_wire
// CHECK:           %[[VAL_1:.*]] = quake.null_wire
// CHECK:           %[[VAL_2:.*]]:2 = quake.y {{\[}}%[[VAL_0]]] %[[VAL_1]] : (!quake.wire, !quake.wire) -> (!quake.wire, !quake.wire)
// CHECK:           %[[VAL_3:.*]], %[[VAL_4:.*]] = quake.mz %[[VAL_2]]#0 : (!quake.wire) -> (!quake.measure, !quake.wire)
// CHECK:           %[[VAL_5:.*]], %[[VAL_6:.*]] = quake.mz %[[VAL_2]]#1 : (!quake.wire) -> (!quake.measure, !quake.wire)
// CHECK:           %[[VAL_7:.*]] = quake.discriminate %[[VAL_3]] : (!quake.measure) -> i1
// CHECK:           %[[VAL_8:.*]] = quake.discriminate %[[VAL_5]] : (!quake.measure) -> i1
// CHECK:           quake.sink %[[VAL_4]] : !quake.wire
// CHECK:           quake.sink %[[VAL_6]] : !quake.wire
// CHECK:           return %[[VAL_7]], %[[VAL_8]] : i1, i1
// CHECK:         }

func.func @simp2() -> (i1, i1) {
  %0 = quake.null_wire
  %1 = quake.null_wire
  %p0 = arith.constant 1.0 : f64
  %p1 = arith.constant 10.0 : f64
  %2:2 = quake.rx (%p0) [%0] %1 : (f64, !quake.wire, !quake.wire) -> (!quake.wire, !quake.wire)
  %3:2 = quake.rx (%p1) [%2#0] %2#1 : (f64, !quake.wire, !quake.wire) -> (!quake.wire, !quake.wire)
  %4:2 = quake.mz %3#0 : (!quake.wire) -> (!quake.measure, !quake.wire)
  %5:2 = quake.mz %3#1 : (!quake.wire) -> (!quake.measure, !quake.wire)
  %6 = quake.discriminate %4#0 : (!quake.measure) -> i1
  %7 = quake.discriminate %5#0 : (!quake.measure) -> i1
  quake.sink %4#1 : !quake.wire
  quake.sink %5#1 : !quake.wire
  func.return %6, %7 : i1, i1
}

// CHECK-LABEL:   func.func @simp2() -> (i1, i1) {
// CHECK:           %[[VAL_0:.*]] = arith.constant 1.100000e+01 : f64
// CHECK:           %[[VAL_1:.*]] = quake.null_wire
// CHECK:           %[[VAL_2:.*]] = quake.null_wire
// CHECK:           %[[VAL_3:.*]]:2 = quake.rx (%[[VAL_0]]) {{\[}}%[[VAL_1]]] %[[VAL_2]] : (f64, !quake.wire, !quake.wire) -> (!quake.wire, !quake.wire)
// CHECK:           %[[VAL_4:.*]], %[[VAL_5:.*]] = quake.mz %[[VAL_3]]#0 : (!quake.wire) -> (!quake.measure, !quake.wire)
// CHECK:           %[[VAL_6:.*]], %[[VAL_7:.*]] = quake.mz %[[VAL_3]]#1 : (!quake.wire) -> (!quake.measure, !quake.wire)
// CHECK:           %[[VAL_8:.*]] = quake.discriminate %[[VAL_4]] : (!quake.measure) -> i1
// CHECK:           %[[VAL_9:.*]] = quake.discriminate %[[VAL_6]] : (!quake.measure) -> i1
// CHECK:           quake.sink %[[VAL_5]] : !quake.wire
// CHECK:           quake.sink %[[VAL_7]] : !quake.wire
// CHECK:           return %[[VAL_8]], %[[VAL_9]] : i1, i1
// CHECK:         }

func.func @simp3() -> (i1, i1) {
  %0 = quake.null_wire
  %1 = quake.null_wire
  %p0 = arith.constant 1.0 : f64
  %p1 = arith.constant -10.0 : f64
  %p2 = arith.constant 2.0 : f64
  %p3 = arith.constant 20.0 : f64
  %p4 = arith.constant 3.0 : f64
  %p5 = arith.constant 30.0 : f64
  %2:2 = quake.u3 (%p0,%p2,%p4) [%0] %1 : (f64, f64, f64, !quake.wire, !quake.wire) -> (!quake.wire, !quake.wire)
  %3:2 = quake.u3<adj> (%p1,%p3,%p5) [%2#0] %2#1 : (f64, f64, f64, !quake.wire, !quake.wire) -> (!quake.wire, !quake.wire)
  %4:2 = quake.mz %3#0 : (!quake.wire) -> (!quake.measure, !quake.wire)
  %5:2 = quake.mz %3#1 : (!quake.wire) -> (!quake.measure, !quake.wire)
  %6 = quake.discriminate %4#0 : (!quake.measure) -> i1
  %7 = quake.discriminate %5#0 : (!quake.measure) -> i1
  quake.sink %4#1 : !quake.wire
  quake.sink %5#1 : !quake.wire
  func.return %6, %7 : i1, i1
}

// CHECK-LABEL:   func.func @simp3() -> (i1, i1) {
// CHECK:           %[[VAL_0:.*]] = arith.constant 1.100000e+01 : f64
// CHECK:           %[[VAL_1:.*]] = arith.constant -1.800000e+01 : f64
// CHECK:           %[[VAL_2:.*]] = arith.constant -2.700000e+01 : f64
// CHECK:           %[[VAL_3:.*]] = quake.null_wire
// CHECK:           %[[VAL_4:.*]] = quake.null_wire
// CHECK:           %[[VAL_5:.*]]:2 = quake.u3 (%[[VAL_0]], %[[VAL_1]], %[[VAL_2]]) {{\[}}%[[VAL_3]]] %[[VAL_4]] : (f64, f64, f64, !quake.wire, !quake.wire) -> (!quake.wire, !quake.wire)
// CHECK:           %[[VAL_6:.*]], %[[VAL_7:.*]] = quake.mz %[[VAL_5]]#0 : (!quake.wire) -> (!quake.measure, !quake.wire)
// CHECK:           %[[VAL_8:.*]], %[[VAL_9:.*]] = quake.mz %[[VAL_5]]#1 : (!quake.wire) -> (!quake.measure, !quake.wire)
// CHECK:           %[[VAL_10:.*]] = quake.discriminate %[[VAL_6]] : (!quake.measure) -> i1
// CHECK:           %[[VAL_11:.*]] = quake.discriminate %[[VAL_8]] : (!quake.measure) -> i1
// CHECK:           quake.sink %[[VAL_7]] : !quake.wire
// CHECK:           quake.sink %[[VAL_9]] : !quake.wire
// CHECK:           return %[[VAL_10]], %[[VAL_11]] : i1, i1
// CHECK:         }


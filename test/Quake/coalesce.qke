// ========================================================================== //
// Copyright (c) 2025 NVIDIA Corporation & Affiliates.                        //
// All rights reserved.                                                       //
//                                                                            //
// This source code and the accompanying materials are made available under   //
// the terms of the Apache License 2.0 which accompanies this distribution.   //
// ========================================================================== //

// RUN: cudaq-opt -variable-coalesce %s | FileCheck %s

func.func private @test(!cc.ptr<i32>, !cc.ptr<f64>)

func.func @f1() {
  %0 = cc.alloca i32
  %1 = cc.alloca f64
  %c0 = arith.constant 1 : i32
  cc.store %c0, %0 : !cc.ptr<i32>
  %c1 = arith.constant 3.0 : f64
  cc.store %c1, %1 : !cc.ptr<f64>
  call @test(%0, %1) : (!cc.ptr<i32>, !cc.ptr<f64>) -> ()
  cc.scope {
    %2 = cc.alloca i32 {name = "a"}
    %3 = cc.alloca f64 {name = "b"}
    %c2 = arith.constant 2 : i32
    cc.store %c2, %2 : !cc.ptr<i32>
    %c3 = arith.constant 4.0 : f64
    cc.store %c3, %3 : !cc.ptr<f64>
    func.call @test(%2, %3) : (!cc.ptr<i32>, !cc.ptr<f64>) -> ()
    cc.scope {
      %4 = cc.alloca i32 {name = "c"}
      %5 = cc.alloca f64 {name = "d"}
      %c4 = arith.constant 4 : i32
      cc.store %c4, %4 : !cc.ptr<i32>
      %c5 = arith.constant 5.0 : f64
      cc.store %c5, %5 : !cc.ptr<f64>
      func.call @test(%4, %5) : (!cc.ptr<i32>, !cc.ptr<f64>) -> ()
    }
    cc.scope {
      %6 = cc.alloca i32 {name = "e"}
      %7 = cc.alloca f64 {name = "f"}
      %c6 = arith.constant 6 : i32
      cc.store %c6, %6 : !cc.ptr<i32>
      %c7 = arith.constant 6.0 : f64
      cc.store %c7, %7 : !cc.ptr<f64>
      func.call @test(%6, %7) : (!cc.ptr<i32>, !cc.ptr<f64>) -> ()
    }
    cc.scope {
      %8 = cc.alloca i32 {name = "g"}
      %9 = cc.alloca f64 {name = "h"}
      %c8 = arith.constant 8 : i32
      cc.store %c8, %8 : !cc.ptr<i32>
      %c9 = arith.constant 7.0 : f64
      cc.store %c9, %9 : !cc.ptr<f64>
      func.call @test(%8, %9) : (!cc.ptr<i32>, !cc.ptr<f64>) -> ()
    }
  }
  return
}

// CHECK-LABEL:   func.func @f1() {
// CHECK-DAG:       %[[VAL_0:.*]] = arith.constant 7.000000e+00 : f64
// CHECK-DAG:       %[[VAL_1:.*]] = arith.constant 8 : i32
// CHECK-DAG:       %[[VAL_2:.*]] = arith.constant 6.000000e+00 : f64
// CHECK-DAG:       %[[VAL_3:.*]] = arith.constant 6 : i32
// CHECK-DAG:       %[[VAL_4:.*]] = arith.constant 5.000000e+00 : f64
// CHECK-DAG:       %[[VAL_5:.*]] = arith.constant 4 : i32
// CHECK-DAG:       %[[VAL_6:.*]] = arith.constant 4.000000e+00 : f64
// CHECK-DAG:       %[[VAL_7:.*]] = arith.constant 2 : i32
// CHECK-DAG:       %[[VAL_8:.*]] = arith.constant 3.000000e+00 : f64
// CHECK-DAG:       %[[VAL_9:.*]] = arith.constant 1 : i32
// CHECK-DAG:       %[[VAL_10:.*]] = cc.alloca f64
// CHECK-DAG:       %[[VAL_11:.*]] = cc.alloca i32
// CHECK-DAG:       %[[VAL_12:.*]] = cc.alloca f64
// CHECK-DAG:       %[[VAL_13:.*]] = cc.alloca i32
// CHECK-DAG:       %[[VAL_14:.*]] = cc.alloca i32
// CHECK-DAG:       %[[VAL_15:.*]] = cc.alloca f64
// CHECK:           cc.store %[[VAL_9]], %[[VAL_14]] : !cc.ptr<i32>
// CHECK:           cc.store %[[VAL_8]], %[[VAL_15]] : !cc.ptr<f64>
// CHECK:           call @test(%[[VAL_14]], %[[VAL_15]]) : (!cc.ptr<i32>, !cc.ptr<f64>) -> ()
// CHECK:           cc.scope {
// CHECK:             cc.store %[[VAL_7]], %[[VAL_13]] : !cc.ptr<i32>
// CHECK:             cc.store %[[VAL_6]], %[[VAL_12]] : !cc.ptr<f64>
// CHECK:             func.call @test(%[[VAL_13]], %[[VAL_12]]) : (!cc.ptr<i32>, !cc.ptr<f64>) -> ()
// CHECK:             cc.scope {
// CHECK:               cc.store %[[VAL_5]], %[[VAL_11]] : !cc.ptr<i32>
// CHECK:               cc.store %[[VAL_4]], %[[VAL_10]] : !cc.ptr<f64>
// CHECK:               func.call @test(%[[VAL_11]], %[[VAL_10]]) : (!cc.ptr<i32>, !cc.ptr<f64>) -> ()
// CHECK:             }
// CHECK:             cc.scope {
// CHECK:               cc.store %[[VAL_3]], %[[VAL_11]] : !cc.ptr<i32>
// CHECK:               cc.store %[[VAL_2]], %[[VAL_10]] : !cc.ptr<f64>
// CHECK:               func.call @test(%[[VAL_11]], %[[VAL_10]]) : (!cc.ptr<i32>, !cc.ptr<f64>) -> ()
// CHECK:             }
// CHECK:             cc.scope {
// CHECK:               cc.store %[[VAL_1]], %[[VAL_11]] : !cc.ptr<i32>
// CHECK:               cc.store %[[VAL_0]], %[[VAL_10]] : !cc.ptr<f64>
// CHECK:               func.call @test(%[[VAL_11]], %[[VAL_10]]) : (!cc.ptr<i32>, !cc.ptr<f64>) -> ()
// CHECK:             }
// CHECK:           }
// CHECK:           return
// CHECK:         }

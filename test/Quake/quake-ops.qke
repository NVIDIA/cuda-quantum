// ========================================================================== //
// Copyright (c) 2022 - 2023 NVIDIA Corporation & Affiliates.                 //
// All rights reserved.                                                       //
//                                                                            //
// This source code and the accompanying materials are made available under   //
// the terms of the Apache License 2.0 which accompanies this distribution.   //
// ========================================================================== //

// Roundtrip test.

// RUN: cudaq-opt %s | cudaq-opt | FileCheck %s

// CHECK-LABEL:   func.func @quake_op1(
// CHECK-SAME:        %[[VAL_0:.*]]: !llvm.ptr<f64>, %[[VAL_1:.*]]: i64) -> i64 {
// CHECK:           %[[VAL_2:.*]] = cc.stdvec_init %[[VAL_0]], %[[VAL_1]] : (!llvm.ptr<f64>, i64) -> !cc.stdvec<f64>
// CHECK:           %[[VAL_3:.*]] = cc.stdvec_data %[[VAL_2]] : (!cc.stdvec<f64>) -> !llvm.ptr<f64>
// CHECK:           %[[VAL_4:.*]] = cc.stdvec_size %[[VAL_2]] : (!cc.stdvec<f64>) -> i64
// CHECK:           return %[[VAL_4]] : i64
// CHECK:         }


func.func @quake_op1(%a : !llvm.ptr<f64>, %b : i64) -> i64 {
  %svec = cc.stdvec_init %a, %b : (!llvm.ptr<f64>, i64) -> !cc.stdvec<f64>
  %dp = cc.stdvec_data %svec : (!cc.stdvec<f64>) -> !llvm.ptr<f64>
  %len = cc.stdvec_size %svec : (!cc.stdvec<f64>) -> i64
  return %len : i64
}

// CHECK-LABEL:   func.func @quake_op2() -> !llvm.ptr<i8> {
// CHECK:           %[[VAL_0:.*]] = constant @quake_op1 : (!llvm.ptr<f64>, i64) -> i64
// CHECK:           %[[VAL_1:.*]] = cc.func_ptr %[[VAL_0]] : ((!llvm.ptr<f64>, i64) -> i64) -> !llvm.ptr<i8>
// CHECK:           return %[[VAL_1]] : !llvm.ptr<i8>
// CHECK:         }

func.func @quake_op2() -> !llvm.ptr<i8> {
  %cp = constant @quake_op1 : (!llvm.ptr<f64>, i64) -> i64
  %ptr = cc.func_ptr %cp : ((!llvm.ptr<f64>, i64) -> i64) -> !llvm.ptr<i8>
  return %ptr : !llvm.ptr<i8>
}

// CHECK-LABEL:   func.func @quake_op3(
// CHECK-SAME:        %[[VAL_0:.*]]: !quake.qvec<?>,
// CHECK-SAME:        %[[VAL_1:.*]]: i32, %[[VAL_2:.*]]: i32) {
// CHECK:           %[[VAL_3:.*]] = quake.subvec %[[VAL_0]], %[[VAL_1]], %[[VAL_2]] : (!quake.qvec<?>, i32, i32) -> !quake.qvec<?>
// CHECK:           return
// CHECK:         }

func.func @quake_op3(%vec : !quake.qvec<?>, %a : i32, %b : i32) {
  %sub = quake.subvec %vec, %a, %b : (!quake.qvec<?>, i32, i32) -> !quake.qvec<?>
  return
}

// CHECK-LABEL:   func.func @cc_op4() {
// CHECK:           cc.scope {
// CHECK:             %[[VAL_0:.*]] = cc.alloca i32 : () -> !cc.ptr<i32>
// CHECK:           }
// CHECK:           return
// CHECK:         }

func.func @cc_op4() {
  cc.scope {
    %x = cc.alloca i32 : () -> !cc.ptr<i32>
  }
  return
}

// See loop.qke for cc.loop, cc.if, cc.condition, cc.continue, cc.break, ...

func.func private @do_nothing() -> ()

// CHECK-LABEL:   func.func @cc_op5() -> !cc.lambda<() -> i32> {
// CHECK:           %[[VAL_0:.*]] = cc.create_lambda {
// CHECK:             func.call @do_nothing() : () -> ()
// CHECK:             %[[VAL_1:.*]] = arith.constant 1 : i32
// CHECK:             cc.return %[[VAL_1]] : i32
// CHECK:           } : !cc.lambda<() -> i32>
// CHECK:           %[[VAL_2:.*]] = cc.alloca !llvm.struct<(i32, i32)> : () -> !cc.ptr<i8>
// CHECK:           %[[VAL_3:.*]] = cc.instantiate_callable @do_nothing(%[[VAL_2]]) : (!cc.ptr<i8>) -> !cc.lambda<() -> ()>
// CHECK:           %[[VAL_4:.*]] = cc.callable_func %[[VAL_3]] : (!cc.lambda<() -> ()>) -> (() -> ())
// CHECK:           %[[VAL_5:.*]] = cc.callable_closure %[[VAL_3]] : (!cc.lambda<() -> ()>) -> !cc.ptr<i8>
// CHECK:           %[[VAL_6:.*]] = cc.call_callable %[[VAL_0]] : (!cc.lambda<() -> i32>) -> i32
// CHECK:           cc.call_callable %[[VAL_3]] : (!cc.lambda<() -> ()>) -> ()
// CHECK:           return %[[VAL_0]] : !cc.lambda<() -> i32>
// CHECK:         }

func.func @cc_op5() -> !cc.lambda<() -> i32> {
  %1 = cc.create_lambda {
    func.call @do_nothing() : () -> ()
    %1 = arith.constant 1 : i32
    cc.return %1 : i32
  } : !cc.lambda<() -> i32>
  %closure = cc.alloca !llvm.struct<(i32, i32)> : () -> !cc.ptr<i8>
  %2 = cc.instantiate_callable @do_nothing(%closure) : (!cc.ptr<i8>) -> !cc.lambda<()->()>
  %3 = cc.callable_func %2 : (!cc.lambda<() -> ()>) -> (() -> ())
  %4 = cc.callable_closure %2 : (!cc.lambda<() -> ()>) -> !cc.ptr<i8>
  %5 = cc.call_callable %1 : (!cc.lambda<() -> (i32)>) -> i32
  cc.call_callable %2 : (!cc.lambda<() -> ()>) -> ()
  return %1 : !cc.lambda<() -> i32>
}

// CHECK-LABEL:   func.func @cc_op6_return_test() -> i32 {
// CHECK:           %[[VAL_0:.*]] = cc.alloca i32 : () -> !cc.ptr<i32>
// CHECK:           %[[VAL_1:.*]] = cc.undef i32
// CHECK:           cc.scope {
// CHECK:             %[[VAL_2:.*]] = cc.alloca i1 : () -> !cc.ptr<i1>
// CHECK:             %[[VAL_3:.*]] = cc.undef i1
// CHECK:             cc.if(%[[VAL_3]]) {
// CHECK:               cc.scope {
// CHECK:                 %[[VAL_4:.*]] = cc.alloca i32 : () -> !cc.ptr<i32>
// CHECK:                 %[[VAL_5:.*]] = cc.alloca i1 : () -> !cc.ptr<i1>
// CHECK:                 cc.loop while {
// CHECK:                   %[[VAL_6:.*]] = cc.undef i1
// CHECK:                   cc.condition %[[VAL_6]]
// CHECK:                 } do {
// CHECK:                   cc.scope {
// CHECK:                     %[[VAL_7:.*]] = cc.alloca i1 : () -> !cc.ptr<i1>
// CHECK:                     %[[VAL_8:.*]] = cc.undef i1
// CHECK:                     cc.if(%[[VAL_8]]) {
// CHECK:                       %[[VAL_9:.*]] = cc.undef i32
// CHECK:                       cc.unwind_return %[[VAL_9]] : i32 {insn = 1 : i64}
// CHECK:                     }
// CHECK:                   }
// CHECK:                   %[[VAL_10:.*]] = cc.undef i32
// CHECK:                   cc.unwind_return %[[VAL_10]] : i32 {insn = 2 : i64}
// CHECK:                   cc.continue
// CHECK:                 } step {
// CHECK:                   %[[VAL_11:.*]] = cc.undef i32
// CHECK:                 }
// CHECK:               }
// CHECK:             }
// CHECK:           }
// CHECK:           return %[[VAL_1]] : i32
// CHECK:         }

func.func @cc_op6_return_test() -> i32 {
  %1 = cc.alloca i32 : () -> !cc.ptr<i32>
  %result = cc.undef i32
  cc.scope {
    %2 = cc.alloca i1 : () -> !cc.ptr<i1>
    %b1 = cc.undef i1
    cc.if (%b1) {
      cc.scope {
        %3 = cc.alloca i32 : () -> !cc.ptr<i32>
        %4 = cc.alloca i1 : () -> !cc.ptr<i1>
        cc.loop while {
	  %b2 = cc.undef i1
	  cc.condition %b2
	} do {
          cc.scope {
            %5 = cc.alloca i1 : () -> !cc.ptr<i1>
	    %b3 = cc.undef i1
            cc.if (%b3) {
	      %val = cc.undef i32
              cc.unwind_return %val : i32 {insn = 1}
	      cc.continue
            }
          }
	  %val2 = cc.undef i32
	  cc.unwind_return %val2 : i32 {insn = 2}
	  cc.continue
        } step {
	  %incr = cc.undef i32
	}
      }
    }
  }
  return %result : i32
}

// CHECK-LABEL:   func.func @cc_op7_break_test() -> f64 {
// CHECK:           cc.scope {
// CHECK:             cc.if(%{{.*}}) {
// CHECK:               cc.scope {
// CHECK:                 %[[VAL_7:.*]] = cc.loop while ((%[[VAL_8:.*]] = %{{.*}}) -> (i16)) {
// CHECK:                   cc.condition %{{.*}}(%[[VAL_8]] : i16)
// CHECK:                 } do {
// CHECK:                 ^bb0(%[[VAL_10:.*]]: i16):
// CHECK:                   cc.scope {
// CHECK:                     cc.if(%{{.*}}) {
// CHECK:                       %[[VAL_13:.*]] = cc.undef f64
// CHECK:                       cc.unwind_break %[[VAL_10]] : i16
// CHECK:                     }
// CHECK:                   }
// CHECK:                   cc.continue %[[VAL_10]] : i16
// CHECK:                 } step {
// CHECK:                 ^bb0(%[[VAL_15:.*]]: i16):
// CHECK:                   cc.continue %[[VAL_15]] : i16
// CHECK:                 }
// CHECK:               }
// CHECK:             }
// CHECK:           }
// CHECK:           return %[[VAL_1]] : f64
// CHECK:         }

func.func @cc_op7_break_test() -> f64 {
  %1 = cc.alloca i32 : () -> !cc.ptr<i32>
  %result = cc.undef f64
  cc.scope {
    %2 = cc.alloca i1 : () -> !cc.ptr<i1>
    %b1 = cc.undef i1
    cc.if (%b1) {
      cc.scope {
        %3 = cc.alloca i32 : () -> !cc.ptr<i32>
        %4 = cc.alloca i1 : () -> !cc.ptr<i1>
	%w = cc.undef i16
        cc.loop while ((%arg0 = %w) -> i16) {
	  %b2 = cc.undef i1
	  cc.condition %b2 (%arg0 : i16)
	} do {
         ^bb1(%arg1 : i16):
          cc.scope {
            %5 = cc.alloca i1 : () -> !cc.ptr<i1>
	    %b3 = cc.undef i1
            cc.if (%b3) {
	      %val = cc.undef f64
              cc.unwind_break %arg1 : i16
	      cc.continue
            }
	    cc.continue
          }
	  %val2 = cc.undef i32
	  cc.continue %arg1 : i16
        } step {
	 ^bb2(%arg2 : i16):
	  %incr = cc.undef i32
	  cc.continue %arg2 : i16
	}
      }
    }
  }
  return %result : f64
}

// CHECK-LABEL:   func.func @cc_op8_continue_test() -> f64 {
// CHECK:           cc.scope {
// CHECK:             cc.if(%{{.*}}) {
// CHECK:               cc.scope {
// CHECK:                 %[[VAL_7:.*]] = cc.loop while ((%[[VAL_8:.*]] = %{{.*}}) -> (i16)) {
// CHECK:                   cc.condition %{{.*}}(%[[VAL_8]] : i16)
// CHECK:                 } do {
// CHECK:                 ^bb0(%[[VAL_10:.*]]: i16):
// CHECK:                   cc.scope {
// CHECK:                     cc.if(%{{.*}}) {
// CHECK:                       %[[VAL_13:.*]] = cc.undef f64
// CHECK:                       cc.unwind_continue %[[VAL_10]] : i16
// CHECK:                     }
// CHECK:                   }
// CHECK:                   cc.continue %[[VAL_10]] : i16
// CHECK:                 } step {
// CHECK:                 ^bb0(%[[VAL_15:.*]]: i16):
// CHECK:                   cc.continue %[[VAL_15]] : i16
// CHECK:                 }
// CHECK:               }
// CHECK:             }
// CHECK:           }
// CHECK:           return %[[VAL_1]] : f64
// CHECK:         }

func.func @cc_op8_continue_test() -> f64 {
  %1 = cc.alloca i32 : () -> !cc.ptr<i32>
  %result = cc.undef f64
  cc.scope {
    %2 = cc.alloca i1 : () -> !cc.ptr<i1>
    %b1 = cc.undef i1
    cc.if (%b1) {
      cc.scope {
        %3 = cc.alloca i32 : () -> !cc.ptr<i32>
        %4 = cc.alloca i1 : () -> !cc.ptr<i1>
	%w = cc.undef i16
        cc.loop while ((%arg0 = %w) -> i16) {
	  %b2 = cc.undef i1
	  cc.condition %b2 (%arg0 : i16)
	} do {
         ^bb1(%arg1 : i16):
          cc.scope {
            %5 = cc.alloca i1 : () -> !cc.ptr<i1>
	    %b3 = cc.undef i1
            cc.if (%b3) {
	      %val = cc.undef f64
              cc.unwind_continue %arg1 : i16
	      cc.continue
            }
	    cc.continue
          }
	  %val2 = cc.undef i32
	  cc.continue %arg1 : i16
        } step {
	 ^bb2(%arg2 : i16):
	  %incr = cc.undef i32
	  cc.continue %arg2 : i16
	}
      }
    }
  }
  return %result : f64
}

// CHECK-LABEL:   func.func @cc.scope_result() {
// CHECK:           %[[VAL_0:.*]] = cc.scope -> (i32) {
// CHECK:             %[[VAL_1:.*]] = cc.alloca i32 : () -> !cc.ptr<i32>
// CHECK:             %[[VAL_2:.*]] = cc.undef i32
// CHECK:             cc.continue %[[VAL_2]] : i32
// CHECK:           }
// CHECK:           return
// CHECK:         }

// CHECK-LABEL:   func.func @cc.scope_blocks() {
// CHECK:           cc.scope {
// CHECK:             %[[VAL_0:.*]] = cc.alloca i32 : () -> !cc.ptr<i32>
// CHECK:             %[[VAL_1:.*]] = cc.undef i1
// CHECK:             cf.cond_br %[[VAL_1]], ^bb1, ^bb2
// CHECK:           ^bb1:
// CHECK:             %[[VAL_2:.*]] = cc.undef i32
// CHECK:             cf.br ^bb3
// CHECK:           ^bb2:
// CHECK:             %[[VAL_3:.*]] = cc.undef f64
// CHECK:             cf.br ^bb3
// CHECK:           ^bb3:
// CHECK:             %[[VAL_4:.*]] = cc.undef i64
// CHECK:             cc.unwind_return
// CHECK:           }
// CHECK:           return
// CHECK:         }

func.func @cc.scope_result() {
  %0 = cc.scope -> i32 {
    %x = cc.alloca i32 : () -> !cc.ptr<i32>
    %0 = cc.undef i32
    cc.continue %0 : i32
  }
  return
}

// scope with an embedded primitive CFG
func.func @cc.scope_blocks() {
  cc.scope {
  ^bb2:
    %x = cc.alloca i32 : () -> !cc.ptr<i32>
    %0 = cc.undef i1
    cf.cond_br %0, ^bb0, ^bb1
  ^bb0:
    %b = cc.undef i32
    cf.br ^bb3
  ^bb1:
    %c = cc.undef f64
    cf.br ^bb3
  ^bb3:
    %e = cc.undef i64
    cc.unwind_return
  }
  return
}

// CHECK-LABEL:   func.func @wire_type() -> !quake.wire {
// CHECK:           %[[VAL_0:.*]] = cc.undef !quake.wire
// CHECK:           return %[[VAL_0]] : !quake.wire
// CHECK:         }

func.func @wire_type() -> !quake.wire {
  %0 = cc.undef !quake.wire
  return %0 : !quake.wire
}

// ========================================================================== //
// Copyright (c) 2022 - 2023 NVIDIA Corporation & Affiliates.                 //
// All rights reserved.                                                       //
//                                                                            //
// This source code and the accompanying materials are made available under   //
// the terms of the Apache License 2.0 which accompanies this distribution.   //
// ========================================================================== //

// RUN: cudaq-opt --canonicalize --lambda-lifting --lower-to-cfg --canonicalize --apply-op-specialization %s | FileCheck %s

// Notes:
//   - canonicalize is run to constant propagate through the veq type.
//   - lambda-lifting converts the lambda expressions to functions and converts
//     quake.compute_action to a series of quake.apply calls.
//   - lower-to-cfg and canonicalize then simplify the new lambdas so that we
//     can produce the adjoint of the compute lambda.
//   - quake-apply-rewrite generates the adjoint compute function.

module attributes {quake.mangled_name_map = {__nvqpp__mlirgen__t = "_Z1tv"}} {
  func.func @__nvqpp__mlirgen__t() attributes {"cudaq-entrypoint"} {
    %c5_i32 = arith.constant 5 : i32
    %0 = arith.extsi %c5_i32 : i32 to i64
    %1 = quake.alloca !quake.veq<?>[%0 : i64]
    %2 = cc.create_lambda {
      cc.scope {
        %c0_i32 = arith.constant 0 : i32
        %4 = arith.extsi %c0_i32 : i32 to i64
        %5 = quake.extract_ref %1[%4] : (!quake.veq<?>,i64) -> !quake.ref
        quake.t %5 : (!quake.ref) -> ()
        %c1_i32 = arith.constant 1 : i32
        %6 = arith.extsi %c1_i32 : i32 to i64
        %7 = quake.extract_ref %1[%6] : (!quake.veq<?>,i64) -> !quake.ref
        quake.x %7 : (!quake.ref) -> ()
      }
    } : !cc.callable<() -> ()>
    %3 = cc.create_lambda {
      cc.scope {
        %c2_i32 = arith.constant 2 : i32
        %4 = arith.extsi %c2_i32 : i32 to i64
        %5 = quake.extract_ref %1[%4] : (!quake.veq<?>,i64) -> !quake.ref
        quake.h %5 : (!quake.ref) -> ()
      }
    } : !cc.callable<() -> ()>
    quake.compute_action %2, %3 : !cc.callable<() -> ()>, !cc.callable<() -> ()>
    return
  }
}

// CHECK-LABEL:   func.func private @__nvqpp__lifted.lambda.{{[01]}}.adj(
// CHECK-SAME:            %[[VAL_0:.*]]: !quake.veq<5>) {
// CHECK:           %[[VAL_3:.*]] = quake.extract_ref %[[VAL_0]][0] : (!quake.veq<5>) -> !quake.ref
// CHECK:           %[[VAL_4:.*]] = quake.extract_ref %[[VAL_0]][1] : (!quake.veq<5>) -> !quake.ref
// CHECK:           quake.x %[[VAL_4]] : (!quake.ref) -> ()
// CHECK:           quake.t<adj> %[[VAL_3]] : (!quake.ref) -> ()
// CHECK:           return
// CHECK:         }

// CHECK-LABEL:   func.func @__nvqpp__mlirgen__t() attributes {"cudaq-entrypoint"} {
// CHECK:           %[[VAL_3:.*]] = quake.alloca !quake.veq<5>
// CHECK:           call @__nvqpp__lifted.lambda.{{[01]}}(%[[VAL_3]]) : (!quake.veq<5>) -> ()
// CHECK:           call @__nvqpp__lifted.lambda.{{[01]}}(%[[VAL_3]]) : (!quake.veq<5>) -> ()
// CHECK:           call @__nvqpp__lifted.lambda.{{[01]}}.adj(%[[VAL_3]]) : (!quake.veq<5>) -> ()
// CHECK:           return
// CHECK:         }

// CHECK-LABEL:   func.func private @__nvqpp__lifted.lambda.{{[01]}}(
// CHECK:           return
// CHECK:         }

// CHECK-LABEL:   func.func private @__nvqpp__lifted.lambda.{{[01]}}(
// CHECK:           return
// CHECK:         }


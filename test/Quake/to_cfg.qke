// ========================================================================== //
// Copyright (c) 2022 - 2024 NVIDIA Corporation & Affiliates.                 //
// All rights reserved.                                                       //
//                                                                            //
// This source code and the accompanying materials are made available under   //
// the terms of the Apache License 2.0 which accompanies this distribution.   //
// ========================================================================== //

// RUN: cudaq-opt --lower-to-cfg %s | cudaq-opt | FileCheck %s

func.func private @f1()
func.func private @f2()

func.func @test_loop(%arg0 : i32, %arg1 : i32) {
  cc.loop while {
    %1 = arith.cmpi slt, %arg0, %arg1 : i32
    cc.condition %1
  } do {
    func.call @f1() : () -> ()
    cc.continue
  }
  func.call @f2() : () -> ()
  func.return
}

// CHECK-LABEL:   func.func @test_loop(
// CHECK-SAME:      %[[VAL_0:.*]]: i32, %[[VAL_1:.*]]: i32) {
// CHECK:           cf.br ^bb1
// CHECK:         ^bb1:
// CHECK:           %[[VAL_2:.*]] = arith.cmpi slt, %[[VAL_0]], %[[VAL_1]] : i32
// CHECK:           cf.cond_br %[[VAL_2]], ^bb2, ^bb3
// CHECK:         ^bb2:
// CHECK:           call @f1() : () -> ()
// CHECK:           cf.br ^bb1
// CHECK:         ^bb3:
// CHECK:           call @f2() : () -> ()
// CHECK:           return
// CHECK:         }

func.func @test_loop2(%arg0 : i32, %arg1 : i32) {
  %1 = cc.loop while ((%i = %arg0) -> i32) {
    %1 = arith.cmpi slt, %i, %arg1 : i32
    cc.condition %1 (%i : i32)
  } do {
    ^bb2(%i2 : i32):
      func.call @f1() : () -> ()
      cc.continue %i2 : i32 { body = true }
  } step {
    ^bb3(%i3 : i32):
      %one = arith.constant 1 : i32
      %6 = arith.addi %i3, %one : i32
      cc.continue %6 : i32
  }
  func.call @f2() : () -> ()
  func.return
}

// CHECK-LABEL:   func.func @test_loop2(
// CHECK-SAME:      %[[VAL_0:.*]]: i32, %[[VAL_1:.*]]: i32) {
// CHECK:           cf.br ^bb1(%[[VAL_0]] : i32)
// CHECK:         ^bb1(%[[VAL_2:.*]]: i32):
// CHECK:           %[[VAL_3:.*]] = arith.cmpi slt, %[[VAL_2]], %[[VAL_1]] : i32
// CHECK:           cf.cond_br %[[VAL_3]], ^bb2(%[[VAL_2]] : i32), ^bb4(%[[VAL_2]] : i32)
// CHECK:         ^bb2(%[[VAL_4:.*]]: i32):
// CHECK:           call @f1() : () -> ()
// CHECK:           cf.br ^bb3(%[[VAL_4]] : i32)
// CHECK:         ^bb3(%[[VAL_5:.*]]: i32):
// CHECK:           %[[VAL_6:.*]] = arith.constant 1 : i32
// CHECK:           %[[VAL_7:.*]] = arith.addi %[[VAL_5]], %[[VAL_6]] : i32
// CHECK:           cf.br ^bb1(%[[VAL_7]] : i32)
// CHECK:         ^bb4(%[[VAL_8:.*]]: i32):
// CHECK:           cf.br ^bb5
// CHECK:         ^bb5:
// CHECK:           call @f2() : () -> ()
// CHECK:           return
// CHECK:         }

func.func @test_loop3(%arg0 : i32, %arg1 : i32) {
  %1 = cc.loop do ((%i = %arg0) -> i32) {
    func.call @f1() : () -> ()
    cc.continue %i : i32
  } while {
    ^bb2(%i2 : i32):
      %1 = arith.cmpi slt, %i2, %arg1 : i32
      cc.condition %1 (%i2 : i32)
  } 
  func.call @f2() : () -> ()
  func.return
}

// CHECK-LABEL:   func.func @test_loop3(
// CHECK-SAME:      %[[VAL_0:.*]]: i32, %[[VAL_1:.*]]: i32) {
// CHECK:           cf.br ^bb1(%[[VAL_0]] : i32)
// CHECK:         ^bb1(%[[VAL_2:.*]]: i32):
// CHECK:           call @f1() : () -> ()
// CHECK:           cf.br ^bb2(%[[VAL_2]] : i32)
// CHECK:         ^bb2(%[[VAL_3:.*]]: i32):
// CHECK:           %[[VAL_4:.*]] = arith.cmpi slt, %[[VAL_3]], %[[VAL_1]] : i32
// CHECK:           cf.cond_br %[[VAL_4]], ^bb1(%[[VAL_3]] : i32), ^bb3(%[[VAL_3]] : i32)
// CHECK:         ^bb3(%[[VAL_5:.*]]: i32):
// CHECK:           cf.br ^bb4
// CHECK:         ^bb4:
// CHECK:           call @f2() : () -> ()
// CHECK:           return
// CHECK:         }

func.func @test_scopeLoop(%arg0 : i32, %arg1 : i32) {
  cc.scope {
    func.call @f1() : () -> ()
    %1 = cc.loop while ((%i = %arg0) -> i32) {
      %1 = arith.cmpi slt, %i, %arg1 : i32
      cc.condition %1 (%i : i32)
    } do {
      ^bb2(%i2 : i32):
        func.call @f1() : () -> ()
        cc.continue %i2 : i32
    } step {
      ^bb3(%i3 : i32):
        %one = arith.constant 1 : i32
        %6 = arith.addi %i3, %one : i32
        cc.continue %6 : i32
    }
  }
  func.call @f2() : () -> ()
  func.return
}

// CHECK-LABEL:   func.func @test_scopeLoop(
// CHECK-SAME:      %[[VAL_0:.*]]: i32, %[[VAL_1:.*]]: i32) {
// CHECK:           cf.br ^bb1
// CHECK:         ^bb1:
// CHECK:           call @f1() : () -> ()
// CHECK:           cf.br ^bb2(%[[VAL_0]] : i32)
// CHECK:         ^bb2(%[[VAL_2:.*]]: i32):
// CHECK:           %[[VAL_3:.*]] = arith.cmpi slt, %[[VAL_2]], %[[VAL_1]] : i32
// CHECK:           cf.cond_br %[[VAL_3]], ^bb3(%[[VAL_2]] : i32), ^bb5(%[[VAL_2]] : i32)
// CHECK:         ^bb3(%[[VAL_4:.*]]: i32):
// CHECK:           call @f1() : () -> ()
// CHECK:           cf.br ^bb4(%[[VAL_4]] : i32)
// CHECK:         ^bb4(%[[VAL_5:.*]]: i32):
// CHECK:           %[[VAL_6:.*]] = arith.constant 1 : i32
// CHECK:           %[[VAL_7:.*]] = arith.addi %[[VAL_5]], %[[VAL_6]] : i32
// CHECK:           cf.br ^bb2(%[[VAL_7]] : i32)
// CHECK:         ^bb5(%[[VAL_8:.*]]: i32):
// CHECK:           cf.br ^bb6
// CHECK:         ^bb6:
// CHECK:           cf.br ^bb7
// CHECK:         ^bb7:
// CHECK:           call @f2() : () -> ()
// CHECK:           return
// CHECK:         }

func.func @test_scope_ifThenElse(%arg0 : i32, %arg1 : i32) {
  %1 = arith.cmpi slt, %arg0, %arg1 : i32
  cc.if (%1) {
    func.call @f1() : () -> ()
    cc.continue
  } else {
    func.call @f2() : () -> ()
    cc.continue
  }
  func.return
}

// CHECK-LABEL:   func.func @test_scope_ifThenElse(
// CHECK-SAME:      %[[VAL_0:.*]]: i32, %[[VAL_1:.*]]: i32) {
// CHECK:           %[[VAL_2:.*]] = arith.cmpi slt, %[[VAL_0]], %[[VAL_1]] : i32
// CHECK:           cf.cond_br %[[VAL_2]], ^bb1, ^bb2
// CHECK:         ^bb1:
// CHECK:           call @f1() : () -> ()
// CHECK:           cf.br ^bb3
// CHECK:         ^bb2:
// CHECK:           call @f2() : () -> ()
// CHECK:           cf.br ^bb3
// CHECK:         ^bb3:
// CHECK:           return
// CHECK:         }

func.func @python_loop() -> i64 {
  %0 = arith.constant 0 : i64
  %1 = arith.constant 10 : i64
  %5 = arith.constant 1 : i64
  %7 = arith.constant 7 : i64
  %2 = cc.loop while ((%arg0 = %0) -> i64) {
    %3 = arith.cmpi slt, %arg0, %1 : i64
    cc.condition %3 (%arg0 : i64)
  } do {
   ^bb0(%arg0 : i64):
    cc.continue %arg0 : i64
  } step {
   ^bb0(%arg0 : i64):
    %4 = arith.addi %arg0, %5 : i64
    cc.continue %4 : i64
  } else {
   ^bb0(%arg0 : i64):
    %6 = arith.muli %arg0, %7 : i64
    cc.continue %6 : i64
  }
  return %2 : i64
}

// CHECK-LABEL:   func.func @python_loop() -> i64 {
// CHECK:           %[[VAL_0:.*]] = arith.constant 0 : i64
// CHECK:           %[[VAL_1:.*]] = arith.constant 10 : i64
// CHECK:           %[[VAL_2:.*]] = arith.constant 1 : i64
// CHECK:           %[[VAL_3:.*]] = arith.constant 7 : i64
// CHECK:           cf.br ^bb1(%[[VAL_0]] : i64)
// CHECK:         ^bb1(%[[VAL_4:.*]]: i64):
// CHECK:           %[[VAL_5:.*]] = arith.cmpi slt, %[[VAL_4]], %[[VAL_1]] : i64
// CHECK:           cf.cond_br %[[VAL_5]], ^bb2(%[[VAL_4]] : i64), ^bb4(%[[VAL_4]] : i64)
// CHECK:         ^bb2(%[[VAL_6:.*]]: i64):
// CHECK:           cf.br ^bb3(%[[VAL_6]] : i64)
// CHECK:         ^bb3(%[[VAL_7:.*]]: i64):
// CHECK:           %[[VAL_8:.*]] = arith.addi %[[VAL_7]], %[[VAL_2]] : i64
// CHECK:           cf.br ^bb1(%[[VAL_8]] : i64)
// CHECK:         ^bb4(%[[VAL_9:.*]]: i64):
// CHECK:           %[[VAL_10:.*]] = arith.muli %[[VAL_9]], %[[VAL_3]] : i64
// CHECK:           cf.br ^bb5(%[[VAL_10]] : i64)
// CHECK:         ^bb5(%[[VAL_11:.*]]: i64):
// CHECK:           cf.br ^bb6
// CHECK:         ^bb6:
// CHECK:           return %[[VAL_11]] : i64
// CHECK:         }

func.func @scope_with_cf() {
  cc.scope {
    %0 = arith.constant 0 : i64
    func.call @f1() : () -> ()
    cf.br ^bb2
   ^bb1:
    %1 = arith.constant 1 : i64
    func.call @f1() : () -> ()
    cc.continue
   ^bb2:
    %2 = arith.constant 2 : i64
    func.call @f1() : () -> ()
    cf.br ^bb1
  }
  call @f2() : () -> ()
  return
}

// CHECK-LABEL:   func.func @scope_with_cf() {
// CHECK:           cf.br ^bb1
// CHECK:         ^bb1:
// CHECK:           %[[VAL_0:.*]] = arith.constant 0 : i64
// CHECK:           call @f1() : () -> ()
// CHECK:           cf.br ^bb3
// CHECK:         ^bb2:
// CHECK:           %[[VAL_1:.*]] = arith.constant 1 : i64
// CHECK:           call @f1() : () -> ()
// CHECK:           cf.br ^bb4
// CHECK:         ^bb3:
// CHECK:           %[[VAL_2:.*]] = arith.constant 2 : i64
// CHECK:           call @f1() : () -> ()
// CHECK:           cf.br ^bb2
// CHECK:         ^bb4:
// CHECK:           call @f2() : () -> ()
// CHECK:           return
// CHECK:         }

func.func @scope_with_cf2() {
  cc.scope -> (i32) {
    %0 = arith.constant 0 : i64
    func.call @f1() : () -> ()
    cf.br ^bb2
   ^bb1:
    %1 = arith.constant 1 : i32
    func.call @f1() : () -> ()
    cc.continue %1 : i32
   ^bb2:
    %2 = arith.constant 2 : i64
    func.call @f1() : () -> ()
    cf.br ^bb1
  }
  call @f2() : () -> ()
  return
}

// CHECK-LABEL:   func.func @scope_with_cf2() {
// CHECK:           cf.br ^bb1
// CHECK:         ^bb1:
// CHECK:           %[[VAL_0:.*]] = arith.constant 0 : i64
// CHECK:           call @f1() : () -> ()
// CHECK:           cf.br ^bb3
// CHECK:         ^bb2:
// CHECK:           %[[VAL_1:.*]] = arith.constant 1 : i32
// CHECK:           call @f1() : () -> ()
// CHECK:           cf.br ^bb4(%[[VAL_1]] : i32)
// CHECK:         ^bb3:
// CHECK:           %[[VAL_2:.*]] = arith.constant 2 : i64
// CHECK:           call @f1() : () -> ()
// CHECK:           cf.br ^bb2
// CHECK:         ^bb4(%[[VAL_3:.*]]: i32):
// CHECK:           cf.br ^bb5
// CHECK:         ^bb5:
// CHECK:           call @f2() : () -> ()
// CHECK:           return
// CHECK:         }


func.func @test_wired_through_if() {
  %0 = quake.null_wire
  %1 = quake.null_wire
  %3 = cc.undef i1
  %2:2 = cc.if (%3) ((%4 = %0, %5 = %1)) -> (!quake.wire, !quake.wire) {
    %6:2 = quake.x [%4] %5 : (!quake.wire, !quake.wire) -> (!quake.wire, !quake.wire)
    cc.continue %6#1, %6#0 : !quake.wire, !quake.wire
  } else {
    %6:2 = quake.x [%4] %5 : (!quake.wire, !quake.wire) -> (!quake.wire, !quake.wire)
    cc.continue %6#0, %6#1 : !quake.wire, !quake.wire
  }
  quake.sink %2#0 : !quake.wire
  quake.sink %2#1 : !quake.wire
  return
}

// CHECK-LABEL:   func.func @test_wired_through_if() {
// CHECK:           %[[VAL_0:.*]] = quake.null_wire
// CHECK:           %[[VAL_1:.*]] = quake.null_wire
// CHECK:           %[[VAL_2:.*]] = cc.undef i1
// CHECK:           cf.cond_br %[[VAL_2]], ^bb1(%[[VAL_0]], %[[VAL_1]] : !quake.wire, !quake.wire), ^bb2(%[[VAL_0]], %[[VAL_1]] : !quake.wire, !quake.wire)
// CHECK:         ^bb1(%[[VAL_3:.*]]: !quake.wire, %[[VAL_4:.*]]: !quake.wire):
// CHECK:           %[[VAL_5:.*]]:2 = quake.x {{\[}}%[[VAL_3]]] %[[VAL_4]] : (!quake.wire, !quake.wire) -> (!quake.wire, !quake.wire)
// CHECK:           cf.br ^bb3(%[[VAL_5]]#1, %[[VAL_5]]#0 : !quake.wire, !quake.wire)
// CHECK:         ^bb2(%[[VAL_6:.*]]: !quake.wire, %[[VAL_7:.*]]: !quake.wire):
// CHECK:           %[[VAL_8:.*]]:2 = quake.x {{\[}}%[[VAL_6]]] %[[VAL_7]] : (!quake.wire, !quake.wire) -> (!quake.wire, !quake.wire)
// CHECK:           cf.br ^bb3(%[[VAL_8]]#0, %[[VAL_8]]#1 : !quake.wire, !quake.wire)
// CHECK:         ^bb3(%[[VAL_9:.*]]: !quake.wire, %[[VAL_10:.*]]: !quake.wire):
// CHECK:           cf.br ^bb4
// CHECK:         ^bb4:
// CHECK:           quake.sink %[[VAL_9]] : !quake.wire
// CHECK:           quake.sink %[[VAL_10]] : !quake.wire
// CHECK:           return
// CHECK:         }

func.func @test_wired_a_bit_loopy() {
  %0 = quake.null_wire
  %1 = quake.null_wire
  %2:2 = cc.loop while ((%4 = %0, %5 = %1) -> (!quake.wire, !quake.wire)) {
    %3 = cc.undef i1
    cc.condition %3 (%4, %5 : !quake.wire, !quake.wire)
  } do {
   ^bb1(%4: !quake.wire, %5: !quake.wire):
    %7 = cc.undef i1
    cf.cond_br %7, ^bb2(%4, %5 : !quake.wire, !quake.wire), ^bb3(%5, %4 : !quake.wire, !quake.wire)
   ^bb2(%14: !quake.wire, %15: !quake.wire):
    %16:2 = quake.x [%14] %15 : (!quake.wire, !quake.wire) -> (!quake.wire, !quake.wire)
    cc.continue %16#1, %16#0 : !quake.wire, !quake.wire
   ^bb3(%24: !quake.wire, %25: !quake.wire):
    %26:2 = quake.y [%24] %25 : (!quake.wire, !quake.wire) -> (!quake.wire, !quake.wire)
    cc.continue %26#1, %26#0 : !quake.wire, !quake.wire
  } step {
   ^bb1(%4: !quake.wire, %5: !quake.wire):
    %6:2 = quake.z [%4] %5 : (!quake.wire, !quake.wire) -> (!quake.wire, !quake.wire)
    cc.continue %6#0, %6#1 : !quake.wire, !quake.wire
  }
  quake.sink %2#0 : !quake.wire
  quake.sink %2#1 : !quake.wire
  return
}

// CHECK-LABEL:   func.func @test_wired_a_bit_loopy() {
// CHECK:           %[[VAL_0:.*]] = quake.null_wire
// CHECK:           %[[VAL_1:.*]] = quake.null_wire
// CHECK:           cf.br ^bb1(%[[VAL_0]], %[[VAL_1]] : !quake.wire, !quake.wire)
// CHECK:         ^bb1(%[[VAL_2:.*]]: !quake.wire, %[[VAL_3:.*]]: !quake.wire):
// CHECK:           %[[VAL_4:.*]] = cc.undef i1
// CHECK:           cf.cond_br %[[VAL_4]], ^bb2(%[[VAL_2]], %[[VAL_3]] : !quake.wire, !quake.wire), ^bb6(%[[VAL_2]], %[[VAL_3]] : !quake.wire, !quake.wire)
// CHECK:         ^bb2(%[[VAL_5:.*]]: !quake.wire, %[[VAL_6:.*]]: !quake.wire):
// CHECK:           %[[VAL_7:.*]] = cc.undef i1
// CHECK:           cf.cond_br %[[VAL_7]], ^bb3(%[[VAL_5]], %[[VAL_6]] : !quake.wire, !quake.wire), ^bb4(%[[VAL_6]], %[[VAL_5]] : !quake.wire, !quake.wire)
// CHECK:         ^bb3(%[[VAL_8:.*]]: !quake.wire, %[[VAL_9:.*]]: !quake.wire):
// CHECK:           %[[VAL_10:.*]]:2 = quake.x {{\[}}%[[VAL_8]]] %[[VAL_9]] : (!quake.wire, !quake.wire) -> (!quake.wire, !quake.wire)
// CHECK:           cf.br ^bb5(%[[VAL_10]]#1, %[[VAL_10]]#0 : !quake.wire, !quake.wire)
// CHECK:         ^bb4(%[[VAL_11:.*]]: !quake.wire, %[[VAL_12:.*]]: !quake.wire):
// CHECK:           %[[VAL_13:.*]]:2 = quake.y {{\[}}%[[VAL_11]]] %[[VAL_12]] : (!quake.wire, !quake.wire) -> (!quake.wire, !quake.wire)
// CHECK:           cf.br ^bb5(%[[VAL_13]]#1, %[[VAL_13]]#0 : !quake.wire, !quake.wire)
// CHECK:         ^bb5(%[[VAL_14:.*]]: !quake.wire, %[[VAL_15:.*]]: !quake.wire):
// CHECK:           %[[VAL_16:.*]]:2 = quake.z {{\[}}%[[VAL_14]]] %[[VAL_15]] : (!quake.wire, !quake.wire) -> (!quake.wire, !quake.wire)
// CHECK:           cf.br ^bb1(%[[VAL_16]]#0, %[[VAL_16]]#1 : !quake.wire, !quake.wire)
// CHECK:         ^bb6(%[[VAL_17:.*]]: !quake.wire, %[[VAL_18:.*]]: !quake.wire):
// CHECK:           cf.br ^bb7
// CHECK:         ^bb7:
// CHECK:           quake.sink %[[VAL_17]] : !quake.wire
// CHECK:           quake.sink %[[VAL_18]] : !quake.wire
// CHECK:           return
// CHECK:         }

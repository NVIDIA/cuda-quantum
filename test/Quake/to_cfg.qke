// ========================================================================== //
// Copyright (c) 2022 - 2023 NVIDIA Corporation & Affiliates.                 //
// All rights reserved.                                                       //
//                                                                            //
// This source code and the accompanying materials are made available under   //
// the terms of the Apache License 2.0 which accompanies this distribution.   //
// ========================================================================== //

// RUN: cudaq-opt --lower-to-cfg %s | cudaq-opt | FileCheck %s

module {

func.func private @f1()
func.func private @f2()

func.func @test_loop(%arg0 : i32, %arg1 : i32) {
  cc.loop while {
    %1 = arith.cmpi slt, %arg0, %arg1 : i32
    cc.condition %1
  } do {
    func.call @f1() : () -> ()
    cc.continue
  }
  func.call @f2() : () -> ()
  func.return
}

// CHECK-LABEL:   func.func @test_loop(
// CHECK-SAME:                         %[[VAL_0:.*]]: i32,
// CHECK-SAME:                         %[[VAL_1:.*]]: i32) {
// CHECK:           cf.br ^bb1
// CHECK:         ^bb1:
// CHECK:           %[[VAL_2:.*]] = arith.cmpi slt, %[[VAL_0]], %[[VAL_1]] : i32
// CHECK:           cf.cond_br %[[VAL_2]], ^bb2, ^bb3
// CHECK:         ^bb2:
// CHECK:           call @f1() : () -> ()
// CHECK:           cf.br ^bb1
// CHECK:         ^bb3:
// CHECK:           call @f2() : () -> ()
// CHECK:           return
// CHECK:         }

func.func @test_loop2(%arg0 : i32, %arg1 : i32) {
  %1 = cc.loop while ((%i = %arg0) -> i32) {
    %1 = arith.cmpi slt, %i, %arg1 : i32
    cc.condition %1 (%i : i32)
  } do {
    ^bb2(%i2 : i32):
      func.call @f1() : () -> ()
      cc.continue %i2 : i32 { body = true }
  } step {
    ^bb3(%i3 : i32):
      %one = arith.constant 1 : i32
      %6 = arith.addi %i3, %one : i32
      cc.continue %6 : i32
  }
  func.call @f2() : () -> ()
  func.return
}

// CHECK-LABEL:   func.func @test_loop2(
// CHECK-SAME:                          %[[VAL_0:.*]]: i32,
// CHECK-SAME:                          %[[VAL_1:.*]]: i32) {
// CHECK:           cf.br ^bb1(%[[VAL_0]] : i32)
// CHECK:         ^bb1(%[[VAL_2:.*]]: i32):
// CHECK:           %[[VAL_3:.*]] = arith.cmpi slt, %[[VAL_2]], %[[VAL_1]] : i32
// CHECK:           cf.cond_br %[[VAL_3]], ^bb2(%[[VAL_2]] : i32), ^bb4(%[[VAL_2]] : i32)
// CHECK:         ^bb2(%[[VAL_4:.*]]: i32):
// CHECK:           call @f1() : () -> ()
// CHECK:           cf.br ^bb3(%[[VAL_4]] : i32)
// CHECK:         ^bb3(%[[VAL_5:.*]]: i32):
// CHECK:           %[[VAL_6:.*]] = arith.constant 1 : i32
// CHECK:           %[[VAL_7:.*]] = arith.addi %[[VAL_5]], %[[VAL_6]] : i32
// CHECK:           cf.br ^bb1(%[[VAL_7]] : i32)
// CHECK:         ^bb4(%[[VAL_8:.*]]: i32):
// CHECK:           cf.br ^bb5
// CHECK:         ^bb5:
// CHECK:           call @f2() : () -> ()
// CHECK:           return
// CHECK:         }

func.func @test_loop3(%arg0 : i32, %arg1 : i32) {
  %1 = cc.loop do ((%i = %arg0) -> i32) {
    func.call @f1() : () -> ()
    cc.continue %i : i32
  } while {
    ^bb2(%i2 : i32):
      %1 = arith.cmpi slt, %i2, %arg1 : i32
      cc.condition %1 (%i2 : i32)
  } 
  func.call @f2() : () -> ()
  func.return
}

// CHECK-LABEL:   func.func @test_loop3(
// CHECK-SAME:                          %[[VAL_0:.*]]: i32,
// CHECK-SAME:                          %[[VAL_1:.*]]: i32) {
// CHECK:           cf.br ^bb1(%[[VAL_0]] : i32)
// CHECK:         ^bb1(%[[VAL_2:.*]]: i32):
// CHECK:           call @f1() : () -> ()
// CHECK:           cf.br ^bb1(%[[VAL_2]] : i32)
// CHECK:         ^bb2(%[[VAL_3:.*]]: i32):
// CHECK:           %[[VAL_4:.*]] = arith.cmpi slt, %[[VAL_3]], %[[VAL_1]] : i32
// CHECK:           cf.cond_br %[[VAL_4]], ^bb1(%[[VAL_3]] : i32), ^bb3(%[[VAL_3]] : i32)
// CHECK:         ^bb3(%[[VAL_5:.*]]: i32):
// CHECK:           cf.br ^bb4
// CHECK:         ^bb4:
// CHECK:           call @f2() : () -> ()
// CHECK:           return
// CHECK:         }

func.func @test_scopeLoop(%arg0 : i32, %arg1 : i32) {
  cc.scope {
    func.call @f1() : () -> ()
    %1 = cc.loop while ((%i = %arg0) -> i32) {
      %1 = arith.cmpi slt, %i, %arg1 : i32
      cc.condition %1 (%i : i32)
    } do {
      ^bb2(%i2 : i32):
        func.call @f1() : () -> ()
        cc.continue %i2 : i32
    } step {
      ^bb3(%i3 : i32):
        %one = arith.constant 1 : i32
        %6 = arith.addi %i3, %one : i32
        cc.continue %6 : i32
    }
  }
  func.call @f2() : () -> ()
  func.return
}

// CHECK-LABEL:   func.func @test_scopeLoop(
// CHECK-SAME:                              %[[VAL_0:.*]]: i32,
// CHECK-SAME:                              %[[VAL_1:.*]]: i32) {
// CHECK:           cf.br ^bb1
// CHECK:         ^bb1:
// CHECK:           call @f1() : () -> ()
// CHECK:           cf.br ^bb2(%[[VAL_0]] : i32)
// CHECK:         ^bb2(%[[VAL_2:.*]]: i32):
// CHECK:           %[[VAL_3:.*]] = arith.cmpi slt, %[[VAL_2]], %[[VAL_1]] : i32
// CHECK:           cf.cond_br %[[VAL_3]], ^bb3(%[[VAL_2]] : i32), ^bb5(%[[VAL_2]] : i32)
// CHECK:         ^bb3(%[[VAL_4:.*]]: i32):
// CHECK:           call @f1() : () -> ()
// CHECK:           cf.br ^bb4(%[[VAL_4]] : i32)
// CHECK:         ^bb4(%[[VAL_5:.*]]: i32):
// CHECK:           %[[VAL_6:.*]] = arith.constant 1 : i32
// CHECK:           %[[VAL_7:.*]] = arith.addi %[[VAL_5]], %[[VAL_6]] : i32
// CHECK:           cf.br ^bb2(%[[VAL_7]] : i32)
// CHECK:         ^bb5(%[[VAL_8:.*]]: i32):
// CHECK:           cf.br ^bb6
// CHECK:         ^bb6:
// CHECK:           cf.br ^bb7
// CHECK:         ^bb7:
// CHECK:           call @f2() : () -> ()
// CHECK:           return
// CHECK:         }

func.func @test_scope_ifThenElse(%arg0 : i32, %arg1 : i32) {
  %1 = arith.cmpi slt, %arg0, %arg1 : i32
  cc.if (%1) {
    func.call @f1() : () -> ()
    cc.continue
  } else {
    func.call @f2() : () -> ()
    cc.continue
  }
  func.return
}

// CHECK-LABEL:   func.func @test_scope_ifThenElse(
// CHECK-SAME:                                     %[[VAL_0:.*]]: i32,
// CHECK-SAME:                                     %[[VAL_1:.*]]: i32) {
// CHECK:           %[[VAL_2:.*]] = arith.cmpi slt, %[[VAL_0]], %[[VAL_1]] : i32
// CHECK:           cf.cond_br %[[VAL_2]], ^bb1, ^bb2
// CHECK:         ^bb1:
// CHECK:           call @f1() : () -> ()
// CHECK:           cf.br ^bb3
// CHECK:         ^bb2:
// CHECK:           call @f2() : () -> ()
// CHECK:           cf.br ^bb3
// CHECK:         ^bb3:
// CHECK:           return
// CHECK:         }

}

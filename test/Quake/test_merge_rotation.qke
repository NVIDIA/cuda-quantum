// ========================================================================== //
// Copyright (c) 2022 - 2023 NVIDIA Corporation & Affiliates.                 //
// All rights reserved.                                                       //
//                                                                            //
// This source code and the accompanying materials are made available under   //
// the terms of the Apache License 2.0 which accompanies this distribution.   //
// ========================================================================== //

// RUN: cudaq-opt %s | FileCheck %s
// CHECK: module  {
// CHECK: func.func @duplicate_rotation_check() {
// CHECK:     %[[C2:.*]] = arith.constant 2 : i32
// CHECK:     %[[C0:.*]] = arith.constant 0 : i32
// CHECK:     %0 = quake.alloca[%[[C2]] : i32] !quake.qvec<?>
// CHECK:     %1 = quake.extract_ref %0[%[[C0]]] : (!quake.qvec<?>, i32) -> !quake.ref
// CHECK:     %[[CF:.*]] = arith.constant 5.900000e-01 : f64
// CHECK:     quake.rx (%[[CF]]) %1 : (f64,
// CHECK:     quake.rx (%[[CF]]) %1 : (f64,
// CHECK:     %2 = quake.mz %1 : (!quake.ref) -> i1
// CHECK:     return
// CHECK:   }

func.func @duplicate_rotation_check() {
  %0 = arith.constant 2 : i32
  %c_0 = arith.constant 0 : i32
  %qubits = quake.alloca [ %0 : i32 ] !quake.qvec<?>
  %q0 = quake.extract_ref %qubits[%c_0] : (!quake.qvec<?>,i32) -> !quake.ref
  %c_angle = arith.constant 0.59 : f64
  quake.rx (%c_angle) %q0: (f64, !quake.ref) -> ()
  quake.rx (%c_angle) %q0 : (f64, !quake.ref) -> ()
  %measurements0 = quake.mz %q0 : (!quake.ref) -> i1
  return
}

// CHECK: func.func @duplicate_rotation_check2() {
// CHECK:     %[[C2]] = arith.constant 2 : i32
// CHECK:     %[[C0]] = arith.constant 0 : i32
// CHECK:     %0 = quake.alloca[%[[C2]] : i32] !quake.qvec<?>
// CHECK:     %1 = quake.extract_ref %0[%[[C0]]] : (!quake.qvec<?>, i32) -> !quake.ref
// CHECK:     %[[CF:.*]] = arith.constant 5.900000e-01 : f64
// CHECK:     %[[CF2:.*]] = arith.constant 2.300000e-01 : f64
// CHECK:     quake.rx (%[[CF]]) %1 : (f64,
// CHECK:     quake.rx (%[[CF]]) %1 : (f64,
// CHECK:     quake.rx (%[[CF2]]) %1 : (f64,
// CHECK:     %2 = quake.mz %1 : (!quake.ref) -> i1
// CHECK:     return
// CHECK: }
func.func @duplicate_rotation_check2() {
  %0 = arith.constant 2 : i32
  %c_0 = arith.constant 0 : i32
  %qubits = quake.alloca [ %0 : i32] !quake.qvec<?>
  %q0 = quake.extract_ref %qubits[%c_0] : (!quake.qvec<?>, i32) -> !quake.ref
  %c_angle = arith.constant 0.59 : f64
  %c_angle2 = arith.constant 0.23 : f64
  quake.rx (%c_angle) %q0 : (f64, !quake.ref) -> ()
  quake.rx (%c_angle) %q0 : (f64, !quake.ref) -> ()
  quake.rx (%c_angle2) %q0 : (f64, !quake.ref) -> ()
  %measurement = quake.mz %q0 : (!quake.ref) -> i1
  return
}

// CHECK:  func.func @returns_angle(%arg0: f64, %arg1: f64) -> f64 {
// CHECK:    %0 = arith.divf %arg0, %arg1 : f64
// CHECK:    return %0 : f64
// CHECK:  }
func.func @returns_angle(%arg0 : f64, %arg1 : f64) -> (f64) {
  %0 = arith.divf %arg0, %arg1 : f64
  return %0 : f64
}

// CHECK: func.func @duplicate_rotation_check3() {
// CHECK:     %[[C2:.*]] = arith.constant 2 : i32
// CHECK:     %[[C0:.*]] = arith.constant 0 : i32
// CHECK:     %0 = quake.alloca[%[[C2]] : i32] !quake.qvec<?>
// CHECK:     %1 = quake.extract_ref %0[%[[C0]]] : (!quake.qvec<?>, i32) -> !quake.ref
// CHECK:     %[[CF:.*]] = arith.constant 5.900000e-01 : f64
// CHECK:     %[[CF2:.*]] = arith.constant 2.300000e-01 : f64
// CHECK:     %[[CF3:.*]] = arith.constant 6.400000e-01 : f64
// CHECK:     %2 = call @returns_angle(%[[CF]], %[[CF2]]) : (f64, f64) -> f64
// CHECK:     %3 = call @returns_angle(%[[CF3]], %[[CF2]]) : (f64, f64) -> f64
// CHECK:     quake.rx (%cst) %1 :
// CHECK:     quake.rx (%3) %1 :
// CHECK:     quake.rx (%2) %1 :
// CHECK:     %4 = quake.mz %1 : (!quake.ref) -> i1
// CHECK:     return
// CHECK: }
func.func @duplicate_rotation_check3() {
  %0 = arith.constant 2 : i32
  %c_0 = arith.constant 0 : i32
  %qubits = quake.alloca [ %0 : i32 ] !quake.qvec<?>
  %q0 = quake.extract_ref %qubits[%c_0] : (!quake.qvec<?>, i32) -> !quake.ref
  %c_angle = arith.constant 0.59 : f64
  %c_angle2 = arith.constant 0.23 : f64
  %c_angle3 = arith.constant 0.64 : f64
  %new_angle = call @returns_angle(%c_angle, %c_angle2) : (f64, f64) -> (f64) 
  %new_angle2 = call @returns_angle(%c_angle3, %c_angle2) : (f64, f64) -> (f64)
  quake.rx (%c_angle) %q0 : (f64, !quake.ref) -> ()
  quake.rx (%new_angle2) %q0 : (f64, !quake.ref) -> ()
  quake.rx (%new_angle) %q0 : (f64, !quake.ref) -> ()
  %measurement = quake.mz %q0 : (!quake.ref) -> i1
  return
}

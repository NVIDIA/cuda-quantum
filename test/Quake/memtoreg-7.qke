// ========================================================================== //
// Copyright (c) 2022 - 2024 NVIDIA Corporation & Affiliates.                 //
// All rights reserved.                                                       //
//                                                                            //
// This source code and the accompanying materials are made available under   //
// the terms of the Apache License 2.0 which accompanies this distribution.   //
// ========================================================================== //

// RUN: cudaq-opt --memtoreg %s | FileCheck %s
// RUN: cudaq-opt --expand-measurements --cc-loop-normalize --cc-loop-unroll --factor-quantum-alloc --canonicalize --memtoreg %s | cudaq-opt --regtomem | FileCheck --check-prefix CANOE %s

func.func @__nvqpp__mlirgen__test() attributes {"cudaq-entrypoint", qubitMeasurementFeedback = true} {
  %false = arith.constant false
  %c1_i64 = arith.constant 1 : i64
  %c0_i64 = arith.constant 0 : i64
  %true = arith.constant true
  %c2_i64 = arith.constant 2 : i64
  %0 = quake.alloca !quake.veq<2>
  %1 = cc.alloca i1
  cc.store %true, %1 : !cc.ptr<i1>
  %2 = cc.loop while ((%arg0 = %c0_i64) -> (i64)) {
    %5 = arith.cmpi slt, %arg0, %c2_i64 : i64
    cc.condition %5(%arg0 : i64)
  } do {
  ^bb0(%arg0: i64):
    %5 = quake.extract_ref %0[%arg0] : (!quake.veq<2>, i64) -> !quake.ref
    %measOut = quake.mz %5 name "res" : (!quake.ref) -> !quake.measure
    %6 = quake.discriminate %measOut : (!quake.measure) -> i1
    cc.store %6, %1 : !cc.ptr<i1>
    %7 = cc.load %1 : !cc.ptr<i1>
    %8 = arith.cmpi eq, %7, %false : i1
    cc.if(%8) {
      %measOut_0 = quake.mz %0 name "inner_mz" : (!quake.veq<2>) -> !cc.stdvec<!quake.measure>
      %9 = quake.discriminate %measOut_0 : (!cc.stdvec<!quake.measure>) -> !cc.stdvec<i1>
      cc.scope {
        %10 = cc.alloca !cc.stdvec<i1>
        cc.store %9, %10 : !cc.ptr<!cc.stdvec<i1>>
      }
    }
    cc.continue %arg0 : i64
  } step {
  ^bb0(%arg0: i64):
    %5 = arith.addi %arg0, %c1_i64 : i64
    cc.continue %5 : i64
  } {invariant}
  %3 = cc.load %1 : !cc.ptr<i1>
  %4 = arith.cmpi eq, %3, %true : i1
  cc.if(%4) {
    %measOut = quake.mz %0 name "outer_mz" : (!quake.veq<2>) -> !cc.stdvec<!quake.measure>
    %5 = quake.discriminate %measOut : (!cc.stdvec<!quake.measure>) -> !cc.stdvec<i1>
    cc.scope {
      %6 = cc.alloca !cc.stdvec<i1>
      cc.store %5, %6 : !cc.ptr<!cc.stdvec<i1>>
    }
  }
  return
}

// CHECK-LABEL:   func.func @__nvqpp__mlirgen__test() attributes {"cudaq-entrypoint", qubitMeasurementFeedback = true} {
// CHECK-DAG:       %[[VAL_0:.*]] = arith.constant false
// CHECK-DAG:       %[[VAL_1:.*]] = arith.constant 1 : i64
// CHECK-DAG:       %[[VAL_2:.*]] = arith.constant 0 : i64
// CHECK-DAG:       %[[VAL_3:.*]] = arith.constant true
// CHECK-DAG:       %[[VAL_4:.*]] = arith.constant 2 : i64
// CHECK-DAG:       %[[VAL_5:.*]] = quake.alloca !quake.veq<2>
// CHECK-DAG:       %[[VAL_6:.*]] = cc.undef i1
// CHECK:           %[[VAL_7:.*]]:2 = cc.loop while ((%[[VAL_8:.*]] = %[[VAL_2]], %[[VAL_9:.*]] = %[[VAL_3]]) -> (i64, i1)) {
// CHECK:             %[[VAL_10:.*]] = arith.cmpi slt, %[[VAL_8]], %[[VAL_4]] : i64
// CHECK:             cc.condition %[[VAL_10]](%[[VAL_8]], %[[VAL_9]] : i64, i1)
// CHECK:           } do {
// CHECK:           ^bb0(%[[VAL_11:.*]]: i64, %[[VAL_12:.*]]: i1):
// CHECK:             %[[VAL_13:.*]] = quake.extract_ref %[[VAL_5]]{{\[}}%[[VAL_11]]] : (!quake.veq<2>, i64) -> !quake.ref
// CHECK:             %[[VAL_14:.*]] = quake.unwrap %[[VAL_13]] : (!quake.ref) -> !quake.wire
// CHECK:             %[[VAL_15:.*]], %[[VAL_16:.*]] = quake.mz %[[VAL_14]] name "res" : (!quake.wire) -> (!quake.measure, !quake.wire)
// CHECK:             quake.wrap %[[VAL_16]] to %[[VAL_13]] : !quake.wire, !quake.ref
// CHECK:             %[[VAL_17:.*]] = quake.discriminate %[[VAL_15]] : (!quake.measure) -> i1
// CHECK:             %[[VAL_18:.*]] = arith.cmpi eq, %[[VAL_17]], %[[VAL_0]] : i1
// CHECK:             cc.if(%[[VAL_18]]) {
// CHECK:               %[[VAL_19:.*]] = quake.mz %[[VAL_5]] name "inner_mz" : (!quake.veq<2>) -> !cc.stdvec<!quake.measure>
// CHECK:               %[[VAL_20:.*]] = quake.discriminate %[[VAL_19]] : (!cc.stdvec<!quake.measure>) -> !cc.stdvec<i1>
// CHECK:               cc.scope {
// CHECK:                 %[[VAL_21:.*]] = cc.undef !cc.stdvec<i1>
// CHECK:               }
// CHECK:             } else {
// CHECK:             }
// CHECK:             cc.continue %[[VAL_11]], %[[VAL_17]] : i64, i1
// CHECK:           } step {
// CHECK:           ^bb0(%[[VAL_22:.*]]: i64, %[[VAL_23:.*]]: i1):
// CHECK:             %[[VAL_24:.*]] = arith.addi %[[VAL_22]], %[[VAL_1]] : i64
// CHECK:             cc.continue %[[VAL_24]], %[[VAL_23]] : i64, i1
// CHECK:           } {invariant}
// CHECK:           %[[VAL_25:.*]] = arith.cmpi eq, %[[VAL_26:.*]]#1, %[[VAL_3]] : i1
// CHECK:           cc.if(%[[VAL_25]]) {
// CHECK:             %[[VAL_27:.*]] = quake.mz %[[VAL_5]] name "outer_mz" : (!quake.veq<2>) -> !cc.stdvec<!quake.measure>
// CHECK:             %[[VAL_28:.*]] = quake.discriminate %[[VAL_27]] : (!cc.stdvec<!quake.measure>) -> !cc.stdvec<i1>
// CHECK:             cc.scope {
// CHECK:               %[[VAL_29:.*]] = cc.undef !cc.stdvec<i1>
// CHECK:             }
// CHECK:           } else {
// CHECK:           }
// CHECK:           return
// CHECK:         }

// CANOE-LABEL:   func.func @__nvqpp__mlirgen__test() attributes {"cudaq-entrypoint", qubitMeasurementFeedback = true} {
// CANOE:           %[[VAL_0:.*]] = arith.constant 2 : i64
// CANOE:           %[[VAL_1:.*]] = arith.constant false
// CANOE:           %[[VAL_2:.*]] = arith.constant true
// CANOE:           %[[VAL_3:.*]] = quake.alloca !quake.ref
// CANOE:           %[[VAL_4:.*]] = quake.alloca !quake.ref
// CANOE:           %[[VAL_5:.*]] = cc.undef i1
// CANOE:           %[[VAL_6:.*]] = quake.mz %[[VAL_3]] name "res" : (!quake.ref) -> !quake.measure
// CANOE:           %[[VAL_7:.*]] = quake.discriminate %[[VAL_6]] : (!quake.measure) -> i1
// CANOE:           %[[VAL_8:.*]] = arith.cmpi eq, %[[VAL_7]], %[[VAL_1]] : i1
// CANOE:           cc.if(%[[VAL_8]]) {
// CANOE:             %[[VAL_9:.*]] = cc.alloca !cc.array<i8 x 2>
// CANOE:             %[[VAL_10:.*]] = quake.mz %[[VAL_3]] name "inner_mz" : (!quake.ref) -> !quake.measure
// CANOE:             %[[VAL_11:.*]] = quake.discriminate %[[VAL_10]] : (!quake.measure) -> i1
// CANOE:             %[[VAL_12:.*]] = cc.cast %[[VAL_9]] : (!cc.ptr<!cc.array<i8 x 2>>) -> !cc.ptr<i8>
// CANOE:             %[[VAL_13:.*]] = cc.cast unsigned %[[VAL_11]] : (i1) -> i8
// CANOE:             cc.store %[[VAL_13]], %[[VAL_12]] : !cc.ptr<i8>
// CANOE:             %[[VAL_14:.*]] = quake.mz %[[VAL_4]] name "inner_mz" : (!quake.ref) -> !quake.measure
// CANOE:             %[[VAL_15:.*]] = quake.discriminate %[[VAL_14]] : (!quake.measure) -> i1
// CANOE:             %[[VAL_16:.*]] = cc.compute_ptr %[[VAL_9]][1] : (!cc.ptr<!cc.array<i8 x 2>>) -> !cc.ptr<i8>
// CANOE:             %[[VAL_17:.*]] = cc.cast unsigned %[[VAL_15]] : (i1) -> i8
// CANOE:             cc.store %[[VAL_17]], %[[VAL_16]] : !cc.ptr<i8>
// CANOE:             %[[VAL_18:.*]] = cc.cast %[[VAL_9]] : (!cc.ptr<!cc.array<i8 x 2>>) -> !cc.ptr<!cc.array<i1 x ?>>
// CANOE:             %[[VAL_19:.*]] = cc.stdvec_init %[[VAL_18]], %[[VAL_0]] : (!cc.ptr<!cc.array<i1 x ?>>, i64) -> !cc.stdvec<i1>
// CANOE:             cc.scope {
// CANOE:               %[[VAL_20:.*]] = cc.undef !cc.stdvec<i1>
// CANOE:             }
// CANOE:           } else {
// CANOE:           }
// CANOE:           %[[VAL_21:.*]] = quake.mz %[[VAL_4]] name "res" : (!quake.ref) -> !quake.measure
// CANOE:           %[[VAL_22:.*]] = quake.discriminate %[[VAL_21]] : (!quake.measure) -> i1
// CANOE:           %[[VAL_23:.*]] = arith.cmpi eq, %[[VAL_22]], %[[VAL_1]] : i1
// CANOE:           cc.if(%[[VAL_23]]) {
// CANOE:             %[[VAL_24:.*]] = cc.alloca !cc.array<i8 x 2>
// CANOE:             %[[VAL_25:.*]] = quake.mz %[[VAL_3]] name "inner_mz" : (!quake.ref) -> !quake.measure
// CANOE:             %[[VAL_26:.*]] = quake.discriminate %[[VAL_25]] : (!quake.measure) -> i1
// CANOE:             %[[VAL_27:.*]] = cc.cast %[[VAL_24]] : (!cc.ptr<!cc.array<i8 x 2>>) -> !cc.ptr<i8>
// CANOE:             %[[VAL_28:.*]] = cc.cast unsigned %[[VAL_26]] : (i1) -> i8
// CANOE:             cc.store %[[VAL_28]], %[[VAL_27]] : !cc.ptr<i8>
// CANOE:             %[[VAL_29:.*]] = quake.mz %[[VAL_4]] name "inner_mz" : (!quake.ref) -> !quake.measure
// CANOE:             %[[VAL_30:.*]] = quake.discriminate %[[VAL_29]] : (!quake.measure) -> i1
// CANOE:             %[[VAL_31:.*]] = cc.compute_ptr %[[VAL_24]][1] : (!cc.ptr<!cc.array<i8 x 2>>) -> !cc.ptr<i8>
// CANOE:             %[[VAL_32:.*]] = cc.cast unsigned %[[VAL_30]] : (i1) -> i8
// CANOE:             cc.store %[[VAL_32]], %[[VAL_31]] : !cc.ptr<i8>
// CANOE:             %[[VAL_33:.*]] = cc.cast %[[VAL_24]] : (!cc.ptr<!cc.array<i8 x 2>>) -> !cc.ptr<!cc.array<i1 x ?>>
// CANOE:             %[[VAL_34:.*]] = cc.stdvec_init %[[VAL_33]], %[[VAL_0]] : (!cc.ptr<!cc.array<i1 x ?>>, i64) -> !cc.stdvec<i1>
// CANOE:             cc.scope {
// CANOE:               %[[VAL_35:.*]] = cc.undef !cc.stdvec<i1>
// CANOE:             }
// CANOE:           } else {
// CANOE:           }
// CANOE:           %[[VAL_36:.*]] = arith.cmpi eq, %[[VAL_22]], %[[VAL_2]] : i1
// CANOE:           cc.if(%[[VAL_36]]) {
// CANOE:             %[[VAL_37:.*]] = cc.alloca !cc.array<i8 x 2>
// CANOE:             %[[VAL_38:.*]] = quake.mz %[[VAL_3]] name "outer_mz" : (!quake.ref) -> !quake.measure
// CANOE:             %[[VAL_39:.*]] = quake.discriminate %[[VAL_38]] : (!quake.measure) -> i1
// CANOE:             %[[VAL_40:.*]] = cc.cast %[[VAL_37]] : (!cc.ptr<!cc.array<i8 x 2>>) -> !cc.ptr<i8>
// CANOE:             %[[VAL_41:.*]] = cc.cast unsigned %[[VAL_39]] : (i1) -> i8
// CANOE:             cc.store %[[VAL_41]], %[[VAL_40]] : !cc.ptr<i8>
// CANOE:             %[[VAL_42:.*]] = quake.mz %[[VAL_4]] name "outer_mz" : (!quake.ref) -> !quake.measure
// CANOE:             %[[VAL_43:.*]] = quake.discriminate %[[VAL_42]] : (!quake.measure) -> i1
// CANOE:             %[[VAL_44:.*]] = cc.compute_ptr %[[VAL_37]][1] : (!cc.ptr<!cc.array<i8 x 2>>) -> !cc.ptr<i8>
// CANOE:             %[[VAL_45:.*]] = cc.cast unsigned %[[VAL_43]] : (i1) -> i8
// CANOE:             cc.store %[[VAL_45]], %[[VAL_44]] : !cc.ptr<i8>
// CANOE:             %[[VAL_46:.*]] = cc.cast %[[VAL_37]] : (!cc.ptr<!cc.array<i8 x 2>>) -> !cc.ptr<!cc.array<i1 x ?>>
// CANOE:             %[[VAL_47:.*]] = cc.stdvec_init %[[VAL_46]], %[[VAL_0]] : (!cc.ptr<!cc.array<i1 x ?>>, i64) -> !cc.stdvec<i1>
// CANOE:             cc.scope {
// CANOE:               %[[VAL_48:.*]] = cc.undef !cc.stdvec<i1>
// CANOE:             }
// CANOE:           } else {
// CANOE:           }
// CANOE:           return
// CANOE:         }

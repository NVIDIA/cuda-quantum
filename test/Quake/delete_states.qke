// ========================================================================== //
// Copyright (c) 2022 - 2024 NVIDIA Corporation & Affiliates.                 //
// All rights reserved.                                                       //
//                                                                            //
// This source code and the accompanying materials are made available under   //
// the terms of the Apache License 2.0 which accompanies this distribution.   //
// ========================================================================== //

// RUN: cudaq-opt -delete-states -canonicalize %s | FileCheck %s

module {
  func.func @__nvqpp__mlirgen__function_test_state_param._Z16test_state_paramPN5cudaq5stateE() attributes {"cudaq-entrypoint", "cudaq-kernel", no_this} {
    %c8_i64 = arith.constant 8 : i64
    %0 = cc.address_of @function_test_state_param._Z16test_state_paramPN5cudaq5stateE.rodata_synth_0 : !cc.ptr<!cc.array<complex<f32> x 8>>
    %1 = cc.create_state %0, %c8_i64 : (!cc.ptr<!cc.array<complex<f32> x 8>>, i64) -> !cc.ptr<!cc.state>
    %2 = cc.get_number_of_qubits %1 : (!cc.ptr<!cc.state>) -> i64
    %3 = quake.alloca !quake.veq<?>[%2 : i64]
    %4 = quake.init_state %3, %1 : (!quake.veq<?>, !cc.ptr<!cc.state>) -> !quake.veq<?>
    return
  }
  cc.global constant private @function_test_state_param._Z16test_state_paramPN5cudaq5stateE.rodata_synth_0 (dense<[(0.707106769,0.000000e+00), (0.707106769,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00)]> : tensor<8xcomplex<f32>>) : !cc.array<complex<f32> x 8>

// CHECK-LABEL:   func.func @__nvqpp__mlirgen__function_test_state_param._Z16test_state_paramPN5cudaq5stateE() attributes {"cudaq-entrypoint", "cudaq-kernel", no_this} {
// CHECK:           %[[VAL_0:.*]] = cc.address_of @function_test_state_param._Z16test_state_paramPN5cudaq5stateE.rodata_synth_0 : !cc.ptr<!cc.array<complex<f32> x 8>>
// CHECK:           %[[VAL_1:.*]] = quake.alloca !quake.veq<3>
// CHECK:           %[[VAL_2:.*]] = quake.init_state %[[VAL_1]], %[[VAL_0]] : (!quake.veq<3>, !cc.ptr<!cc.array<complex<f32> x 8>>) -> !quake.veq<3>
// CHECK:           return
// CHECK:         }
// CHECK-DAG:    cc.global constant private @function_test_state_param._Z16test_state_paramPN5cudaq5stateE.rodata_synth_0 (dense<[(0.707106769,0.000000e+00), (0.707106769,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00)]> : tensor<8xcomplex<f32>>) : !cc.array<complex<f32> x 8>

  func.func @__nvqpp__mlirgen__sub_kernel(%arg : !cc.ptr<!cc.state>) attributes {"cudaq-kernel", no_this} {
    %0 = cc.get_number_of_qubits %arg : (!cc.ptr<!cc.state>) -> i64
    %1 = quake.alloca !quake.veq<?>[%0 : i64]
    %2 = quake.init_state %1, %arg : (!quake.veq<?>, !cc.ptr<!cc.state>) -> !quake.veq<?>
    return
  }

  func.func @__nvqpp__mlirgen__function_test_state_param1._Z16test_state_paramPN5cudaq5stateE() attributes {"cudaq-entrypoint", "cudaq-kernel", no_this} {
    %c8_i64 = arith.constant 8 : i64
    %0 = cc.address_of @function_test_state_param1._Z16test_state_paramPN5cudaq5stateE.rodata_synth_0 : !cc.ptr<!cc.array<complex<f32> x 8>>
    %1 = cc.create_state %0, %c8_i64 : (!cc.ptr<!cc.array<complex<f32> x 8>>, i64) -> !cc.ptr<!cc.state>
    call @__nvqpp__mlirgen__sub_kernel(%1) : (!cc.ptr<!cc.state>) -> ()
    return
  }

  cc.global constant private @function_test_state_param1._Z16test_state_paramPN5cudaq5stateE.rodata_synth_0 (dense<[(0.707106769,0.000000e+00), (0.707106769,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00
,0.000000e+00), (0.000000e+00,0.000000e+00)]> : tensor<8xcomplex<f32>>) : !cc.array<complex<f32> x 8>

// CHECK:         func.func @__nvqpp__mlirgen__sub_kernel(%arg0: !cc.ptr<!cc.state>) attributes {"cudaq-kernel", no_this} {
// CHECK:           %[[VAL_0:.*]] = cc.get_number_of_qubits %arg0 : (!cc.ptr<!cc.state>) -> i64
// CHECK:           %[[VAL_1:.*]] = quake.alloca !quake.veq<?>[%[[VAL_0]] : i64]
// CHECK:           %[[VAL_2:.*]] = quake.init_state %[[VAL_1]], %arg0 : (!quake.veq<?>, !cc.ptr<!cc.state>) -> !quake.veq<?>
// CHECK:           return
// CHECK:         }
// CHECK:         func.func @__nvqpp__mlirgen__function_test_state_param1._Z16test_state_paramPN5cudaq5stateE() attributes {"cudaq-entrypoint", "cudaq-kernel", no_this} {
// CHECK:           %[[VAL_0:.*]] = arith.constant 8 : i64
// CHECK:           %[[VAL_1:.*]] = cc.address_of @function_test_state_param1._Z16test_state_paramPN5cudaq5stateE.rodata_synth_0 : !cc.ptr<!cc.array<complex<f32> x 8>>
// CHECK:           %[[VAL_2:.*]] = cc.create_state %[[VAL_1]], %[[VAL_0]] : (!cc.ptr<!cc.array<complex<f32> x 8>>, i64) -> !cc.ptr<!cc.state>
// CHECK:           call @__nvqpp__mlirgen__sub_kernel(%[[VAL_2]]) : (!cc.ptr<!cc.state>) -> ()
// CHECK:           call @__nvqpp_cudaq_state_delete(%[[VAL_2]]) : (!cc.ptr<!cc.state>) -> ()
// CHECK:           return
// CHECK:         }
// CHECK-DAG:     cc.global constant private @function_test_state_param1._Z16test_state_paramPN5cudaq5stateE.rodata_synth_0 (dense<[(0.707106769,0.000000e+00), (0.707106769,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00), (0.000000e+00,0.000000e+00)]> : tensor<8xcomplex<f32>>) : !cc.array<complex<f32> x 8>
// CHECK-DAG:     func.func private @__nvqpp_cudaq_state_delete(!cc.ptr<!cc.state>)
}

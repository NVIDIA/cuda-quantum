// ========================================================================== //
// Copyright (c) 2022 - 2023 NVIDIA Corporation & Affiliates.                 //
// All rights reserved.                                                       //
//                                                                            //
// This source code and the accompanying materials are made available under   //
// the terms of the Apache License 2.0 which accompanies this distribution.   //
// ========================================================================== //

// RUN: cudaq-opt --canonicalize %s | FileCheck %s

func.func @test1(%arg0 : !quake.qvec<?>) -> i1 {
  %true = arith.constant true
  return %true : i1
}

func.func @test2() {
  %0 = arith.constant 10 : i64
  %1 = quake.alloca[%0 : i64] !quake.qvec<?>
  // relax_size must be inserted here
  %2 = call @test1(%1) : (!quake.qvec<?>) -> i1
  %3 = arith.constant 1 : i64
  %4 = quake.extract_ref %1[%3] : (!quake.qvec<?>,i64) -> !quake.ref
  quake.h %4 : (!quake.ref) -> ()
  return
}

// CHECK-LABEL:   func.func @test2() {
// CHECK:           %[[VAL_0:.*]] = arith.constant 1 : i64
// CHECK:           %[[VAL_1:.*]] = quake.alloca !quake.qvec<10>
// CHECK:           %[[VAL_2:.*]] = quake.relax_size %[[VAL_1]] : (!quake.qvec<10>) -> !quake.qvec<?>
// CHECK:           %[[VAL_3:.*]] = call @test1(%[[VAL_2]]) : (!quake.qvec<?>) -> i1
// CHECK:           %[[VAL_4:.*]] = quake.extract_ref %[[VAL_1]][%[[VAL_0]]] : (!quake.qvec<10>, i64) -> !quake.ref
// CHECK:           quake.h %[[VAL_4]]
// CHECK:           return
// CHECK:         }

func.func @test3() {
  %0 = arith.constant 10 : i64
  %1 = quake.alloca [%0 : i64] !quake.qvec<?>
  %2 = arith.constant 4 : i64
  %3 = arith.constant 7 : i64
  // This subvec qvec<?> can be reified to qvec<4>
  %4 = quake.subvec %1, %2, %3 : (!quake.qvec<?>, i64, i64) -> !quake.qvec<?>
  %5 = arith.constant 2 : i64
  %6 = quake.extract_ref %4[%5] : (!quake.qvec<?>,i64) -> !quake.ref
  quake.h %6 : (!quake.ref) -> ()
  return
}

// CHECK-LABEL:   func.func @test3() {
// CHECK:           %[[VAL_0:.*]] = arith.constant 2 : i64
// CHECK:           %[[VAL_1:.*]] = arith.constant 7 : i64
// CHECK:           %[[VAL_2:.*]] = arith.constant 4 : i64
// CHECK:           %[[VAL_3:.*]] = quake.alloca !quake.qvec<10>
// CHECK:           %[[VAL_4:.*]] = quake.subvec %[[VAL_3]], %[[VAL_2]], %[[VAL_1]] : (!quake.qvec<10>, i64, i64) -> !quake.qvec<4>
// CHECK:           %[[VAL_5:.*]] = quake.extract_ref %[[VAL_4]]{{\[}}%[[VAL_0]]] : (!quake.qvec<4>, i64) -> !quake.ref
// CHECK:           quake.h %[[VAL_5]] : (!quake.ref) -> ()
// CHECK:           return
// CHECK:         }

func.func @test_qextract_1() {
    %c0 = arith.constant 0 : i64
    %c2 = arith.constant 2 : i64
    %qvec = quake.alloca [%c2 : i64] !quake.qvec<?>
    %0 = quake.extract_ref %qvec[%c0] : (!quake.qvec<?>, i64) -> !quake.ref
    quake.h %0 : (!quake.ref) -> ()
    %c0_0 = arith.constant 0 : i64
    %c1 = arith.constant 1 : i64
    %1 = quake.extract_ref %qvec[%c0_0] : (!quake.qvec<?>, i64) -> !quake.ref
    %2 = quake.extract_ref %qvec[%c1] : (!quake.qvec<?>, i64) -> !quake.ref
    quake.x [%1] %2 : (!quake.ref, !quake.ref) -> ()
    return
}

// CHECK-LABEL:   func.func @test_qextract_1() {
// CHECK:           %[[VAL_0:.*]] = arith.constant 1 : i64
// CHECK:           %[[VAL_1:.*]] = arith.constant 0 : i64
// CHECK:           %[[VAL_2:.*]] = quake.alloca !quake.qvec<2>
// CHECK:           %[[VAL_3:.*]] = quake.extract_ref %[[VAL_2]]{{\[}}%[[VAL_1]]] : (!quake.qvec<2>, i64) -> !quake.ref
// CHECK:           quake.h %[[VAL_3]] : (!quake.ref) -> ()
// CHECK:           %[[VAL_4:.*]] = quake.extract_ref %[[VAL_2]]{{\[}}%[[VAL_0]]] : (!quake.qvec<2>, i64) -> !quake.ref
// CHECK:           quake.x [%[[VAL_3]]] %[[VAL_4]] : (!quake.ref, !quake.ref) -> ()
// CHECK:           return
// CHECK:         }

func.func @test_qextract_2(%arg0: i1) {
    %c0 = arith.constant 0 : i64
    %c2 = arith.constant 2 : i64
    %c1 = arith.constant 1 : i64
    %qvec = quake.alloca[%c2 : i64]  !quake.qvec<?>
    %0 = quake.extract_ref %qvec[%c0] : (!quake.qvec<?>,i64) -> !quake.ref
    quake.h %0 : (!quake.ref) -> ()
    cc.if(%arg0) {
      cc.scope {
        %1 = quake.extract_ref %qvec[%c0] : (!quake.qvec<?>,i64) -> !quake.ref
        %2 = quake.extract_ref %qvec[%c1] : (!quake.qvec<?>,i64) -> !quake.ref
        quake.x [%1] %2 : (!quake.ref,!quake.ref) -> ()
      }
    }
    %3 = quake.extract_ref %qvec[%c0] : (!quake.qvec<?>,i64) -> !quake.ref
    %4 = quake.extract_ref %qvec[%c1] : (!quake.qvec<?>,i64) -> !quake.ref
    quake.x [%3] %4 : (!quake.ref,!quake.ref) -> ()
    return
}

// CHECK-LABEL:   func.func @test_qextract_2(
// CHECK-SAME:                               %[[VAL_0:.*]]: i1) {
// CHECK:           %[[VAL_1:.*]] = arith.constant 0 : i64
// CHECK:           %[[VAL_2:.*]] = arith.constant 1 : i64
// CHECK:           %[[VAL_3:.*]] = quake.alloca !quake.qvec<2>
// CHECK:           %[[VAL_4:.*]] = quake.extract_ref %[[VAL_3]][%[[VAL_1]]] : (!quake.qvec<2>, i64) -> !quake.ref
// CHECK:           quake.h %[[VAL_4]] :
// CHECK:           cc.if(%[[VAL_0]]) {
// CHECK:             %[[VAL_5:.*]] = quake.extract_ref %[[VAL_3]]{{\[}}%[[VAL_1]]] : (!quake.qvec<2>, i64) -> !quake.ref
// CHECK:             %[[VAL_6:.*]] = quake.extract_ref %[[VAL_3]]{{\[}}%[[VAL_2]]] : (!quake.qvec<2>, i64) -> !quake.ref
// CHECK:             quake.x [%[[VAL_5]]] %[[VAL_6]] :
// CHECK:           }
// CHECK:           %[[VAL_7:.*]] = quake.extract_ref %[[VAL_3]]{{\[}}%[[VAL_2]]] : (!quake.qvec<2>, i64) -> !quake.ref
// CHECK:           quake.x [%[[VAL_4]]] %[[VAL_7]] :
// CHECK:           return
// CHECK:         }

// ========================================================================== //
// Copyright (c) 2022 - 2025 NVIDIA Corporation & Affiliates.                 //
// All rights reserved.                                                       //
//                                                                            //
// This source code and the accompanying materials are made available under   //
// the terms of the Apache License 2.0 which accompanies this distribution.   //
// ========================================================================== //

// RUN: cudaq-opt -replace-state-with-kernel -canonicalize %s | FileCheck %s

module {

  func.func private @callee.num_qubits_0() -> i64 {
    %cst = arith.constant 2 : i64
    return %cst : i64
  }

  func.func private @callee.init_0(%arg0: !quake.veq<?>) -> !quake.veq<?> {
    %cst = arith.constant 1.5707963267948966 : f64
    %1 = quake.extract_ref %arg0[0] : (!quake.veq<?>) -> !quake.ref
    quake.ry (%cst) %1 : (f64, !quake.ref) -> ()
    return %arg0: !quake.veq<?>
  }

  func.func @caller0() {
    %0 = quake.materialize_state @callee.num_qubits_0, @callee.init_0 : !cc.ptr<!quake.state>
    %1 = quake.get_number_of_qubits %0 : (!cc.ptr<!quake.state>) -> i64
    %2 = quake.alloca !quake.veq<?>[%1 : i64]
    %3 = quake.init_state %2, %0 : (!quake.veq<?>, !cc.ptr<!quake.state>) -> !quake.veq<?>
    return
  }

// CHECK-LABEL:   func.func @caller0() {
// CHECK:           %[[VAL_0:.*]] = call @callee.num_qubits_0() : () -> i64
// CHECK:           %[[VAL_1:.*]] = quake.alloca !quake.veq<?>[%[[VAL_0]] : i64]
// CHECK:           %[[VAL_2:.*]] = call @callee.init_0(%[[VAL_1]]) : (!quake.veq<?>) -> !quake.veq<?>
// CHECK:           return
// CHECK:         }

  func.func @caller1(%arg0: i64) {
    %0 = quake.materialize_state @callee.num_qubits_0, @callee.init_0 : !cc.ptr<!quake.state>
    %2 = quake.alloca !quake.veq<?>[%arg0 : i64]
    %3 = quake.init_state %2, %0 : (!quake.veq<?>, !cc.ptr<!quake.state>) -> !quake.veq<?>
    return
  }

// CHECK-LABEL:   func.func @caller1(%arg0: i64) {
// CHECK:           %[[VAL_1:.*]] = quake.alloca !quake.veq<?>[%arg0 : i64]
// CHECK:           %[[VAL_2:.*]] = call @callee.init_0(%[[VAL_1]]) : (!quake.veq<?>) -> !quake.veq<?>
// CHECK:           return
// CHECK:         }

  func.func @caller2() -> i64 {
    %0 = quake.materialize_state @callee.num_qubits_0, @callee.init_0 : !cc.ptr<!quake.state>
    %1 = quake.get_number_of_qubits %0 : (!cc.ptr<!quake.state>) -> i64
    return %1: i64
  }

// CHECK-LABEL:   func.func @caller2() -> i64 {
// CHECK:           %[[VAL_0:.*]] = call @callee.num_qubits_0() : () -> i64
// CHECK:           return %[[VAL_0]] : i64
// CHECK:         }
}

// ========================================================================== //
// Copyright (c) 2022 - 2025 NVIDIA Corporation & Affiliates.                 //
// All rights reserved.                                                       //
//                                                                            //
// This source code and the accompanying materials are made available under   //
// the terms of the Apache License 2.0 which accompanies this distribution.   //
// ========================================================================== //

// RUN: cudaq-opt --memtoreg %s | FileCheck %s

func.func @__nvqpp__mlirgen__dummy() {
    %c1_i32 = arith.constant 1 : i32
    %true = arith.constant true
    %c0_i32 = arith.constant 0 : i32
    %0 = quake.alloca !quake.ref
    %1 = cc.alloca i32
    cc.store %c0_i32, %1 : !cc.ptr<i32>
    cc.if(%true) {
      quake.x %0 : (!quake.ref) -> ()
      cc.store %c1_i32, %1 : !cc.ptr<i32>
    }
    quake.dealloc %0 : !quake.ref
    return
}

// CHECK-LABEL:   func.func @__nvqpp__mlirgen__dummy()
// CHECK-DAG:       %[[VAL_0:.*]] = arith.constant 1 : i32
// CHECK-DAG:       %[[VAL_1:.*]] = arith.constant true
// CHECK-DAG:       %[[VAL_2:.*]] = arith.constant 0 : i32
// CHECK-DAG:       %[[VAL_3:.*]] = quake.null_wire
// CHECK-DAG:       %[[VAL_4:.*]] = cc.undef i32
// CHECK:           %[[VAL_5:.*]]:2 = cc.if(%[[VAL_1]]) ((%[[VAL_6:.*]] = %[[VAL_3]])) -> (!quake.wire, i32) {
// CHECK:             %[[VAL_7:.*]] = quake.x %[[VAL_6]] : (!quake.wire) -> !quake.wire
// CHECK:             cc.continue %[[VAL_7]], %[[VAL_0]] : !quake.wire, i32
// CHECK:           } else {
// CHECK:             cc.continue %[[VAL_6]], %[[VAL_2]] : !quake.wire, i32
// CHECK:           }
// CHECK:           quake.sink %[[VAL_5]]#0 : !quake.wire
// CHECK:           return
// CHECK:         }

func.func @test_2(%arg0: !quake.veq<?>, %arg1: !quake.veq<?>, %arg2: !quake.veq<?>, %arg3: i64, %arg4: !cc.stdvec<i64>, %arg5: !cc.stdvec<i64>, %arg6: i1, %arg7: i1, %arg8: f64, %arg9: !cc.stdvec<i64>, %arg10: i32) attributes {"cudaq-kernel", no_this} {
  %false = arith.constant false
  %cst = arith.constant 0.000000e+00 : f64
  %c1_i64 = arith.constant 1 : i64
  %c0_i64 = arith.constant 0 : i64
  %0 = cc.alloca i64
  %1 = cc.alloca i64
  %2 = cc.alloca i64
  %3 = cc.alloca i64
  %4 = cc.alloca i64
  cc.store %arg3, %4 : !cc.ptr<i64>
  %5 = cc.alloca i1
  cc.store %arg6, %5 : !cc.ptr<i1>
  %6 = cc.alloca i1
  cc.store %arg7, %6 : !cc.ptr<i1>
  %7 = cc.alloca f64
  cc.store %arg8, %7 : !cc.ptr<f64>
  %8 = cc.alloca i32
  cc.store %arg10, %8 : !cc.ptr<i32>
  %9 = quake.make_struq %arg0, %arg1, %arg2 : (!quake.veq<?>, !quake.veq<?>, !quake.veq<?>) -> !quake.struq<!quake.veq<?>, !quake.veq<?>, !quake.veq<?>>
    cc.store %c0_i64, %3 : !cc.ptr<i64>
    cc.loop while {
      %10 = cc.load %3 : !cc.ptr<i64>
      %11 = cc.load %4 : !cc.ptr<i64>
      %12 = arith.cmpi ult, %10, %11 : i64
      cc.condition %12
    } do {
      cc.scope {
        %10 = func.call @test_2.a(%9, %arg5) : (!quake.struq<!quake.veq<?>, !quake.veq<?>, !quake.veq<?>>, !cc.stdvec<i64>) -> !cc.stdvec<i1>
        %11 = cc.stdvec_data %10 : (!cc.stdvec<i1>) -> !cc.ptr<i8>
        %12 = cc.stdvec_size %10 : (!cc.stdvec<i1>) -> i64
        %13 = cc.alloca i8[%12 : i64]
        %14 = cc.cast %13 : (!cc.ptr<!cc.array<i8 x ?>>) -> !cc.ptr<i8>
        func.call @test_2.b(%14, %11, %12) : (!cc.ptr<i8>, !cc.ptr<i8>, i64) -> ()
        %15 = cc.stdvec_init %13, %12 : (!cc.ptr<!cc.array<i8 x ?>>, i64) -> !cc.stdvec<i1>
        %16 = func.call @test_2.c(%9, %arg4) : (!quake.struq<!quake.veq<?>, !quake.veq<?>, !quake.veq<?>>, !cc.stdvec<i64>) -> !cc.stdvec<i1>
        %17 = cc.stdvec_data %16 : (!cc.stdvec<i1>) -> !cc.ptr<i8>
        %18 = cc.stdvec_size %16 : (!cc.stdvec<i1>) -> i64
        %19 = cc.alloca i8[%18 : i64]
        %20 = cc.cast %19 : (!cc.ptr<!cc.array<i8 x ?>>) -> !cc.ptr<i8>
        func.call @test_2.b(%20, %17, %18) : (!cc.ptr<i8>, !cc.ptr<i8>, i64) -> ()
        %21 = cc.stdvec_init %19, %18 : (!cc.ptr<!cc.array<i8 x ?>>, i64) -> !cc.stdvec<i1>
        %22 = func.call @test_2.d(%15) : (!cc.stdvec<i1>) -> i64
        cc.store %22, %3 : !cc.ptr<i64>
        %23 = func.call @test_2.d(%21) : (!cc.stdvec<i1>) -> i64
        cc.store %23, %2 : !cc.ptr<i64>
        %24 = cc.load %2 : !cc.ptr<i64>
        %25 = arith.shli %24, %12 : i64
        %26 = cc.load %3 : !cc.ptr<i64>
        %27 = arith.ori %25, %26 : i64
        cc.store %27, %1 : !cc.ptr<i64>
        %28 = cc.load %1 : !cc.ptr<i64>
        %29 = cc.load %8 : !cc.ptr<i32>
        %30 = cc.cast signed %29 : (i32) -> i64
        %31 = cc.stdvec_data %arg9 : (!cc.stdvec<i64>) -> !cc.ptr<!cc.array<i64 x ?>>
        %32 = cc.compute_ptr %31[%30] : (!cc.ptr<!cc.array<i64 x ?>>, i64) -> !cc.ptr<i64>
        %33 = cc.load %32 : !cc.ptr<i64>
        %34 = arith.xori %28, %33 : i64
        cc.store %34, %0 : !cc.ptr<i64>
        %35 = cc.load %5 : !cc.ptr<i1>
        cc.if(%35) {
          %44 = cc.load %8 : !cc.ptr<i32>
          %45 = cc.cast signed %44 : (i32) -> i64
          %46 = cc.load %3 : !cc.ptr<i64>
          %47 = cc.load %4 : !cc.ptr<i64>
          %48 = arith.subi %47, %c1_i64 : i64
          %49 = arith.cmpi eq, %46, %48 : i64
          %50 = arith.addi %12, %18 : i64
          %51 = cc.load %0 : !cc.ptr<i64>
          func.call @test_2.e(%45, %49, %false, %50, %51) : (i64, i1, i1, i64, i64) -> ()
        }
        %36 = cc.load %8 : !cc.ptr<i32>
        %37 = cc.cast signed %36 : (i32) -> i64
        %38 = cc.stdvec_data %arg9 : (!cc.stdvec<i64>) -> !cc.ptr<!cc.array<i64 x ?>>
        %39 = cc.compute_ptr %38[%37] : (!cc.ptr<!cc.array<i64 x ?>>, i64) -> !cc.ptr<i64>
        %40 = cc.load %1 : !cc.ptr<i64>
        cc.store %40, %39 : !cc.ptr<i64>
        %41 = cc.load %6 : !cc.ptr<i1>
        %42 = arith.cmpi eq, %41, %false : i1
        %43 = cc.if(%42) -> i1 {
          cc.continue %false : i1
        } else {
          %44 = cc.load %3 : !cc.ptr<i64>
          %45 = cc.load %4 : !cc.ptr<i64>
          %46 = arith.subi %45, %c1_i64 : i64
          %47 = arith.cmpi ult, %44, %46 : i64
          cc.continue %47 : i1
        }
        cc.if(%43) {
          %44 = cc.load %7 : !cc.ptr<f64>
          func.call @test_2.f(%9, %44, %cst, %cst) : (!quake.struq<!quake.veq<?>, !quake.veq<?>, !quake.veq<?>>, f64, f64, f64) -> ()
        }
      }
      cc.continue
    } step {
      %10 = cc.load %3 : !cc.ptr<i64>
      %11 = arith.addi %10, %c1_i64 : i64
      cc.store %11, %3 : !cc.ptr<i64>
    }
  return
}

func.func private @test_2.a(!quake.struq<!quake.veq<?>, !quake.veq<?>, !quake.veq<?>>, !cc.stdvec<i64>) -> !cc.stdvec<i1>
func.func private @test_2.b(!cc.ptr<i8>, !cc.ptr<i8>, i64) -> ()
func.func private @test_2.c(!quake.struq<!quake.veq<?>, !quake.veq<?>, !quake.veq<?>>, !cc.stdvec<i64>) -> !cc.stdvec<i1>
func.func private @test_2.d(!cc.stdvec<i1>) -> i64
func.func private @test_2.e(i64, i1, i1, i64, i64) -> ()
func.func private @test_2.f(!quake.struq<!quake.veq<?>, !quake.veq<?>, !quake.veq<?>>, f64, f64, f64) -> ()

// CHECK-LABEL:   func.func @test_2(
// CHECK:           %[[VAL_25:.*]]:4 = cc.loop while ((%[[VAL_26:.*]] = %{{.*}}, %[[VAL_27:.*]] = %{{.*}}, %[[VAL_28:.*]] = %{{.*}}, %[[VAL_29:.*]] = %{{.*}}) -> (i64, i64, i64, i64)) {
// CHECK:             %[[VAL_30:.*]] = arith.cmpi ult, %[[VAL_26]], %{{.*}} : i64
// CHECK:             cc.condition %[[VAL_30]](%[[VAL_26]], %[[VAL_27]], %[[VAL_28]], %[[VAL_29]] : i64, i64, i64, i64)
// CHECK:           } do {
// CHECK:           ^bb0(%[[VAL_31:.*]]: i64, %[[VAL_32:.*]]: i64, %[[VAL_33:.*]]: i64, %[[VAL_34:.*]]: i64):
// CHECK:             %[[VAL_35:.*]]:4 = cc.scope -> (i64, i64, i64, i64) {
// CHECK:               cc.if(%[[VAL_68:.*]]) {
// CHECK:                 func.call @test_2.f(%{{.*}}, %{{.*}}, %{{.*}}, %{{.*}}) : (!quake.struq<!quake.veq<?>, !quake.veq<?>, !quake.veq<?>>, f64, f64, f64) -> ()
// CHECK:               } else {
// CHECK:               }
// CHECK:               cc.continue %{{.*}}, %{{.*}}, %{{.*}}, %{{.*}} : i64, i64, i64, i64
// CHECK:             }
// CHECK:             cc.continue %[[VAL_69:.*]]#0, %[[VAL_69]]#1, %[[VAL_69]]#2, %[[VAL_69]]#3 : i64, i64, i64, i64
// CHECK:           } step {
// CHECK:           ^bb0(%[[VAL_70:.*]]: i64, %[[VAL_71:.*]]: i64, %[[VAL_72:.*]]: i64, %[[VAL_73:.*]]: i64):
// CHECK:             %[[VAL_74:.*]] = arith.addi %[[VAL_70]], %{{.*}} : i64
// CHECK:             cc.continue %[[VAL_74]], %[[VAL_71]], %[[VAL_72]], %[[VAL_73]] : i64, i64, i64, i64
// CHECK:           }
// CHECK:           return
// CHECK:         }

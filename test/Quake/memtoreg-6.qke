// ========================================================================== //
// Copyright (c) 2022 - 2024 NVIDIA Corporation & Affiliates.                 //
// All rights reserved.                                                       //
//                                                                            //
// This source code and the accompanying materials are made available under   //
// the terms of the Apache License 2.0 which accompanies this distribution.   //
// ========================================================================== //

// RUN: cudaq-opt --memtoreg %s | FileCheck %s

func.func @__nvqpp__mlirgen__dummy() {
    %c1_i32 = arith.constant 1 : i32
    %true = arith.constant true
    %c0_i32 = arith.constant 0 : i32
    %0 = quake.alloca !quake.ref
    %1 = cc.alloca i32
    cc.store %c0_i32, %1 : !cc.ptr<i32>
    cc.if(%true) {
      quake.x %0 : (!quake.ref) -> ()
      cc.store %c1_i32, %1 : !cc.ptr<i32>
    }
    quake.dealloc %0 : !quake.ref
    return
}

// CHECK-LABEL:   func.func @__nvqpp__mlirgen__dummy()
// CHECK-DAG:       %[[VAL_0:.*]] = arith.constant 1 : i32
// CHECK-DAG:       %[[VAL_1:.*]] = arith.constant true
// CHECK-DAG:       %[[VAL_2:.*]] = arith.constant 0 : i32
// CHECK-DAG:       %[[VAL_3:.*]] = quake.null_wire
// CHECK-DAG:       %[[VAL_4:.*]] = cc.undef i32
// CHECK:           %[[VAL_5:.*]]:2 = cc.if(%[[VAL_1]]) ((%[[VAL_6:.*]] = %[[VAL_3]])) -> (!quake.wire, i32) {
// CHECK:             %[[VAL_7:.*]] = quake.x %[[VAL_6]] : (!quake.wire) -> !quake.wire
// CHECK:             cc.continue %[[VAL_7]], %[[VAL_0]] : !quake.wire, i32
// CHECK:           } else {
// CHECK:             cc.continue %[[VAL_6]], %[[VAL_2]] : !quake.wire, i32
// CHECK:           }
// CHECK:           quake.sink %[[VAL_5]]#0 : !quake.wire
// CHECK:           return
// CHECK:         }
// ========================================================================== //
// Copyright (c) 2022 - 2024 NVIDIA Corporation & Affiliates.                 //
// All rights reserved.                                                       //
//                                                                            //
// This source code and the accompanying materials are made available under   //
// the terms of the Apache License 2.0 which accompanies this distribution.   //
// ========================================================================== //

// RUN: cudaq-opt --assign-ids --dep-analysis %s | FileCheck %s

// This is tests mostly for scheduling

func.func @test1() attributes {"cudaq-kernel"} {
  %0 = quake.null_wire
  %1 = quake.null_wire
  %2 = quake.null_wire
  %3 = quake.h %2 : (!quake.wire) -> !quake.wire
  %4 = quake.x %3 : (!quake.wire) -> !quake.wire
  %5 = quake.y %4 : (!quake.wire) -> !quake.wire
  %6 = quake.h %1 : (!quake.wire) -> !quake.wire
  %7:2 = quake.x [%0] %6 : (!quake.wire, !quake.wire) -> (!quake.wire, !quake.wire)
  %8:2 = quake.x [%7#0] %5 : (!quake.wire, !quake.wire) -> (!quake.wire, !quake.wire)
  %9 = quake.z %7#1 : (!quake.wire) -> !quake.wire
  %10 = quake.y %9 : (!quake.wire) -> !quake.wire
  %11 = quake.x %10 : (!quake.wire) -> !quake.wire
  %measOut, %wires = quake.mz %11 : (!quake.wire) -> (!quake.measure, !quake.wire)
  quake.sink %8#0 : !quake.wire
  quake.sink %8#1 : !quake.wire
  quake.sink %wires : !quake.wire
  return
}

// CHECK-LABEL:   func.func @test1() attributes {"cudaq-kernel"} {
// CHECK:           %[[VAL_0:.*]] = quake.null_wire
// CHECK:           %[[VAL_1:.*]] = quake.null_wire
// CHECK-NOT:       foo
// CHECK-DAG:       %[[VAL_2:.*]] = quake.h %[[VAL_1]] : (!quake.wire) -> !quake.wire
// CHECK-DAG:       %[[VAL_3:.*]] = quake.h %[[VAL_0]] : (!quake.wire) -> !quake.wire
// CHECK-DAG:       %[[VAL_4:.*]] = quake.null_wire
// CHECK-NOT:       foo
// CHECK-DAG:       %[[VAL_5:.*]]:2 = quake.x [%[[VAL_4]]] %[[VAL_3]] : (!quake.wire, !quake.wire) -> (!quake.wire, !quake.wire)
// CHECK-DAG:       %[[VAL_6:.*]] = quake.x %[[VAL_2]] : (!quake.wire) -> !quake.wire
// CHECK-NOT:       foo
// CHECK-DAG:       %[[VAL_7:.*]] = quake.z %[[VAL_5]]#1 : (!quake.wire) -> !quake.wire
// CHECK-DAG:       %[[VAL_8:.*]] = quake.y %[[VAL_6]] : (!quake.wire) -> !quake.wire
// CHECK-NOT:       foo
// CHECK-DAG:       %[[VAL_9:.*]] = quake.y %[[VAL_7]] : (!quake.wire) -> !quake.wire
// CHECK-DAG:       %[[VAL_10:.*]]:2 = quake.x [%[[VAL_5]]#0] %[[VAL_8]] : (!quake.wire, !quake.wire) -> (!quake.wire, !quake.wire)
// CHECK:           %[[VAL_11:.*]] = quake.x %[[VAL_9]] : (!quake.wire) -> !quake.wire
// CHECK:           %[[VAL_112:.*]], %[[VAL_12:.*]] = quake.mz %[[VAL_11]] : (!quake.wire) -> (!quake.measure, !quake.wire)
// CHECK-DAG:       quake.sink %[[VAL_10]]#0 : !quake.wire
// CHECK-DAG:       quake.sink %[[VAL_10]]#1 : !quake.wire
// CHECK-DAG:       quake.sink %[[VAL_12]] : !quake.wire
// CHECK:           return
// CHECK:         }

func.func @test2() attributes {"cudaq-kernel"} {
  %0 = quake.null_wire
  %1 = quake.null_wire
  %2:2 = quake.x [%0] %1 : (!quake.wire, !quake.wire) -> (!quake.wire, !quake.wire)
  %3 = quake.h %2#1 : (!quake.wire) -> !quake.wire
  %4:2 = quake.x [%2#0] %3 : (!quake.wire, !quake.wire) -> (!quake.wire, !quake.wire)
  quake.sink %4#0 : !quake.wire
  quake.sink %4#1 : !quake.wire
  return
}

// CHECK-LABEL:   func.func @test2() attributes {"cudaq-kernel"} {
// CHECK-DAG:       %[[VAL_0:.*]] = quake.null_wire
// CHECK-DAG:       %[[VAL_1:.*]] = quake.null_wire
// CHECK:           %[[VAL_2:.*]]:2 = quake.x [%[[VAL_0]]] %[[VAL_1]] : (!quake.wire, !quake.wire) -> (!quake.wire, !quake.wire)
// CHECK:           %[[VAL_3:.*]] = quake.h %[[VAL_2]]#1 : (!quake.wire) -> !quake.wire
// CHECK:           %[[VAL_4:.*]]:2 = quake.x [%[[VAL_2]]#0] %[[VAL_3]] : (!quake.wire, !quake.wire) -> (!quake.wire, !quake.wire)
// CHECK-DAG:       quake.sink %[[VAL_4]]#0 : !quake.wire
// CHECK-DAG:       quake.sink %[[VAL_4]]#1 : !quake.wire
// CHECK:           return
// CHECK:         }

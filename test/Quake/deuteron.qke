// ========================================================================== //
// Copyright (c) 2022 - 2023 NVIDIA Corporation & Affiliates.                 //
// All rights reserved.                                                       //
//                                                                            //
// This source code and the accompanying materials are made available under   //
// the terms of the Apache License 2.0 which accompanies this distribution.   //
// ========================================================================== //

// RUN: cudaq-opt %s --canonicalize | FileCheck %s

// CHECK-LABEL:  func.func @ansatz(
// CHECK-SAME: %[[arg0:.*]]: f64) {
// CHECK:    %[[a0:.*]] = quake.alloca !quake.veq<2>
// CHECK:    %[[a1:.*]] = quake.extract_ref %[[a0]][0] : (!quake.veq<2>) -> !quake.ref
// CHECK:    %[[a2:.*]] = quake.extract_ref %[[a0]][1] : (!quake.veq<2>) -> !quake.ref
// CHECK:    quake.x %[[a1]]
// CHECK:    quake.ry (%[[arg0]]) %[[a2]] : (f64, !quake.ref) -> ()
// CHECK:    quake.x [%[[a2]]] %[[a1]] : (!quake.ref, !quake.ref) -> ()
// CHECK:    quake.mz %[[a1]] : (!quake.ref) -> !quake.measure
// CHECK:    quake.mz %[[a2]] : (!quake.ref) -> !quake.measure
// CHECK:    return
// CHECK:  }

module {
    func.func @ansatz(%theta : f64) {
        %0 = arith.constant 2 : i32
        %c_0 = arith.constant 0 : i32
        %c_1 = arith.constant 1 : i32
        %c_angle = arith.constant 0.59 : f64
        %qubits = quake.alloca !quake.veq<?>[ %0 : i32 ]
        %q0 = quake.extract_ref %qubits [%c_0] : (!quake.veq<?>,i32) -> !quake.ref
        %q1 = quake.extract_ref %qubits [%c_1] : (!quake.veq<?>,i32) -> !quake.ref

        quake.x %q0 : (!quake.ref) -> ()
        quake.ry (%theta) %q1  : (f64, !quake.ref) -> ()
        quake.x [%q1] %q0 : (!quake.ref, !quake.ref) -> ()
        %measurements0 = quake.mz %q0 : (!quake.ref) -> !quake.measure
        %measurements1 = quake.mz %q1 : (!quake.ref) -> !quake.measure
        return
    }
}

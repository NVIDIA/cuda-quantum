// ========================================================================== //
// Copyright (c) 2022 - 2024 NVIDIA Corporation & Affiliates.                 //
// All rights reserved.                                                       //
//                                                                            //
// This source code and the accompanying materials are made available under   //
// the terms of the Apache License 2.0 which accompanies this distribution.   //
// ========================================================================== //

// RUN: cudaq-opt -lift-array-value %s | FileCheck %s

func.func private @__nvqpp_vectorCopyCtor(%0: !cc.ptr<i8>, %1: i64, %2: i64) -> !cc.ptr<i8>

func.func @__nvqpp__mlirgen__function_custom_h_generator_1._Z20custom_h_generator_1v() -> !cc.stdvec<complex<f64>> attributes {"cudaq-entrypoint", "cudaq-kernel", no_this} {
  %cst = arith.constant -0.70710678118654757 : f64
  %c16_i64 = arith.constant 16 : i64
  %c4_i64 = arith.constant 4 : i64
  %cst_0 = arith.constant 0.70710678118654757 : f64
  %cst_1 = arith.constant 0.000000e+00 : f64
  %0 = complex.create %cst_0, %cst_1 : complex<f64>
  %1 = complex.create %cst_0, %cst_1 : complex<f64>
  %2 = complex.create %cst_0, %cst_1 : complex<f64>
  %3 = complex.create %cst, %cst_1 : complex<f64>
  %4 = cc.alloca !cc.array<complex<f64> x 4>
  %5 = cc.cast %4 : (!cc.ptr<!cc.array<complex<f64> x 4>>) -> !cc.ptr<complex<f64>>
  cc.store %0, %5 : !cc.ptr<complex<f64>>
  %6 = cc.compute_ptr %4[1] : (!cc.ptr<!cc.array<complex<f64> x 4>>) -> !cc.ptr<complex<f64>>
  cc.store %1, %6 : !cc.ptr<complex<f64>>
  %7 = cc.compute_ptr %4[2] : (!cc.ptr<!cc.array<complex<f64> x 4>>) -> !cc.ptr<complex<f64>>
  cc.store %2, %7 : !cc.ptr<complex<f64>>
  %8 = cc.compute_ptr %4[3] : (!cc.ptr<!cc.array<complex<f64> x 4>>) -> !cc.ptr<complex<f64>>
  cc.store %3, %8 : !cc.ptr<complex<f64>>
  %9 = cc.cast %4 : (!cc.ptr<!cc.array<complex<f64> x 4>>) -> !cc.ptr<i8>
  %10 = call @__nvqpp_vectorCopyCtor(%9, %c4_i64, %c16_i64) : (!cc.ptr<i8>, i64, i64) -> !cc.ptr<i8>
  %11 = cc.stdvec_init %10, %c4_i64 : (!cc.ptr<i8>, i64) -> !cc.stdvec<complex<f64>>
  return %11 : !cc.stdvec<complex<f64>>
}
  
// CHECK-LABEL:   func.func @__nvqpp__mlirgen__function_custom_h_generator_1._Z20custom_h_generator_1v() -> !cc.stdvec<complex<f64>> attributes {"cudaq-entrypoint", "cudaq-kernel", no_this} {
// CHECK:           %[[VAL_0:.*]] = arith.constant 16 : i64
// CHECK:           %[[VAL_1:.*]] = arith.constant 4 : i64
// CHECK:           %[[VAL_2:.*]] = cc.address_of @__nvqpp__mlirgen__function_custom_h_generator_1._Z20custom_h_generator_1v.rodata_{{[0-9]+}} : !cc.ptr<!cc.array<complex<f64> x 4>>
// CHECK:           %[[VAL_3:.*]] = cc.cast %[[VAL_2]] : (!cc.ptr<!cc.array<complex<f64> x 4>>) -> !cc.ptr<i8>
// CHECK:           %[[VAL_4:.*]] = call @__nvqpp_vectorCopyCtor(%[[VAL_3]], %[[VAL_1]], %[[VAL_0]]) : (!cc.ptr<i8>, i64, i64) -> !cc.ptr<i8>
// CHECK:           %[[VAL_5:.*]] = cc.stdvec_init %[[VAL_4]], %[[VAL_1]] : (!cc.ptr<i8>, i64) -> !cc.stdvec<complex<f64>>
// CHECK:           return %[[VAL_5]] : !cc.stdvec<complex<f64>>
// CHECK:         }

func.func @test2() -> !quake.veq<2> {
  %0 = cc.alloca !cc.array<f64 x 4>
  %1 = cc.compute_ptr %0[0] : (!cc.ptr<!cc.array<f64 x 4>>) -> !cc.ptr<f64>
  %2 = arith.constant 1.0 : f64
  cc.store %2, %1 : !cc.ptr<f64>
  %3 = cc.compute_ptr %0[1] : (!cc.ptr<!cc.array<f64 x 4>>) -> !cc.ptr<f64>
  %4 = arith.constant 2.0 : f64
  cc.store %4, %3 : !cc.ptr<f64>
  %5 = cc.compute_ptr %0[2] : (!cc.ptr<!cc.array<f64 x 4>>) -> !cc.ptr<f64>
  %6 = arith.constant 6.0 : f64
  cc.store %6, %5 : !cc.ptr<f64>
  %7 = cc.compute_ptr %0[3] : (!cc.ptr<!cc.array<f64 x 4>>) -> !cc.ptr<f64>
  %8 = arith.constant 9.0 : f64
  cc.store %8, %7 : !cc.ptr<f64>
  %9 = quake.alloca !quake.veq<2>
  %10 = quake.init_state %9, %0 : (!quake.veq<2>, !cc.ptr<!cc.array<f64 x 4>>) -> !quake.veq<2>
  return %10 : !quake.veq<2>
}

// CHECK-LABEL:   func.func @test2() -> !quake.veq<2> {
// CHECK:           %[[VAL_0:.*]] = cc.address_of @test2.rodata_{{[0-9]+}} : !cc.ptr<!cc.array<f64 x 4>>
// CHECK:           %[[VAL_1:.*]] = quake.alloca !quake.veq<2>
// CHECK:           %[[VAL_2:.*]] = quake.init_state %[[VAL_1]], %[[VAL_0]] : (!quake.veq<2>, !cc.ptr<!cc.array<f64 x 4>>) -> !quake.veq<2>
// CHECK:           return %[[VAL_2]] : !quake.veq<2>
// CHECK:         }

// CHECK-DAG:         cc.global constant @__nvqpp__mlirgen__function_custom_h_generator_1._Z20custom_h_generator_1v.rodata_{{[0-9]+}} (dense<[(0.70710678118654757,0.000000e+00), (0.70710678118654757,0.000000e+00), (0.70710678118654757,0.000000e+00), (-0.70710678118654757,0.000000e+00)]> : tensor<4xcomplex<f64>>) : !cc.array<complex<f64> x 4>

// CHECK-DAG:         cc.global constant @test2.rodata_{{[0-9]+}} ([1.000000e+00, 2.000000e+00, 6.000000e+00, 9.000000e+00]) : !cc.array<f64 x 4>


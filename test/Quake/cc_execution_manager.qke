// ========================================================================== //
// Copyright (c) 2022 - 2024 NVIDIA Corporation & Affiliates.                 //
// All rights reserved.                                                       //
//                                                                            //
// This source code and the accompanying materials are made available under   //
// the terms of the Apache License 2.0 which accompanies this distribution.   //
// ========================================================================== //

// RUN: cudaq-opt -lower-quake -canonicalize %s | FileCheck %s
// RUN: cudaq-opt -lower-quake -lower-to-cfg -cse -cc-to-llvm %s | FileCheck --check-prefix=LLVM %s

func.func @tocc.test() {
  %qubits = quake.alloca !quake.veq<3>
  %q0 = quake.extract_ref %qubits[0] : (!quake.veq<3>) -> !quake.ref
  %q1 = quake.extract_ref %qubits[1] : (!quake.veq<3>) -> !quake.ref
  %q2 = quake.extract_ref %qubits[2] : (!quake.veq<3>) -> !quake.ref

  quake.h %q0 : (!quake.ref) -> ()
  quake.x [%q0] %q1 : (!quake.ref, !quake.ref) -> ()
  quake.x %q0 : (!quake.ref) -> ()
  quake.y %q2 : (!quake.ref) -> ()
  quake.z [%q2, %q0] %q1 : (!quake.ref, !quake.ref, !quake.ref) -> ()
  quake.z %q1 : (!quake.ref) -> ()
  quake.t %q1 : (!quake.ref) -> ()
  quake.s %q1 : (!quake.ref) -> ()
  %p = arith.constant 2.6 : f64
  quake.rx (%p) [%q0] %q1 : (f64, !quake.ref, !quake.ref) -> ()
  %p2 = arith.constant 1.5 : f64
  quake.phased_rx (%p, %p2) %q1 : (f64, f64, !quake.ref) -> ()
  quake.rx (%p2) %q1 : (f64, !quake.ref) -> ()
  %q4 = quake.alloca !quake.ref
  quake.rx (%p2) %q4 : (f64, !quake.ref) -> ()
  quake.x %q4 : (!quake.ref) -> ()
  quake.dealloc %q4 : !quake.ref
  quake.ry (%p) %q1 : (f64, !quake.ref) -> ()
  quake.rz (%p2) %q0 : (f64, !quake.ref) -> ()
  quake.u2 (%p2, %p) %q0 : (f64, f64, !quake.ref) -> ()
  %p3 = arith.constant 0.0 : f64
  quake.u3 (%p2, %p, %p3) %q0 : (f64, f64, f64, !quake.ref) -> ()
  quake.swap %q0, %q2 : (!quake.ref, !quake.ref) -> ()
  quake.mz %q2 name "mike" : (!quake.ref) -> !quake.measure
  quake.mx %q1 name "tom" : (!quake.ref) -> !quake.measure
  quake.my %q0 : (!quake.ref) -> !quake.measure
  quake.dealloc %qubits : !quake.veq<3>
  return
}

// CHECK-LABEL:   func.func @tocc.test() {
// CHECK:           %[[VAL_0:.*]] = arith.constant true
// CHECK:           %[[VAL_1:.*]] = arith.constant false
// CHECK:           %[[VAL_2:.*]] = arith.constant 2 : i64
// CHECK:           %[[VAL_3:.*]] = arith.constant 1 : i64
// CHECK:           %[[VAL_4:.*]] = arith.constant 0 : i64
// CHECK:           %[[VAL_5:.*]] = arith.constant 3 : i64
// CHECK:           %[[VAL_6:.*]] = arith.constant 0.000000e+00 : f64
// CHECK:           %[[VAL_7:.*]] = arith.constant 1.500000e+00 : f64
// CHECK:           %[[VAL_8:.*]] = arith.constant 2.600000e+00 : f64
// CHECK:           %[[VAL_9:.*]] = cc.alloca !cc.struct<".qubit_span" {!cc.ptr<!cc.array<i64 x ?>>, i64}>
// CHECK:           %[[VAL_10:.*]] = cc.alloca !cc.array<i64 x 3>
// CHECK:           %[[VAL_11:.*]] = cc.cast %[[VAL_10]] : (!cc.ptr<!cc.array<i64 x 3>>) -> !cc.ptr<!cc.array<i64 x ?>>
// CHECK:           call @__nvqpp__cudaq_em_writeToSpan(%[[VAL_9]], %[[VAL_11]], %[[VAL_5]]) : (!cc.ptr<!cc.struct<".qubit_span" {!cc.ptr<!cc.array<i64 x ?>>, i64}>>, !cc.ptr<!cc.array<i64 x ?>>, i64) -> ()
// CHECK:           call @__nvqpp__cudaq_em_allocate_veq(%[[VAL_9]], %[[VAL_5]]) : (!cc.ptr<!cc.struct<".qubit_span" {!cc.ptr<!cc.array<i64 x ?>>, i64}>>, i64) -> ()
// CHECK:           %[[VAL_12:.*]] = cc.compute_ptr %[[VAL_9]][0, 0] : (!cc.ptr<!cc.struct<".qubit_span" {!cc.ptr<!cc.array<i64 x ?>>, i64}>>) -> !cc.ptr<!cc.ptr<!cc.array<i64 x ?>>>
// CHECK:           %[[VAL_13:.*]] = cc.load %[[VAL_12]] : !cc.ptr<!cc.ptr<!cc.array<i64 x ?>>>
// CHECK:           %[[VAL_14:.*]] = cc.compute_ptr %[[VAL_13]][0] : (!cc.ptr<!cc.array<i64 x ?>>) -> !cc.ptr<!cc.array<i64 x ?>>
// CHECK:           %[[VAL_15:.*]] = cc.alloca !cc.struct<".qubit_span" {!cc.ptr<!cc.array<i64 x ?>>, i64}>
// CHECK:           call @__nvqpp__cudaq_em_writeToSpan(%[[VAL_15]], %[[VAL_14]], %[[VAL_3]]) : (!cc.ptr<!cc.struct<".qubit_span" {!cc.ptr<!cc.array<i64 x ?>>, i64}>>, !cc.ptr<!cc.array<i64 x ?>>, i64) -> ()
// CHECK:           %[[VAL_16:.*]] = cc.compute_ptr %[[VAL_9]][0, 0] : (!cc.ptr<!cc.struct<".qubit_span" {!cc.ptr<!cc.array<i64 x ?>>, i64}>>) -> !cc.ptr<!cc.ptr<!cc.array<i64 x ?>>>
// CHECK:           %[[VAL_17:.*]] = cc.load %[[VAL_16]] : !cc.ptr<!cc.ptr<!cc.array<i64 x ?>>>
// CHECK:           %[[VAL_18:.*]] = cc.compute_ptr %[[VAL_17]][1] : (!cc.ptr<!cc.array<i64 x ?>>) -> !cc.ptr<!cc.array<i64 x ?>>
// CHECK:           %[[VAL_19:.*]] = cc.alloca !cc.struct<".qubit_span" {!cc.ptr<!cc.array<i64 x ?>>, i64}>
// CHECK:           call @__nvqpp__cudaq_em_writeToSpan(%[[VAL_19]], %[[VAL_18]], %[[VAL_3]]) : (!cc.ptr<!cc.struct<".qubit_span" {!cc.ptr<!cc.array<i64 x ?>>, i64}>>, !cc.ptr<!cc.array<i64 x ?>>, i64) -> ()
// CHECK:           %[[VAL_20:.*]] = cc.compute_ptr %[[VAL_9]][0, 0] : (!cc.ptr<!cc.struct<".qubit_span" {!cc.ptr<!cc.array<i64 x ?>>, i64}>>) -> !cc.ptr<!cc.ptr<!cc.array<i64 x ?>>>
// CHECK:           %[[VAL_21:.*]] = cc.load %[[VAL_20]] : !cc.ptr<!cc.ptr<!cc.array<i64 x ?>>>
// CHECK:           %[[VAL_22:.*]] = cc.compute_ptr %[[VAL_21]][2] : (!cc.ptr<!cc.array<i64 x ?>>) -> !cc.ptr<!cc.array<i64 x ?>>
// CHECK:           %[[VAL_23:.*]] = cc.alloca !cc.struct<".qubit_span" {!cc.ptr<!cc.array<i64 x ?>>, i64}>
// CHECK:           call @__nvqpp__cudaq_em_writeToSpan(%[[VAL_23]], %[[VAL_22]], %[[VAL_3]]) : (!cc.ptr<!cc.struct<".qubit_span" {!cc.ptr<!cc.array<i64 x ?>>, i64}>>, !cc.ptr<!cc.array<i64 x ?>>, i64) -> ()
// CHECK:           %[[VAL_24:.*]] = cc.address_of @cstr.6800 : !cc.ptr<!llvm.array<2 x i8>>
// CHECK:           %[[VAL_25:.*]] = cc.cast %[[VAL_24]] : (!cc.ptr<!llvm.array<2 x i8>>) -> !cc.ptr<i8>
// CHECK:           %[[VAL_26:.*]] = cc.cast %[[VAL_4]] : (i64) -> !cc.ptr<!cc.array<f64 x ?>>
// CHECK:           %[[VAL_27:.*]] = cc.alloca !cc.struct<".qubit_span" {!cc.ptr<!cc.array<i64 x ?>>, i64}>
// CHECK:           %[[VAL_28:.*]] = cc.cast %[[VAL_4]] : (i64) -> !cc.ptr<!cc.array<i64 x ?>>
// CHECK:           call @__nvqpp__cudaq_em_writeToSpan(%[[VAL_27]], %[[VAL_28]], %[[VAL_4]]) : (!cc.ptr<!cc.struct<".qubit_span" {!cc.ptr<!cc.array<i64 x ?>>, i64}>>, !cc.ptr<!cc.array<i64 x ?>>, i64) -> ()
// CHECK:           call @__nvqpp__cudaq_em_apply(%[[VAL_25]], %[[VAL_4]], %[[VAL_26]], %[[VAL_27]], %[[VAL_15]], %[[VAL_1]]) : (!cc.ptr<i8>, i64, !cc.ptr<!cc.array<f64 x ?>>, !cc.ptr<!cc.struct<".qubit_span" {!cc.ptr<!cc.array<i64 x ?>>, i64}>>, !cc.ptr<!cc.struct<".qubit_span" {!cc.ptr<!cc.array<i64 x ?>>, i64}>>, i1) -> ()
// CHECK:           %[[VAL_29:.*]] = cc.address_of @cstr.7800 : !cc.ptr<!llvm.array<2 x i8>>
// CHECK:           %[[VAL_30:.*]] = cc.cast %[[VAL_29]] : (!cc.ptr<!llvm.array<2 x i8>>) -> !cc.ptr<i8>
// CHECK:           %[[VAL_31:.*]] = cc.cast %[[VAL_4]] : (i64) -> !cc.ptr<!cc.array<f64 x ?>>
// CHECK:           call @__nvqpp__cudaq_em_apply(%[[VAL_30]], %[[VAL_4]], %[[VAL_31]], %[[VAL_15]], %[[VAL_19]], %[[VAL_1]]) : (!cc.ptr<i8>, i64, !cc.ptr<!cc.array<f64 x ?>>, !cc.ptr<!cc.struct<".qubit_span" {!cc.ptr<!cc.array<i64 x ?>>, i64}>>, !cc.ptr<!cc.struct<".qubit_span" {!cc.ptr<!cc.array<i64 x ?>>, i64}>>, i1) -> ()
// CHECK:           %[[VAL_32:.*]] = cc.address_of @cstr.7800 : !cc.ptr<!llvm.array<2 x i8>>
// CHECK:           %[[VAL_33:.*]] = cc.cast %[[VAL_32]] : (!cc.ptr<!llvm.array<2 x i8>>) -> !cc.ptr<i8>
// CHECK:           %[[VAL_34:.*]] = cc.cast %[[VAL_4]] : (i64) -> !cc.ptr<!cc.array<f64 x ?>>
// CHECK:           %[[VAL_35:.*]] = cc.alloca !cc.struct<".qubit_span" {!cc.ptr<!cc.array<i64 x ?>>, i64}>
// CHECK:           %[[VAL_36:.*]] = cc.cast %[[VAL_4]] : (i64) -> !cc.ptr<!cc.array<i64 x ?>>
// CHECK:           call @__nvqpp__cudaq_em_writeToSpan(%[[VAL_35]], %[[VAL_36]], %[[VAL_4]]) : (!cc.ptr<!cc.struct<".qubit_span" {!cc.ptr<!cc.array<i64 x ?>>, i64}>>, !cc.ptr<!cc.array<i64 x ?>>, i64) -> ()
// CHECK:           call @__nvqpp__cudaq_em_apply(%[[VAL_33]], %[[VAL_4]], %[[VAL_34]], %[[VAL_35]], %[[VAL_15]], %[[VAL_1]]) : (!cc.ptr<i8>, i64, !cc.ptr<!cc.array<f64 x ?>>, !cc.ptr<!cc.struct<".qubit_span" {!cc.ptr<!cc.array<i64 x ?>>, i64}>>, !cc.ptr<!cc.struct<".qubit_span" {!cc.ptr<!cc.array<i64 x ?>>, i64}>>, i1) -> ()
// CHECK:           %[[VAL_37:.*]] = cc.address_of @cstr.7900 : !cc.ptr<!llvm.array<2 x i8>>
// CHECK:           %[[VAL_38:.*]] = cc.cast %[[VAL_37]] : (!cc.ptr<!llvm.array<2 x i8>>) -> !cc.ptr<i8>
// CHECK:           %[[VAL_39:.*]] = cc.cast %[[VAL_4]] : (i64) -> !cc.ptr<!cc.array<f64 x ?>>
// CHECK:           %[[VAL_40:.*]] = cc.alloca !cc.struct<".qubit_span" {!cc.ptr<!cc.array<i64 x ?>>, i64}>
// CHECK:           %[[VAL_41:.*]] = cc.cast %[[VAL_4]] : (i64) -> !cc.ptr<!cc.array<i64 x ?>>
// CHECK:           call @__nvqpp__cudaq_em_writeToSpan(%[[VAL_40]], %[[VAL_41]], %[[VAL_4]]) : (!cc.ptr<!cc.struct<".qubit_span" {!cc.ptr<!cc.array<i64 x ?>>, i64}>>, !cc.ptr<!cc.array<i64 x ?>>, i64) -> ()
// CHECK:           call @__nvqpp__cudaq_em_apply(%[[VAL_38]], %[[VAL_4]], %[[VAL_39]], %[[VAL_40]], %[[VAL_23]], %[[VAL_1]]) : (!cc.ptr<i8>, i64, !cc.ptr<!cc.array<f64 x ?>>, !cc.ptr<!cc.struct<".qubit_span" {!cc.ptr<!cc.array<i64 x ?>>, i64}>>, !cc.ptr<!cc.struct<".qubit_span" {!cc.ptr<!cc.array<i64 x ?>>, i64}>>, i1) -> ()
// CHECK:           %[[VAL_42:.*]] = cc.address_of @cstr.7A00 : !cc.ptr<!llvm.array<2 x i8>>
// CHECK:           %[[VAL_43:.*]] = cc.cast %[[VAL_42]] : (!cc.ptr<!llvm.array<2 x i8>>) -> !cc.ptr<i8>
// CHECK:           %[[VAL_44:.*]] = cc.cast %[[VAL_4]] : (i64) -> !cc.ptr<!cc.array<f64 x ?>>
// CHECK:           %[[VAL_45:.*]] = cc.alloca !cc.struct<".qubit_span" {!cc.ptr<!cc.array<i64 x ?>>, i64}>
// CHECK:           %[[VAL_46:.*]] = cc.compute_ptr %[[VAL_23]][1] : (!cc.ptr<!cc.struct<".qubit_span" {!cc.ptr<!cc.array<i64 x ?>>, i64}>>) -> !cc.ptr<i64>
// CHECK:           %[[VAL_47:.*]] = cc.load %[[VAL_46]] : !cc.ptr<i64>
// CHECK:           %[[VAL_48:.*]] = cc.compute_ptr %[[VAL_15]][1] : (!cc.ptr<!cc.struct<".qubit_span" {!cc.ptr<!cc.array<i64 x ?>>, i64}>>) -> !cc.ptr<i64>
// CHECK:           %[[VAL_49:.*]] = cc.load %[[VAL_48]] : !cc.ptr<i64>
// CHECK:           %[[VAL_50:.*]] = arith.addi %[[VAL_47]], %[[VAL_49]] : i64
// CHECK:           %[[VAL_51:.*]] = cc.alloca i64{{\[}}%[[VAL_50]] : i64]
// CHECK:           call @__nvqpp__cudaq_em_writeToSpan(%[[VAL_45]], %[[VAL_51]], %[[VAL_50]]) : (!cc.ptr<!cc.struct<".qubit_span" {!cc.ptr<!cc.array<i64 x ?>>, i64}>>, !cc.ptr<!cc.array<i64 x ?>>, i64) -> ()
// CHECK:           %[[VAL_52:.*]] = cc.compute_ptr %[[VAL_51]][0] : (!cc.ptr<!cc.array<i64 x ?>>) -> !cc.ptr<i64>
// CHECK:           %[[VAL_53:.*]] = cc.compute_ptr %[[VAL_23]][1] : (!cc.ptr<!cc.struct<".qubit_span" {!cc.ptr<!cc.array<i64 x ?>>, i64}>>) -> !cc.ptr<i64>
// CHECK:           %[[VAL_54:.*]] = cc.load %[[VAL_53]] : !cc.ptr<i64>
// CHECK:           call @__nvqpp__cudaq_em_concatSpan(%[[VAL_52]], %[[VAL_23]], %[[VAL_54]]) : (!cc.ptr<i64>, !cc.ptr<!cc.struct<".qubit_span" {!cc.ptr<!cc.array<i64 x ?>>, i64}>>, i64) -> ()
// CHECK:           %[[VAL_55:.*]] = cc.compute_ptr %[[VAL_51]]{{\[}}%[[VAL_54]]] : (!cc.ptr<!cc.array<i64 x ?>>, i64) -> !cc.ptr<i64>
// CHECK:           %[[VAL_56:.*]] = cc.compute_ptr %[[VAL_15]][1] : (!cc.ptr<!cc.struct<".qubit_span" {!cc.ptr<!cc.array<i64 x ?>>, i64}>>) -> !cc.ptr<i64>
// CHECK:           %[[VAL_57:.*]] = cc.load %[[VAL_56]] : !cc.ptr<i64>
// CHECK:           call @__nvqpp__cudaq_em_concatSpan(%[[VAL_55]], %[[VAL_15]], %[[VAL_57]]) : (!cc.ptr<i64>, !cc.ptr<!cc.struct<".qubit_span" {!cc.ptr<!cc.array<i64 x ?>>, i64}>>, i64) -> ()
// CHECK:           call @__nvqpp__cudaq_em_apply(%[[VAL_43]], %[[VAL_4]], %[[VAL_44]], %[[VAL_45]], %[[VAL_19]], %[[VAL_1]]) : (!cc.ptr<i8>, i64, !cc.ptr<!cc.array<f64 x ?>>, !cc.ptr<!cc.struct<".qubit_span" {!cc.ptr<!cc.array<i64 x ?>>, i64}>>, !cc.ptr<!cc.struct<".qubit_span" {!cc.ptr<!cc.array<i64 x ?>>, i64}>>, i1) -> ()
// CHECK:           %[[VAL_58:.*]] = cc.address_of @cstr.7A00 : !cc.ptr<!llvm.array<2 x i8>>
// CHECK:           %[[VAL_59:.*]] = cc.cast %[[VAL_58]] : (!cc.ptr<!llvm.array<2 x i8>>) -> !cc.ptr<i8>
// CHECK:           %[[VAL_60:.*]] = cc.cast %[[VAL_4]] : (i64) -> !cc.ptr<!cc.array<f64 x ?>>
// CHECK:           %[[VAL_61:.*]] = cc.alloca !cc.struct<".qubit_span" {!cc.ptr<!cc.array<i64 x ?>>, i64}>
// CHECK:           %[[VAL_62:.*]] = cc.cast %[[VAL_4]] : (i64) -> !cc.ptr<!cc.array<i64 x ?>>
// CHECK:           call @__nvqpp__cudaq_em_writeToSpan(%[[VAL_61]], %[[VAL_62]], %[[VAL_4]]) : (!cc.ptr<!cc.struct<".qubit_span" {!cc.ptr<!cc.array<i64 x ?>>, i64}>>, !cc.ptr<!cc.array<i64 x ?>>, i64) -> ()
// CHECK:           call @__nvqpp__cudaq_em_apply(%[[VAL_59]], %[[VAL_4]], %[[VAL_60]], %[[VAL_61]], %[[VAL_19]], %[[VAL_1]]) : (!cc.ptr<i8>, i64, !cc.ptr<!cc.array<f64 x ?>>, !cc.ptr<!cc.struct<".qubit_span" {!cc.ptr<!cc.array<i64 x ?>>, i64}>>, !cc.ptr<!cc.struct<".qubit_span" {!cc.ptr<!cc.array<i64 x ?>>, i64}>>, i1) -> ()
// CHECK:           %[[VAL_63:.*]] = cc.address_of @cstr.7400 : !cc.ptr<!llvm.array<2 x i8>>
// CHECK:           %[[VAL_64:.*]] = cc.cast %[[VAL_63]] : (!cc.ptr<!llvm.array<2 x i8>>) -> !cc.ptr<i8>
// CHECK:           %[[VAL_65:.*]] = cc.cast %[[VAL_4]] : (i64) -> !cc.ptr<!cc.array<f64 x ?>>
// CHECK:           %[[VAL_66:.*]] = cc.alloca !cc.struct<".qubit_span" {!cc.ptr<!cc.array<i64 x ?>>, i64}>
// CHECK:           %[[VAL_67:.*]] = cc.cast %[[VAL_4]] : (i64) -> !cc.ptr<!cc.array<i64 x ?>>
// CHECK:           call @__nvqpp__cudaq_em_writeToSpan(%[[VAL_66]], %[[VAL_67]], %[[VAL_4]]) : (!cc.ptr<!cc.struct<".qubit_span" {!cc.ptr<!cc.array<i64 x ?>>, i64}>>, !cc.ptr<!cc.array<i64 x ?>>, i64) -> ()
// CHECK:           call @__nvqpp__cudaq_em_apply(%[[VAL_64]], %[[VAL_4]], %[[VAL_65]], %[[VAL_66]], %[[VAL_19]], %[[VAL_1]]) : (!cc.ptr<i8>, i64, !cc.ptr<!cc.array<f64 x ?>>, !cc.ptr<!cc.struct<".qubit_span" {!cc.ptr<!cc.array<i64 x ?>>, i64}>>, !cc.ptr<!cc.struct<".qubit_span" {!cc.ptr<!cc.array<i64 x ?>>, i64}>>, i1) -> ()
// CHECK:           %[[VAL_68:.*]] = cc.address_of @cstr.7300 : !cc.ptr<!llvm.array<2 x i8>>
// CHECK:           %[[VAL_69:.*]] = cc.cast %[[VAL_68]] : (!cc.ptr<!llvm.array<2 x i8>>) -> !cc.ptr<i8>
// CHECK:           %[[VAL_70:.*]] = cc.cast %[[VAL_4]] : (i64) -> !cc.ptr<!cc.array<f64 x ?>>
// CHECK:           %[[VAL_71:.*]] = cc.alloca !cc.struct<".qubit_span" {!cc.ptr<!cc.array<i64 x ?>>, i64}>
// CHECK:           %[[VAL_72:.*]] = cc.cast %[[VAL_4]] : (i64) -> !cc.ptr<!cc.array<i64 x ?>>
// CHECK:           call @__nvqpp__cudaq_em_writeToSpan(%[[VAL_71]], %[[VAL_72]], %[[VAL_4]]) : (!cc.ptr<!cc.struct<".qubit_span" {!cc.ptr<!cc.array<i64 x ?>>, i64}>>, !cc.ptr<!cc.array<i64 x ?>>, i64) -> ()
// CHECK:           call @__nvqpp__cudaq_em_apply(%[[VAL_69]], %[[VAL_4]], %[[VAL_70]], %[[VAL_71]], %[[VAL_19]], %[[VAL_1]]) : (!cc.ptr<i8>, i64, !cc.ptr<!cc.array<f64 x ?>>, !cc.ptr<!cc.struct<".qubit_span" {!cc.ptr<!cc.array<i64 x ?>>, i64}>>, !cc.ptr<!cc.struct<".qubit_span" {!cc.ptr<!cc.array<i64 x ?>>, i64}>>, i1) -> ()
// CHECK:           %[[VAL_73:.*]] = cc.address_of @cstr.727800 : !cc.ptr<!llvm.array<3 x i8>>
// CHECK:           %[[VAL_74:.*]] = cc.cast %[[VAL_73]] : (!cc.ptr<!llvm.array<3 x i8>>) -> !cc.ptr<i8>
// CHECK:           %[[VAL_75:.*]] = cc.alloca !cc.array<f64 x 1>
// CHECK:           %[[VAL_76:.*]] = cc.cast %[[VAL_75]] : (!cc.ptr<!cc.array<f64 x 1>>) -> !cc.ptr<!cc.array<f64 x ?>>
// CHECK:           %[[VAL_77:.*]] = cc.compute_ptr %[[VAL_75]][0] : (!cc.ptr<!cc.array<f64 x 1>>) -> !cc.ptr<f64>
// CHECK:           cc.store %[[VAL_8]], %[[VAL_77]] : !cc.ptr<f64>
// CHECK:           call @__nvqpp__cudaq_em_apply(%[[VAL_74]], %[[VAL_3]], %[[VAL_76]], %[[VAL_15]], %[[VAL_19]], %[[VAL_1]]) : (!cc.ptr<i8>, i64, !cc.ptr<!cc.array<f64 x ?>>, !cc.ptr<!cc.struct<".qubit_span" {!cc.ptr<!cc.array<i64 x ?>>, i64}>>, !cc.ptr<!cc.struct<".qubit_span" {!cc.ptr<!cc.array<i64 x ?>>, i64}>>, i1) -> ()
// CHECK:           %[[VAL_78:.*]] = cc.address_of @cstr.7068617365645F727800 : !cc.ptr<!llvm.array<10 x i8>>
// CHECK:           %[[VAL_79:.*]] = cc.cast %[[VAL_78]] : (!cc.ptr<!llvm.array<10 x i8>>) -> !cc.ptr<i8>
// CHECK:           %[[VAL_80:.*]] = cc.alloca !cc.array<f64 x 2>
// CHECK:           %[[VAL_81:.*]] = cc.cast %[[VAL_80]] : (!cc.ptr<!cc.array<f64 x 2>>) -> !cc.ptr<!cc.array<f64 x ?>>
// CHECK:           %[[VAL_82:.*]] = cc.compute_ptr %[[VAL_80]][0] : (!cc.ptr<!cc.array<f64 x 2>>) -> !cc.ptr<f64>
// CHECK:           cc.store %[[VAL_8]], %[[VAL_82]] : !cc.ptr<f64>
// CHECK:           %[[VAL_83:.*]] = cc.compute_ptr %[[VAL_80]][1] : (!cc.ptr<!cc.array<f64 x 2>>) -> !cc.ptr<f64>
// CHECK:           cc.store %[[VAL_7]], %[[VAL_83]] : !cc.ptr<f64>
// CHECK:           %[[VAL_84:.*]] = cc.alloca !cc.struct<".qubit_span" {!cc.ptr<!cc.array<i64 x ?>>, i64}>
// CHECK:           %[[VAL_85:.*]] = cc.cast %[[VAL_4]] : (i64) -> !cc.ptr<!cc.array<i64 x ?>>
// CHECK:           call @__nvqpp__cudaq_em_writeToSpan(%[[VAL_84]], %[[VAL_85]], %[[VAL_4]]) : (!cc.ptr<!cc.struct<".qubit_span" {!cc.ptr<!cc.array<i64 x ?>>, i64}>>, !cc.ptr<!cc.array<i64 x ?>>, i64) -> ()
// CHECK:           call @__nvqpp__cudaq_em_apply(%[[VAL_79]], %[[VAL_2]], %[[VAL_81]], %[[VAL_84]], %[[VAL_19]], %[[VAL_1]]) : (!cc.ptr<i8>, i64, !cc.ptr<!cc.array<f64 x ?>>, !cc.ptr<!cc.struct<".qubit_span" {!cc.ptr<!cc.array<i64 x ?>>, i64}>>, !cc.ptr<!cc.struct<".qubit_span" {!cc.ptr<!cc.array<i64 x ?>>, i64}>>, i1) -> ()
// CHECK:           %[[VAL_86:.*]] = cc.address_of @cstr.727800 : !cc.ptr<!llvm.array<3 x i8>>
// CHECK:           %[[VAL_87:.*]] = cc.cast %[[VAL_86]] : (!cc.ptr<!llvm.array<3 x i8>>) -> !cc.ptr<i8>
// CHECK:           %[[VAL_88:.*]] = cc.alloca !cc.array<f64 x 1>
// CHECK:           %[[VAL_89:.*]] = cc.cast %[[VAL_88]] : (!cc.ptr<!cc.array<f64 x 1>>) -> !cc.ptr<!cc.array<f64 x ?>>
// CHECK:           %[[VAL_90:.*]] = cc.compute_ptr %[[VAL_88]][0] : (!cc.ptr<!cc.array<f64 x 1>>) -> !cc.ptr<f64>
// CHECK:           cc.store %[[VAL_7]], %[[VAL_90]] : !cc.ptr<f64>
// CHECK:           %[[VAL_91:.*]] = cc.alloca !cc.struct<".qubit_span" {!cc.ptr<!cc.array<i64 x ?>>, i64}>
// CHECK:           %[[VAL_92:.*]] = cc.cast %[[VAL_4]] : (i64) -> !cc.ptr<!cc.array<i64 x ?>>
// CHECK:           call @__nvqpp__cudaq_em_writeToSpan(%[[VAL_91]], %[[VAL_92]], %[[VAL_4]]) : (!cc.ptr<!cc.struct<".qubit_span" {!cc.ptr<!cc.array<i64 x ?>>, i64}>>, !cc.ptr<!cc.array<i64 x ?>>, i64) -> ()
// CHECK:           call @__nvqpp__cudaq_em_apply(%[[VAL_87]], %[[VAL_3]], %[[VAL_89]], %[[VAL_91]], %[[VAL_19]], %[[VAL_1]]) : (!cc.ptr<i8>, i64, !cc.ptr<!cc.array<f64 x ?>>, !cc.ptr<!cc.struct<".qubit_span" {!cc.ptr<!cc.array<i64 x ?>>, i64}>>, !cc.ptr<!cc.struct<".qubit_span" {!cc.ptr<!cc.array<i64 x ?>>, i64}>>, i1) -> ()
// CHECK:           %[[VAL_93:.*]] = cc.alloca !cc.struct<".qubit_span" {!cc.ptr<!cc.array<i64 x ?>>, i64}>
// CHECK:           %[[VAL_94:.*]] = cc.alloca !cc.array<i64 x 1>
// CHECK:           %[[VAL_95:.*]] = cc.cast %[[VAL_94]] : (!cc.ptr<!cc.array<i64 x 1>>) -> !cc.ptr<!cc.array<i64 x ?>>
// CHECK:           %[[VAL_96:.*]] = call @__nvqpp__cudaq_em_allocate() : () -> i64
// CHECK:           %[[VAL_97:.*]] = cc.compute_ptr %[[VAL_94]][0] : (!cc.ptr<!cc.array<i64 x 1>>) -> !cc.ptr<i64>
// CHECK:           cc.store %[[VAL_96]], %[[VAL_97]] : !cc.ptr<i64>
// CHECK:           call @__nvqpp__cudaq_em_writeToSpan(%[[VAL_93]], %[[VAL_95]], %[[VAL_3]]) : (!cc.ptr<!cc.struct<".qubit_span" {!cc.ptr<!cc.array<i64 x ?>>, i64}>>, !cc.ptr<!cc.array<i64 x ?>>, i64) -> ()
// CHECK:           %[[VAL_98:.*]] = cc.address_of @cstr.727800 : !cc.ptr<!llvm.array<3 x i8>>
// CHECK:           %[[VAL_99:.*]] = cc.cast %[[VAL_98]] : (!cc.ptr<!llvm.array<3 x i8>>) -> !cc.ptr<i8>
// CHECK:           %[[VAL_100:.*]] = cc.alloca !cc.array<f64 x 1>
// CHECK:           %[[VAL_101:.*]] = cc.cast %[[VAL_100]] : (!cc.ptr<!cc.array<f64 x 1>>) -> !cc.ptr<!cc.array<f64 x ?>>
// CHECK:           %[[VAL_102:.*]] = cc.compute_ptr %[[VAL_100]][0] : (!cc.ptr<!cc.array<f64 x 1>>) -> !cc.ptr<f64>
// CHECK:           cc.store %[[VAL_7]], %[[VAL_102]] : !cc.ptr<f64>
// CHECK:           %[[VAL_103:.*]] = cc.alloca !cc.struct<".qubit_span" {!cc.ptr<!cc.array<i64 x ?>>, i64}>
// CHECK:           %[[VAL_104:.*]] = cc.cast %[[VAL_4]] : (i64) -> !cc.ptr<!cc.array<i64 x ?>>
// CHECK:           call @__nvqpp__cudaq_em_writeToSpan(%[[VAL_103]], %[[VAL_104]], %[[VAL_4]]) : (!cc.ptr<!cc.struct<".qubit_span" {!cc.ptr<!cc.array<i64 x ?>>, i64}>>, !cc.ptr<!cc.array<i64 x ?>>, i64) -> ()
// CHECK:           call @__nvqpp__cudaq_em_apply(%[[VAL_99]], %[[VAL_3]], %[[VAL_101]], %[[VAL_103]], %[[VAL_93]], %[[VAL_1]]) : (!cc.ptr<i8>, i64, !cc.ptr<!cc.array<f64 x ?>>, !cc.ptr<!cc.struct<".qubit_span" {!cc.ptr<!cc.array<i64 x ?>>, i64}>>, !cc.ptr<!cc.struct<".qubit_span" {!cc.ptr<!cc.array<i64 x ?>>, i64}>>, i1) -> ()
// CHECK:           %[[VAL_105:.*]] = cc.address_of @cstr.7800 : !cc.ptr<!llvm.array<2 x i8>>
// CHECK:           %[[VAL_106:.*]] = cc.cast %[[VAL_105]] : (!cc.ptr<!llvm.array<2 x i8>>) -> !cc.ptr<i8>
// CHECK:           %[[VAL_107:.*]] = cc.cast %[[VAL_4]] : (i64) -> !cc.ptr<!cc.array<f64 x ?>>
// CHECK:           %[[VAL_108:.*]] = cc.alloca !cc.struct<".qubit_span" {!cc.ptr<!cc.array<i64 x ?>>, i64}>
// CHECK:           %[[VAL_109:.*]] = cc.cast %[[VAL_4]] : (i64) -> !cc.ptr<!cc.array<i64 x ?>>
// CHECK:           call @__nvqpp__cudaq_em_writeToSpan(%[[VAL_108]], %[[VAL_109]], %[[VAL_4]]) : (!cc.ptr<!cc.struct<".qubit_span" {!cc.ptr<!cc.array<i64 x ?>>, i64}>>, !cc.ptr<!cc.array<i64 x ?>>, i64) -> ()
// CHECK:           call @__nvqpp__cudaq_em_apply(%[[VAL_106]], %[[VAL_4]], %[[VAL_107]], %[[VAL_108]], %[[VAL_93]], %[[VAL_1]]) : (!cc.ptr<i8>, i64, !cc.ptr<!cc.array<f64 x ?>>, !cc.ptr<!cc.struct<".qubit_span" {!cc.ptr<!cc.array<i64 x ?>>, i64}>>, !cc.ptr<!cc.struct<".qubit_span" {!cc.ptr<!cc.array<i64 x ?>>, i64}>>, i1) -> ()
// CHECK:           call @__nvqpp__cudaq_em_return(%[[VAL_93]]) : (!cc.ptr<!cc.struct<".qubit_span" {!cc.ptr<!cc.array<i64 x ?>>, i64}>>) -> ()
// CHECK:           %[[VAL_110:.*]] = cc.address_of @cstr.727900 : !cc.ptr<!llvm.array<3 x i8>>
// CHECK:           %[[VAL_111:.*]] = cc.cast %[[VAL_110]] : (!cc.ptr<!llvm.array<3 x i8>>) -> !cc.ptr<i8>
// CHECK:           %[[VAL_112:.*]] = cc.alloca !cc.array<f64 x 1>
// CHECK:           %[[VAL_113:.*]] = cc.cast %[[VAL_112]] : (!cc.ptr<!cc.array<f64 x 1>>) -> !cc.ptr<!cc.array<f64 x ?>>
// CHECK:           %[[VAL_114:.*]] = cc.compute_ptr %[[VAL_112]][0] : (!cc.ptr<!cc.array<f64 x 1>>) -> !cc.ptr<f64>
// CHECK:           cc.store %[[VAL_8]], %[[VAL_114]] : !cc.ptr<f64>
// CHECK:           %[[VAL_115:.*]] = cc.alloca !cc.struct<".qubit_span" {!cc.ptr<!cc.array<i64 x ?>>, i64}>
// CHECK:           %[[VAL_116:.*]] = cc.cast %[[VAL_4]] : (i64) -> !cc.ptr<!cc.array<i64 x ?>>
// CHECK:           call @__nvqpp__cudaq_em_writeToSpan(%[[VAL_115]], %[[VAL_116]], %[[VAL_4]]) : (!cc.ptr<!cc.struct<".qubit_span" {!cc.ptr<!cc.array<i64 x ?>>, i64}>>, !cc.ptr<!cc.array<i64 x ?>>, i64) -> ()
// CHECK:           call @__nvqpp__cudaq_em_apply(%[[VAL_111]], %[[VAL_3]], %[[VAL_113]], %[[VAL_115]], %[[VAL_19]], %[[VAL_1]]) : (!cc.ptr<i8>, i64, !cc.ptr<!cc.array<f64 x ?>>, !cc.ptr<!cc.struct<".qubit_span" {!cc.ptr<!cc.array<i64 x ?>>, i64}>>, !cc.ptr<!cc.struct<".qubit_span" {!cc.ptr<!cc.array<i64 x ?>>, i64}>>, i1) -> ()
// CHECK:           %[[VAL_117:.*]] = cc.address_of @cstr.727A00 : !cc.ptr<!llvm.array<3 x i8>>
// CHECK:           %[[VAL_118:.*]] = cc.cast %[[VAL_117]] : (!cc.ptr<!llvm.array<3 x i8>>) -> !cc.ptr<i8>
// CHECK:           %[[VAL_119:.*]] = cc.alloca !cc.array<f64 x 1>
// CHECK:           %[[VAL_120:.*]] = cc.cast %[[VAL_119]] : (!cc.ptr<!cc.array<f64 x 1>>) -> !cc.ptr<!cc.array<f64 x ?>>
// CHECK:           %[[VAL_121:.*]] = cc.compute_ptr %[[VAL_119]][0] : (!cc.ptr<!cc.array<f64 x 1>>) -> !cc.ptr<f64>
// CHECK:           cc.store %[[VAL_7]], %[[VAL_121]] : !cc.ptr<f64>
// CHECK:           %[[VAL_122:.*]] = cc.alloca !cc.struct<".qubit_span" {!cc.ptr<!cc.array<i64 x ?>>, i64}>
// CHECK:           %[[VAL_123:.*]] = cc.cast %[[VAL_4]] : (i64) -> !cc.ptr<!cc.array<i64 x ?>>
// CHECK:           call @__nvqpp__cudaq_em_writeToSpan(%[[VAL_122]], %[[VAL_123]], %[[VAL_4]]) : (!cc.ptr<!cc.struct<".qubit_span" {!cc.ptr<!cc.array<i64 x ?>>, i64}>>, !cc.ptr<!cc.array<i64 x ?>>, i64) -> ()
// CHECK:           call @__nvqpp__cudaq_em_apply(%[[VAL_118]], %[[VAL_3]], %[[VAL_120]], %[[VAL_122]], %[[VAL_15]], %[[VAL_1]]) : (!cc.ptr<i8>, i64, !cc.ptr<!cc.array<f64 x ?>>, !cc.ptr<!cc.struct<".qubit_span" {!cc.ptr<!cc.array<i64 x ?>>, i64}>>, !cc.ptr<!cc.struct<".qubit_span" {!cc.ptr<!cc.array<i64 x ?>>, i64}>>, i1) -> ()
// CHECK:           %[[VAL_124:.*]] = cc.address_of @cstr.753200 : !cc.ptr<!llvm.array<3 x i8>>
// CHECK:           %[[VAL_125:.*]] = cc.cast %[[VAL_124]] : (!cc.ptr<!llvm.array<3 x i8>>) -> !cc.ptr<i8>
// CHECK:           %[[VAL_126:.*]] = cc.alloca !cc.array<f64 x 2>
// CHECK:           %[[VAL_127:.*]] = cc.cast %[[VAL_126]] : (!cc.ptr<!cc.array<f64 x 2>>) -> !cc.ptr<!cc.array<f64 x ?>>
// CHECK:           %[[VAL_128:.*]] = cc.compute_ptr %[[VAL_126]][0] : (!cc.ptr<!cc.array<f64 x 2>>) -> !cc.ptr<f64>
// CHECK:           cc.store %[[VAL_7]], %[[VAL_128]] : !cc.ptr<f64>
// CHECK:           %[[VAL_129:.*]] = cc.compute_ptr %[[VAL_126]][1] : (!cc.ptr<!cc.array<f64 x 2>>) -> !cc.ptr<f64>
// CHECK:           cc.store %[[VAL_8]], %[[VAL_129]] : !cc.ptr<f64>
// CHECK:           %[[VAL_130:.*]] = cc.alloca !cc.struct<".qubit_span" {!cc.ptr<!cc.array<i64 x ?>>, i64}>
// CHECK:           %[[VAL_131:.*]] = cc.cast %[[VAL_4]] : (i64) -> !cc.ptr<!cc.array<i64 x ?>>
// CHECK:           call @__nvqpp__cudaq_em_writeToSpan(%[[VAL_130]], %[[VAL_131]], %[[VAL_4]]) : (!cc.ptr<!cc.struct<".qubit_span" {!cc.ptr<!cc.array<i64 x ?>>, i64}>>, !cc.ptr<!cc.array<i64 x ?>>, i64) -> ()
// CHECK:           call @__nvqpp__cudaq_em_apply(%[[VAL_125]], %[[VAL_2]], %[[VAL_127]], %[[VAL_130]], %[[VAL_15]], %[[VAL_1]]) : (!cc.ptr<i8>, i64, !cc.ptr<!cc.array<f64 x ?>>, !cc.ptr<!cc.struct<".qubit_span" {!cc.ptr<!cc.array<i64 x ?>>, i64}>>, !cc.ptr<!cc.struct<".qubit_span" {!cc.ptr<!cc.array<i64 x ?>>, i64}>>, i1) -> ()
// CHECK:           %[[VAL_132:.*]] = cc.address_of @cstr.753300 : !cc.ptr<!llvm.array<3 x i8>>
// CHECK:           %[[VAL_133:.*]] = cc.cast %[[VAL_132]] : (!cc.ptr<!llvm.array<3 x i8>>) -> !cc.ptr<i8>
// CHECK:           %[[VAL_134:.*]] = cc.alloca !cc.array<f64 x 3>
// CHECK:           %[[VAL_135:.*]] = cc.cast %[[VAL_134]] : (!cc.ptr<!cc.array<f64 x 3>>) -> !cc.ptr<!cc.array<f64 x ?>>
// CHECK:           %[[VAL_136:.*]] = cc.compute_ptr %[[VAL_134]][0] : (!cc.ptr<!cc.array<f64 x 3>>) -> !cc.ptr<f64>
// CHECK:           cc.store %[[VAL_7]], %[[VAL_136]] : !cc.ptr<f64>
// CHECK:           %[[VAL_137:.*]] = cc.compute_ptr %[[VAL_134]][1] : (!cc.ptr<!cc.array<f64 x 3>>) -> !cc.ptr<f64>
// CHECK:           cc.store %[[VAL_8]], %[[VAL_137]] : !cc.ptr<f64>
// CHECK:           %[[VAL_138:.*]] = cc.compute_ptr %[[VAL_134]][2] : (!cc.ptr<!cc.array<f64 x 3>>) -> !cc.ptr<f64>
// CHECK:           cc.store %[[VAL_6]], %[[VAL_138]] : !cc.ptr<f64>
// CHECK:           %[[VAL_139:.*]] = cc.alloca !cc.struct<".qubit_span" {!cc.ptr<!cc.array<i64 x ?>>, i64}>
// CHECK:           %[[VAL_140:.*]] = cc.cast %[[VAL_4]] : (i64) -> !cc.ptr<!cc.array<i64 x ?>>
// CHECK:           call @__nvqpp__cudaq_em_writeToSpan(%[[VAL_139]], %[[VAL_140]], %[[VAL_4]]) : (!cc.ptr<!cc.struct<".qubit_span" {!cc.ptr<!cc.array<i64 x ?>>, i64}>>, !cc.ptr<!cc.array<i64 x ?>>, i64) -> ()
// CHECK:           call @__nvqpp__cudaq_em_apply(%[[VAL_133]], %[[VAL_5]], %[[VAL_135]], %[[VAL_139]], %[[VAL_15]], %[[VAL_1]]) : (!cc.ptr<i8>, i64, !cc.ptr<!cc.array<f64 x ?>>, !cc.ptr<!cc.struct<".qubit_span" {!cc.ptr<!cc.array<i64 x ?>>, i64}>>, !cc.ptr<!cc.struct<".qubit_span" {!cc.ptr<!cc.array<i64 x ?>>, i64}>>, i1) -> ()
// CHECK:           %[[VAL_141:.*]] = cc.address_of @cstr.7377617000 : !cc.ptr<!llvm.array<5 x i8>>
// CHECK:           %[[VAL_142:.*]] = cc.cast %[[VAL_141]] : (!cc.ptr<!llvm.array<5 x i8>>) -> !cc.ptr<i8>
// CHECK:           %[[VAL_143:.*]] = cc.cast %[[VAL_4]] : (i64) -> !cc.ptr<!cc.array<f64 x ?>>
// CHECK:           %[[VAL_144:.*]] = cc.alloca !cc.struct<".qubit_span" {!cc.ptr<!cc.array<i64 x ?>>, i64}>
// CHECK:           %[[VAL_145:.*]] = cc.cast %[[VAL_4]] : (i64) -> !cc.ptr<!cc.array<i64 x ?>>
// CHECK:           call @__nvqpp__cudaq_em_writeToSpan(%[[VAL_144]], %[[VAL_145]], %[[VAL_4]]) : (!cc.ptr<!cc.struct<".qubit_span" {!cc.ptr<!cc.array<i64 x ?>>, i64}>>, !cc.ptr<!cc.array<i64 x ?>>, i64) -> ()
// CHECK:           %[[VAL_146:.*]] = cc.alloca !cc.struct<".qubit_span" {!cc.ptr<!cc.array<i64 x ?>>, i64}>
// CHECK:           %[[VAL_147:.*]] = cc.compute_ptr %[[VAL_15]][1] : (!cc.ptr<!cc.struct<".qubit_span" {!cc.ptr<!cc.array<i64 x ?>>, i64}>>) -> !cc.ptr<i64>
// CHECK:           %[[VAL_148:.*]] = cc.load %[[VAL_147]] : !cc.ptr<i64>
// CHECK:           %[[VAL_149:.*]] = cc.compute_ptr %[[VAL_23]][1] : (!cc.ptr<!cc.struct<".qubit_span" {!cc.ptr<!cc.array<i64 x ?>>, i64}>>) -> !cc.ptr<i64>
// CHECK:           %[[VAL_150:.*]] = cc.load %[[VAL_149]] : !cc.ptr<i64>
// CHECK:           %[[VAL_151:.*]] = arith.addi %[[VAL_148]], %[[VAL_150]] : i64
// CHECK:           %[[VAL_152:.*]] = cc.alloca i64{{\[}}%[[VAL_151]] : i64]
// CHECK:           call @__nvqpp__cudaq_em_writeToSpan(%[[VAL_146]], %[[VAL_152]], %[[VAL_151]]) : (!cc.ptr<!cc.struct<".qubit_span" {!cc.ptr<!cc.array<i64 x ?>>, i64}>>, !cc.ptr<!cc.array<i64 x ?>>, i64) -> ()
// CHECK:           %[[VAL_153:.*]] = cc.compute_ptr %[[VAL_152]][0] : (!cc.ptr<!cc.array<i64 x ?>>) -> !cc.ptr<i64>
// CHECK:           %[[VAL_154:.*]] = cc.compute_ptr %[[VAL_15]][1] : (!cc.ptr<!cc.struct<".qubit_span" {!cc.ptr<!cc.array<i64 x ?>>, i64}>>) -> !cc.ptr<i64>
// CHECK:           %[[VAL_155:.*]] = cc.load %[[VAL_154]] : !cc.ptr<i64>
// CHECK:           call @__nvqpp__cudaq_em_concatSpan(%[[VAL_153]], %[[VAL_15]], %[[VAL_155]]) : (!cc.ptr<i64>, !cc.ptr<!cc.struct<".qubit_span" {!cc.ptr<!cc.array<i64 x ?>>, i64}>>, i64) -> ()
// CHECK:           %[[VAL_156:.*]] = cc.compute_ptr %[[VAL_152]]{{\[}}%[[VAL_155]]] : (!cc.ptr<!cc.array<i64 x ?>>, i64) -> !cc.ptr<i64>
// CHECK:           %[[VAL_157:.*]] = cc.compute_ptr %[[VAL_23]][1] : (!cc.ptr<!cc.struct<".qubit_span" {!cc.ptr<!cc.array<i64 x ?>>, i64}>>) -> !cc.ptr<i64>
// CHECK:           %[[VAL_158:.*]] = cc.load %[[VAL_157]] : !cc.ptr<i64>
// CHECK:           call @__nvqpp__cudaq_em_concatSpan(%[[VAL_156]], %[[VAL_23]], %[[VAL_158]]) : (!cc.ptr<i64>, !cc.ptr<!cc.struct<".qubit_span" {!cc.ptr<!cc.array<i64 x ?>>, i64}>>, i64) -> ()
// CHECK:           call @__nvqpp__cudaq_em_apply(%[[VAL_142]], %[[VAL_4]], %[[VAL_143]], %[[VAL_144]], %[[VAL_146]], %[[VAL_1]]) : (!cc.ptr<i8>, i64, !cc.ptr<!cc.array<f64 x ?>>, !cc.ptr<!cc.struct<".qubit_span" {!cc.ptr<!cc.array<i64 x ?>>, i64}>>, !cc.ptr<!cc.struct<".qubit_span" {!cc.ptr<!cc.array<i64 x ?>>, i64}>>, i1) -> ()
// CHECK:           %[[VAL_159:.*]] = cc.address_of @cstr.6D696B6500 : !cc.ptr<!llvm.array<5 x i8>>
// CHECK:           %[[VAL_160:.*]] = cc.cast %[[VAL_159]] : (!cc.ptr<!llvm.array<5 x i8>>) -> !cc.ptr<i8>
// CHECK:           %[[VAL_161:.*]] = call @__nvqpp__cudaq_em_measure(%[[VAL_23]], %[[VAL_160]]) : (!cc.ptr<!cc.struct<".qubit_span" {!cc.ptr<!cc.array<i64 x ?>>, i64}>>, !cc.ptr<i8>) -> i32
// CHECK:           %[[VAL_162:.*]] = cc.address_of @cstr.6800 : !cc.ptr<!llvm.array<2 x i8>>
// CHECK:           %[[VAL_163:.*]] = cc.cast %[[VAL_162]] : (!cc.ptr<!llvm.array<2 x i8>>) -> !cc.ptr<i8>
// CHECK:           %[[VAL_164:.*]] = cc.cast %[[VAL_4]] : (i64) -> !cc.ptr<!cc.array<f64 x ?>>
// CHECK:           %[[VAL_165:.*]] = cc.alloca !cc.struct<".qubit_span" {!cc.ptr<!cc.array<i64 x ?>>, i64}>
// CHECK:           %[[VAL_166:.*]] = cc.cast %[[VAL_4]] : (i64) -> !cc.ptr<!cc.array<i64 x ?>>
// CHECK:           call @__nvqpp__cudaq_em_writeToSpan(%[[VAL_165]], %[[VAL_166]], %[[VAL_4]]) : (!cc.ptr<!cc.struct<".qubit_span" {!cc.ptr<!cc.array<i64 x ?>>, i64}>>, !cc.ptr<!cc.array<i64 x ?>>, i64) -> ()
// CHECK:           call @__nvqpp__cudaq_em_apply(%[[VAL_163]], %[[VAL_4]], %[[VAL_164]], %[[VAL_165]], %[[VAL_19]], %[[VAL_1]]) : (!cc.ptr<i8>, i64, !cc.ptr<!cc.array<f64 x ?>>, !cc.ptr<!cc.struct<".qubit_span" {!cc.ptr<!cc.array<i64 x ?>>, i64}>>, !cc.ptr<!cc.struct<".qubit_span" {!cc.ptr<!cc.array<i64 x ?>>, i64}>>, i1) -> ()
// CHECK:           %[[VAL_167:.*]] = cc.address_of @cstr.746F6D00 : !cc.ptr<!llvm.array<4 x i8>>
// CHECK:           %[[VAL_168:.*]] = cc.cast %[[VAL_167]] : (!cc.ptr<!llvm.array<4 x i8>>) -> !cc.ptr<i8>
// CHECK:           %[[VAL_169:.*]] = call @__nvqpp__cudaq_em_measure(%[[VAL_19]], %[[VAL_168]]) : (!cc.ptr<!cc.struct<".qubit_span" {!cc.ptr<!cc.array<i64 x ?>>, i64}>>, !cc.ptr<i8>) -> i32
// CHECK:           %[[VAL_170:.*]] = cc.address_of @cstr.7300 : !cc.ptr<!llvm.array<2 x i8>>
// CHECK:           %[[VAL_171:.*]] = cc.cast %[[VAL_170]] : (!cc.ptr<!llvm.array<2 x i8>>) -> !cc.ptr<i8>
// CHECK:           %[[VAL_172:.*]] = cc.cast %[[VAL_4]] : (i64) -> !cc.ptr<!cc.array<f64 x ?>>
// CHECK:           %[[VAL_173:.*]] = cc.alloca !cc.struct<".qubit_span" {!cc.ptr<!cc.array<i64 x ?>>, i64}>
// CHECK:           %[[VAL_174:.*]] = cc.cast %[[VAL_4]] : (i64) -> !cc.ptr<!cc.array<i64 x ?>>
// CHECK:           call @__nvqpp__cudaq_em_writeToSpan(%[[VAL_173]], %[[VAL_174]], %[[VAL_4]]) : (!cc.ptr<!cc.struct<".qubit_span" {!cc.ptr<!cc.array<i64 x ?>>, i64}>>, !cc.ptr<!cc.array<i64 x ?>>, i64) -> ()
// CHECK:           call @__nvqpp__cudaq_em_apply(%[[VAL_171]], %[[VAL_4]], %[[VAL_172]], %[[VAL_173]], %[[VAL_15]], %[[VAL_0]]) : (!cc.ptr<i8>, i64, !cc.ptr<!cc.array<f64 x ?>>, !cc.ptr<!cc.struct<".qubit_span" {!cc.ptr<!cc.array<i64 x ?>>, i64}>>, !cc.ptr<!cc.struct<".qubit_span" {!cc.ptr<!cc.array<i64 x ?>>, i64}>>, i1) -> ()
// CHECK:           %[[VAL_175:.*]] = cc.address_of @cstr.6800 : !cc.ptr<!llvm.array<2 x i8>>
// CHECK:           %[[VAL_176:.*]] = cc.cast %[[VAL_175]] : (!cc.ptr<!llvm.array<2 x i8>>) -> !cc.ptr<i8>
// CHECK:           %[[VAL_177:.*]] = cc.cast %[[VAL_4]] : (i64) -> !cc.ptr<!cc.array<f64 x ?>>
// CHECK:           %[[VAL_178:.*]] = cc.alloca !cc.struct<".qubit_span" {!cc.ptr<!cc.array<i64 x ?>>, i64}>
// CHECK:           %[[VAL_179:.*]] = cc.cast %[[VAL_4]] : (i64) -> !cc.ptr<!cc.array<i64 x ?>>
// CHECK:           call @__nvqpp__cudaq_em_writeToSpan(%[[VAL_178]], %[[VAL_179]], %[[VAL_4]]) : (!cc.ptr<!cc.struct<".qubit_span" {!cc.ptr<!cc.array<i64 x ?>>, i64}>>, !cc.ptr<!cc.array<i64 x ?>>, i64) -> ()
// CHECK:           call @__nvqpp__cudaq_em_apply(%[[VAL_176]], %[[VAL_4]], %[[VAL_177]], %[[VAL_178]], %[[VAL_15]], %[[VAL_1]]) : (!cc.ptr<i8>, i64, !cc.ptr<!cc.array<f64 x ?>>, !cc.ptr<!cc.struct<".qubit_span" {!cc.ptr<!cc.array<i64 x ?>>, i64}>>, !cc.ptr<!cc.struct<".qubit_span" {!cc.ptr<!cc.array<i64 x ?>>, i64}>>, i1) -> ()
// CHECK:           %[[VAL_180:.*]] = cc.address_of @cstr.72{{[0-9]+}}00 : !cc.ptr<!llvm.array<[[LEN:.*]] x i8>>
// CHECK:           %[[VAL_181:.*]] = cc.cast %[[VAL_180]] : (!cc.ptr<!llvm.array<[[LEN]] x i8>>) -> !cc.ptr<i8>
// CHECK:           %[[VAL_182:.*]] = call @__nvqpp__cudaq_em_measure(%[[VAL_15]], %[[VAL_181]]) : (!cc.ptr<!cc.struct<".qubit_span" {!cc.ptr<!cc.array<i64 x ?>>, i64}>>, !cc.ptr<i8>) -> i32
// CHECK:           call @__nvqpp__cudaq_em_return(%[[VAL_9]]) : (!cc.ptr<!cc.struct<".qubit_span" {!cc.ptr<!cc.array<i64 x ?>>, i64}>>) -> ()
// CHECK:           return
// CHECK:         }
// CHECK:         func.func private @__nvqpp__cudaq_em_allocate() -> i64

// CHECK-LABEL:   func.func private @__nvqpp__cudaq_em_allocate_veq(
// CHECK-SAME:      %[[VAL_0:.*]]: !cc.ptr<!cc.struct<".qubit_span" {!cc.ptr<!cc.array<i64 x ?>>, i64}>>, %[[VAL_1:.*]]: i64) {
// CHECK:           %[[VAL_2:.*]] = arith.constant 1 : i64
// CHECK:           %[[VAL_3:.*]] = arith.constant 0 : i64
// CHECK:           %[[VAL_11:.*]] = cc.compute_ptr %[[VAL_0]][0, 0] : (!cc.ptr<!cc.struct<".qubit_span" {!cc.ptr<!cc.array<i64 x ?>>, i64}>>) -> !cc.ptr<!cc.ptr<!cc.array<i64 x ?>>>
// CHECK:           %[[VAL_12:.*]] = cc.load %[[VAL_11]] : !cc.ptr<!cc.ptr<!cc.array<i64 x ?>>>
// CHECK:           %[[VAL_4:.*]] = cc.loop while ((%[[VAL_5:.*]] = %[[VAL_3]]) -> (i64)) {
// CHECK:             %[[VAL_6:.*]] = arith.cmpi slt, %[[VAL_5]], %[[VAL_1]] : i64
// CHECK:             cc.condition %[[VAL_6]](%[[VAL_5]] : i64)
// CHECK:           } do {
// CHECK:           ^bb0(%[[VAL_7:.*]]: i64):
// CHECK:             %[[VAL_8:.*]] = func.call @__nvqpp__cudaq_em_allocate() : () -> i64
// CHECK:             %[[VAL_9:.*]] = cc.compute_ptr %[[VAL_12]][%[[VAL_7]]] : (!cc.ptr<!cc.array<i64 x ?>>, i64) -> !cc.ptr<i64>
// CHECK:             cc.store %[[VAL_8]], %[[VAL_9]] : !cc.ptr<i64>
// CHECK:             cc.continue %[[VAL_7]] : i64
// CHECK:           } step {
// CHECK:           ^bb0(%[[VAL_10:.*]]: i64):
// CHECK:             %[[VAL_11:.*]] = arith.addi %[[VAL_10]], %[[VAL_2]] : i64
// CHECK:             cc.continue %[[VAL_11]] : i64
// CHECK:           } {invariant}
// CHECK:           return
// CHECK:         }
// CHECK:         func.func private @__nvqpp__cudaq_em_apply(!cc.ptr<i8>, i64, !cc.ptr<!cc.array<f64 x ?>>, !cc.ptr<!cc.struct<".qubit_span" {!cc.ptr<!cc.array<i64 x ?>>, i64}>>, !cc.ptr<!cc.struct<".qubit_span" {!cc.ptr<!cc.array<i64 x ?>>, i64}>>, i1)
// CHECK:         func.func private @llvm.memcpy.p0i8.p0i8.i64(!cc.ptr<i8>, !cc.ptr<i8>, i64, i1)

// CHECK-LABEL:   func.func private @__nvqpp__cudaq_em_concatSpan(
// CHECK-SAME:      %[[VAL_0:.*]]: !cc.ptr<i64>, %[[VAL_1:.*]]: !cc.ptr<!cc.struct<".qubit_span" {!cc.ptr<!cc.array<i64 x ?>>, i64}>>, %[[VAL_2:.*]]: i64) {
// CHECK:           %[[VAL_3:.*]] = arith.constant false
// CHECK:           %[[VAL_4:.*]] = arith.constant 8 : i64
// CHECK:           %[[VAL_5:.*]] = cc.compute_ptr %[[VAL_1]][0, 0] : (!cc.ptr<!cc.struct<".qubit_span" {!cc.ptr<!cc.array<i64 x ?>>, i64}>>) -> !cc.ptr<!cc.ptr<!cc.array<i64 x ?>>>
// CHECK:           %[[VAL_6:.*]] = cc.load %[[VAL_5]] : !cc.ptr<!cc.ptr<!cc.array<i64 x ?>>>
// CHECK:           %[[VAL_7:.*]] = arith.muli %[[VAL_2]], %[[VAL_4]] : i64
// CHECK:           %[[VAL_8:.*]] = cc.cast %[[VAL_0]] : (!cc.ptr<i64>) -> !cc.ptr<i8>
// CHECK:           %[[VAL_9:.*]] = cc.cast %[[VAL_6]] : (!cc.ptr<!cc.array<i64 x ?>>) -> !cc.ptr<i8>
// CHECK:           call @llvm.memcpy.p0i8.p0i8.i64(%[[VAL_8]], %[[VAL_9]], %[[VAL_7]], %[[VAL_3]]) : (!cc.ptr<i8>, !cc.ptr<i8>, i64, i1) -> ()
// CHECK:           return
// CHECK:         }
// CHECK:         func.func private @__nvqpp__cudaq_em_measure(!cc.ptr<!cc.struct<".qubit_span" {!cc.ptr<!cc.array<i64 x ?>>, i64}>>, !cc.ptr<i8>) -> i32
// CHECK:         func.func private @__nvqpp__cudaq_em_reset(!cc.ptr<!cc.struct<".qubit_span" {!cc.ptr<!cc.array<i64 x ?>>, i64}>>)
// CHECK:         func.func private @__nvqpp__cudaq_em_return(!cc.ptr<!cc.struct<".qubit_span" {!cc.ptr<!cc.array<i64 x ?>>, i64}>>)

// CHECK-LABEL:   func.func private @__nvqpp__cudaq_em_writeToSpan(
// CHECK-SAME:      %[[VAL_0:.*]]: !cc.ptr<!cc.struct<".qubit_span" {!cc.ptr<!cc.array<i64 x ?>>, i64}>>, %[[VAL_1:.*]]: !cc.ptr<!cc.array<i64 x ?>>, %[[VAL_2:.*]]: i64) {
// CHECK:           %[[VAL_3:.*]] = cc.compute_ptr %[[VAL_0]][0, 0] : (!cc.ptr<!cc.struct<".qubit_span" {!cc.ptr<!cc.array<i64 x ?>>, i64}>>) -> !cc.ptr<!cc.ptr<!cc.array<i64 x ?>>>
// CHECK:           cc.store %[[VAL_1]], %[[VAL_3]] : !cc.ptr<!cc.ptr<!cc.array<i64 x ?>>>
// CHECK:           %[[VAL_4:.*]] = cc.compute_ptr %[[VAL_0]][0, 1] : (!cc.ptr<!cc.struct<".qubit_span" {!cc.ptr<!cc.array<i64 x ?>>, i64}>>) -> !cc.ptr<i64>
// CHECK:           cc.store %[[VAL_2]], %[[VAL_4]] : !cc.ptr<i64>
// CHECK:           return
// CHECK:         }

// CHECK-DAG:     llvm.mlir.global private constant @cstr.6800("h\00") {addr_space = 0 : i32}
// CHECK-DAG:     llvm.mlir.global private constant @cstr.7800("x\00") {addr_space = 0 : i32}
// CHECK-DAG:     llvm.mlir.global private constant @cstr.7900("y\00") {addr_space = 0 : i32}
// CHECK-DAG:     llvm.mlir.global private constant @cstr.7A00("z\00") {addr_space = 0 : i32}
// CHECK-DAG:     llvm.mlir.global private constant @cstr.7400("t\00") {addr_space = 0 : i32}
// CHECK-DAG:     llvm.mlir.global private constant @cstr.7300("s\00") {addr_space = 0 : i32}
// CHECK-DAG:     llvm.mlir.global private constant @cstr.727800("rx\00") {addr_space = 0 : i32}
// CHECK-DAG:     llvm.mlir.global private constant @cstr.7068617365645F727800("phased_rx\00") {addr_space = 0 : i32}
// CHECK-DAG:     llvm.mlir.global private constant @cstr.727900("ry\00") {addr_space = 0 : i32}
// CHECK-DAG:     llvm.mlir.global private constant @cstr.727A00("rz\00") {addr_space = 0 : i32}
// CHECK-DAG:     llvm.mlir.global private constant @cstr.753200("u2\00") {addr_space = 0 : i32}
// CHECK-DAG:     llvm.mlir.global private constant @cstr.753300("u3\00") {addr_space = 0 : i32}
// CHECK-DAG:     llvm.mlir.global private constant @cstr.7377617000("swap\00") {addr_space = 0 : i32}
// CHECK-DAG:     llvm.mlir.global private constant @cstr.6D696B6500("mike\00") {addr_space = 0 : i32}
// CHECK-DAG:     llvm.mlir.global private constant @cstr.746F6D00("tom\00") {addr_space = 0 : i32}
// CHECK-DAG:     llvm.mlir.global private constant @cstr.72{{[0-9]+}}00("r{{.*}}\00") {addr_space = 0 : i32}



// LLVM-LABEL:   llvm.func @tocc.test() {
// LLVM-DAG:       %[[VAL_0:.*]] = llvm.mlir.constant(0.000000e+00 : f64) : f64
// LLVM-DAG:       %[[VAL_1:.*]] = llvm.mlir.constant(1.500000e+00 : f64) : f64
// LLVM-DAG:       %[[VAL_2:.*]] = llvm.mlir.constant(2.600000e+00 : f64) : f64
// LLVM-DAG:       %[[VAL_3:.*]] = llvm.mlir.constant(1 : i32) : i32
// LLVM:           %[[VAL_4:.*]] = llvm.alloca %[[VAL_3]] x !llvm.struct<(ptr<i64>, i64)> : (i32) -> !llvm.ptr<struct<(ptr<i64>, i64)>>
// LLVM:           %[[VAL_5:.*]] = llvm.mlir.constant(3 : i64) : i64
// LLVM:           %[[VAL_6:.*]] = llvm.alloca %[[VAL_5]] x i64 : (i64) -> !llvm.ptr<i64>
// LLVM:           llvm.call @__nvqpp__cudaq_em_writeToSpan(%[[VAL_4]], %[[VAL_6]], %[[VAL_5]]) : (!llvm.ptr<struct<(ptr<i64>, i64)>>, !llvm.ptr<i64>, i64) -> ()
// LLVM:           llvm.call @__nvqpp__cudaq_em_allocate_veq(%[[VAL_4]], %[[VAL_5]]) : (!llvm.ptr<struct<(ptr<i64>, i64)>>, i64) -> ()
// LLVM:           %[[VAL_7:.*]] = llvm.mlir.constant(0 : i64) : i64
// LLVM:           %[[VAL_8:.*]] = llvm.getelementptr %[[VAL_4]][0, 0] : (!llvm.ptr<struct<(ptr<i64>, i64)>>) -> !llvm.ptr<ptr<i64>>
// LLVM:           %[[VAL_9:.*]] = llvm.load %[[VAL_8]] : !llvm.ptr<ptr<i64>>
// LLVM:           %[[VAL_10:.*]] = llvm.getelementptr %[[VAL_9]][0] : (!llvm.ptr<i64>) -> !llvm.ptr<i64>
// LLVM:           %[[VAL_11:.*]] = llvm.mlir.constant(1 : i32) : i32
// LLVM:           %[[VAL_12:.*]] = llvm.alloca %[[VAL_11]] x !llvm.struct<(ptr<i64>, i64)> : (i32) -> !llvm.ptr<struct<(ptr<i64>, i64)>>
// LLVM:           %[[VAL_13:.*]] = llvm.mlir.constant(1 : i64) : i64
// LLVM:           llvm.call @__nvqpp__cudaq_em_writeToSpan(%[[VAL_12]], %[[VAL_10]], %[[VAL_13]]) : (!llvm.ptr<struct<(ptr<i64>, i64)>>, !llvm.ptr<i64>, i64) -> ()
// LLVM:           %[[VAL_14:.*]] = llvm.load %[[VAL_8]] : !llvm.ptr<ptr<i64>>
// LLVM:           %[[VAL_15:.*]] = llvm.getelementptr %[[VAL_14]][1] : (!llvm.ptr<i64>) -> !llvm.ptr<i64>
// LLVM:           %[[VAL_16:.*]] = llvm.mlir.constant(1 : i32) : i32
// LLVM:           %[[VAL_17:.*]] = llvm.alloca %[[VAL_16]] x !llvm.struct<(ptr<i64>, i64)> : (i32) -> !llvm.ptr<struct<(ptr<i64>, i64)>>
// LLVM:           llvm.call @__nvqpp__cudaq_em_writeToSpan(%[[VAL_17]], %[[VAL_15]], %[[VAL_13]]) : (!llvm.ptr<struct<(ptr<i64>, i64)>>, !llvm.ptr<i64>, i64) -> ()
// LLVM:           %[[VAL_18:.*]] = llvm.mlir.constant(2 : i64) : i64
// LLVM:           %[[VAL_19:.*]] = llvm.load %[[VAL_8]] : !llvm.ptr<ptr<i64>>
// LLVM:           %[[VAL_20:.*]] = llvm.getelementptr %[[VAL_19]][2] : (!llvm.ptr<i64>) -> !llvm.ptr<i64>
// LLVM:           %[[VAL_21:.*]] = llvm.mlir.constant(1 : i32) : i32
// LLVM:           %[[VAL_22:.*]] = llvm.alloca %[[VAL_21]] x !llvm.struct<(ptr<i64>, i64)> : (i32) -> !llvm.ptr<struct<(ptr<i64>, i64)>>
// LLVM:           llvm.call @__nvqpp__cudaq_em_writeToSpan(%[[VAL_22]], %[[VAL_20]], %[[VAL_13]]) : (!llvm.ptr<struct<(ptr<i64>, i64)>>, !llvm.ptr<i64>, i64) -> ()
// LLVM:           %[[VAL_23:.*]] = llvm.mlir.addressof @cstr.6800 : !llvm.ptr<array<2 x i8>>
// LLVM:           %[[VAL_24:.*]] = llvm.bitcast %[[VAL_23]] : !llvm.ptr<array<2 x i8>> to !llvm.ptr<i8>
// LLVM:           %[[VAL_25:.*]] = llvm.inttoptr %[[VAL_7]] : i64 to !llvm.ptr<f64>
// LLVM:           %[[VAL_26:.*]] = llvm.mlir.constant(1 : i32) : i32
// LLVM:           %[[VAL_27:.*]] = llvm.alloca %[[VAL_26]] x !llvm.struct<(ptr<i64>, i64)> : (i32) -> !llvm.ptr<struct<(ptr<i64>, i64)>>
// LLVM:           %[[VAL_28:.*]] = llvm.inttoptr %[[VAL_7]] : i64 to !llvm.ptr<i64>
// LLVM:           llvm.call @__nvqpp__cudaq_em_writeToSpan(%[[VAL_27]], %[[VAL_28]], %[[VAL_7]]) : (!llvm.ptr<struct<(ptr<i64>, i64)>>, !llvm.ptr<i64>, i64) -> ()
// LLVM:           %[[VAL_29:.*]] = llvm.mlir.constant(false) : i1
// LLVM:           llvm.call @__nvqpp__cudaq_em_apply(%[[VAL_24]], %[[VAL_7]], %[[VAL_25]], %[[VAL_27]], %[[VAL_12]], %[[VAL_29]]) : (!llvm.ptr<i8>, i64, !llvm.ptr<f64>, !llvm.ptr<struct<(ptr<i64>, i64)>>, !llvm.ptr<struct<(ptr<i64>, i64)>>, i1) -> ()
// LLVM:           %[[VAL_30:.*]] = llvm.mlir.addressof @cstr.7800 : !llvm.ptr<array<2 x i8>>
// LLVM:           %[[VAL_31:.*]] = llvm.bitcast %[[VAL_30]] : !llvm.ptr<array<2 x i8>> to !llvm.ptr<i8>
// LLVM:           llvm.call @__nvqpp__cudaq_em_apply(%[[VAL_31]], %[[VAL_7]], %[[VAL_25]], %[[VAL_12]], %[[VAL_17]], %[[VAL_29]]) : (!llvm.ptr<i8>, i64, !llvm.ptr<f64>, !llvm.ptr<struct<(ptr<i64>, i64)>>, !llvm.ptr<struct<(ptr<i64>, i64)>>, i1) -> ()
// LLVM:           %[[VAL_32:.*]] = llvm.mlir.constant(1 : i32) : i32
// LLVM:           %[[VAL_33:.*]] = llvm.alloca %[[VAL_32]] x !llvm.struct<(ptr<i64>, i64)> : (i32) -> !llvm.ptr<struct<(ptr<i64>, i64)>>
// LLVM:           llvm.call @__nvqpp__cudaq_em_writeToSpan(%[[VAL_33]], %[[VAL_28]], %[[VAL_7]]) : (!llvm.ptr<struct<(ptr<i64>, i64)>>, !llvm.ptr<i64>, i64) -> ()
// LLVM:           llvm.call @__nvqpp__cudaq_em_apply(%[[VAL_31]], %[[VAL_7]], %[[VAL_25]], %[[VAL_33]], %[[VAL_12]], %[[VAL_29]]) : (!llvm.ptr<i8>, i64, !llvm.ptr<f64>, !llvm.ptr<struct<(ptr<i64>, i64)>>, !llvm.ptr<struct<(ptr<i64>, i64)>>, i1) -> ()
// LLVM:           %[[VAL_34:.*]] = llvm.mlir.addressof @cstr.7900 : !llvm.ptr<array<2 x i8>>
// LLVM:           %[[VAL_35:.*]] = llvm.bitcast %[[VAL_34]] : !llvm.ptr<array<2 x i8>> to !llvm.ptr<i8>
// LLVM:           %[[VAL_36:.*]] = llvm.mlir.constant(1 : i32) : i32
// LLVM:           %[[VAL_37:.*]] = llvm.alloca %[[VAL_36]] x !llvm.struct<(ptr<i64>, i64)> : (i32) -> !llvm.ptr<struct<(ptr<i64>, i64)>>
// LLVM:           llvm.call @__nvqpp__cudaq_em_writeToSpan(%[[VAL_37]], %[[VAL_28]], %[[VAL_7]]) : (!llvm.ptr<struct<(ptr<i64>, i64)>>, !llvm.ptr<i64>, i64) -> ()
// LLVM:           llvm.call @__nvqpp__cudaq_em_apply(%[[VAL_35]], %[[VAL_7]], %[[VAL_25]], %[[VAL_37]], %[[VAL_22]], %[[VAL_29]]) : (!llvm.ptr<i8>, i64, !llvm.ptr<f64>, !llvm.ptr<struct<(ptr<i64>, i64)>>, !llvm.ptr<struct<(ptr<i64>, i64)>>, i1) -> ()
// LLVM:           %[[VAL_38:.*]] = llvm.mlir.addressof @cstr.7A00 : !llvm.ptr<array<2 x i8>>
// LLVM:           %[[VAL_39:.*]] = llvm.bitcast %[[VAL_38]] : !llvm.ptr<array<2 x i8>> to !llvm.ptr<i8>
// LLVM:           %[[VAL_40:.*]] = llvm.mlir.constant(1 : i32) : i32
// LLVM:           %[[VAL_41:.*]] = llvm.alloca %[[VAL_40]] x !llvm.struct<(ptr<i64>, i64)> : (i32) -> !llvm.ptr<struct<(ptr<i64>, i64)>>
// LLVM:           %[[VAL_42:.*]] = llvm.getelementptr %[[VAL_22]][1] : (!llvm.ptr<struct<(ptr<i64>, i64)>>) -> !llvm.ptr<i64>
// LLVM:           %[[VAL_43:.*]] = llvm.load %[[VAL_42]] : !llvm.ptr<i64>
// LLVM:           %[[VAL_44:.*]] = llvm.add %[[VAL_7]], %[[VAL_43]]  : i64
// LLVM:           %[[VAL_45:.*]] = llvm.getelementptr %[[VAL_12]][1] : (!llvm.ptr<struct<(ptr<i64>, i64)>>) -> !llvm.ptr<i64>
// LLVM:           %[[VAL_46:.*]] = llvm.load %[[VAL_45]] : !llvm.ptr<i64>
// LLVM:           %[[VAL_47:.*]] = llvm.add %[[VAL_44]], %[[VAL_46]]  : i64
// LLVM:           %[[VAL_48:.*]] = llvm.alloca %[[VAL_47]] x i64 : (i64) -> !llvm.ptr<i64>
// LLVM:           llvm.call @__nvqpp__cudaq_em_writeToSpan(%[[VAL_41]], %[[VAL_48]], %[[VAL_47]]) : (!llvm.ptr<struct<(ptr<i64>, i64)>>, !llvm.ptr<i64>, i64) -> ()
// LLVM:           %[[VAL_49:.*]] = llvm.getelementptr %[[VAL_48]][0] : (!llvm.ptr<i64>) -> !llvm.ptr<i64>
// LLVM:           %[[VAL_50:.*]] = llvm.load %[[VAL_42]] : !llvm.ptr<i64>
// LLVM:           llvm.call @__nvqpp__cudaq_em_concatSpan(%[[VAL_49]], %[[VAL_22]], %[[VAL_50]]) : (!llvm.ptr<i64>, !llvm.ptr<struct<(ptr<i64>, i64)>>, i64) -> ()
// LLVM:           %[[VAL_51:.*]] = llvm.add %[[VAL_7]], %[[VAL_50]]  : i64
// LLVM:           %[[VAL_52:.*]] = llvm.getelementptr %[[VAL_48]]{{\[}}%[[VAL_51]]] : (!llvm.ptr<i64>, i64) -> !llvm.ptr<i64>
// LLVM:           %[[VAL_53:.*]] = llvm.load %[[VAL_45]] : !llvm.ptr<i64>
// LLVM:           llvm.call @__nvqpp__cudaq_em_concatSpan(%[[VAL_52]], %[[VAL_12]], %[[VAL_53]]) : (!llvm.ptr<i64>, !llvm.ptr<struct<(ptr<i64>, i64)>>, i64) -> ()
// LLVM:           llvm.call @__nvqpp__cudaq_em_apply(%[[VAL_39]], %[[VAL_7]], %[[VAL_25]], %[[VAL_41]], %[[VAL_17]], %[[VAL_29]]) : (!llvm.ptr<i8>, i64, !llvm.ptr<f64>, !llvm.ptr<struct<(ptr<i64>, i64)>>, !llvm.ptr<struct<(ptr<i64>, i64)>>, i1) -> ()
// LLVM:           %[[VAL_54:.*]] = llvm.mlir.constant(1 : i32) : i32
// LLVM:           %[[VAL_55:.*]] = llvm.alloca %[[VAL_54]] x !llvm.struct<(ptr<i64>, i64)> : (i32) -> !llvm.ptr<struct<(ptr<i64>, i64)>>
// LLVM:           llvm.call @__nvqpp__cudaq_em_writeToSpan(%[[VAL_55]], %[[VAL_28]], %[[VAL_7]]) : (!llvm.ptr<struct<(ptr<i64>, i64)>>, !llvm.ptr<i64>, i64) -> ()
// LLVM:           llvm.call @__nvqpp__cudaq_em_apply(%[[VAL_39]], %[[VAL_7]], %[[VAL_25]], %[[VAL_55]], %[[VAL_17]], %[[VAL_29]]) : (!llvm.ptr<i8>, i64, !llvm.ptr<f64>, !llvm.ptr<struct<(ptr<i64>, i64)>>, !llvm.ptr<struct<(ptr<i64>, i64)>>, i1) -> ()
// LLVM:           %[[VAL_56:.*]] = llvm.mlir.addressof @cstr.7400 : !llvm.ptr<array<2 x i8>>
// LLVM:           %[[VAL_57:.*]] = llvm.bitcast %[[VAL_56]] : !llvm.ptr<array<2 x i8>> to !llvm.ptr<i8>
// LLVM:           %[[VAL_58:.*]] = llvm.mlir.constant(1 : i32) : i32
// LLVM:           %[[VAL_59:.*]] = llvm.alloca %[[VAL_58]] x !llvm.struct<(ptr<i64>, i64)> : (i32) -> !llvm.ptr<struct<(ptr<i64>, i64)>>
// LLVM:           llvm.call @__nvqpp__cudaq_em_writeToSpan(%[[VAL_59]], %[[VAL_28]], %[[VAL_7]]) : (!llvm.ptr<struct<(ptr<i64>, i64)>>, !llvm.ptr<i64>, i64) -> ()
// LLVM:           llvm.call @__nvqpp__cudaq_em_apply(%[[VAL_57]], %[[VAL_7]], %[[VAL_25]], %[[VAL_59]], %[[VAL_17]], %[[VAL_29]]) : (!llvm.ptr<i8>, i64, !llvm.ptr<f64>, !llvm.ptr<struct<(ptr<i64>, i64)>>, !llvm.ptr<struct<(ptr<i64>, i64)>>, i1) -> ()
// LLVM:           %[[VAL_60:.*]] = llvm.mlir.addressof @cstr.7300 : !llvm.ptr<array<2 x i8>>
// LLVM:           %[[VAL_61:.*]] = llvm.bitcast %[[VAL_60]] : !llvm.ptr<array<2 x i8>> to !llvm.ptr<i8>
// LLVM:           %[[VAL_62:.*]] = llvm.mlir.constant(1 : i32) : i32
// LLVM:           %[[VAL_63:.*]] = llvm.alloca %[[VAL_62]] x !llvm.struct<(ptr<i64>, i64)> : (i32) -> !llvm.ptr<struct<(ptr<i64>, i64)>>
// LLVM:           llvm.call @__nvqpp__cudaq_em_writeToSpan(%[[VAL_63]], %[[VAL_28]], %[[VAL_7]]) : (!llvm.ptr<struct<(ptr<i64>, i64)>>, !llvm.ptr<i64>, i64) -> ()
// LLVM:           llvm.call @__nvqpp__cudaq_em_apply(%[[VAL_61]], %[[VAL_7]], %[[VAL_25]], %[[VAL_63]], %[[VAL_17]], %[[VAL_29]]) : (!llvm.ptr<i8>, i64, !llvm.ptr<f64>, !llvm.ptr<struct<(ptr<i64>, i64)>>, !llvm.ptr<struct<(ptr<i64>, i64)>>, i1) -> ()
// LLVM:           %[[VAL_64:.*]] = llvm.mlir.addressof @cstr.727800 : !llvm.ptr<array<3 x i8>>
// LLVM:           %[[VAL_65:.*]] = llvm.bitcast %[[VAL_64]] : !llvm.ptr<array<3 x i8>> to !llvm.ptr<i8>
// LLVM:           %[[VAL_66:.*]] = llvm.alloca %[[VAL_13]] x f64 : (i64) -> !llvm.ptr<f64>
// LLVM:           %[[VAL_67:.*]] = llvm.getelementptr %[[VAL_66]][0] : (!llvm.ptr<f64>) -> !llvm.ptr<f64>
// LLVM:           llvm.store %[[VAL_2]], %[[VAL_67]] : !llvm.ptr<f64>
// LLVM:           llvm.call @__nvqpp__cudaq_em_apply(%[[VAL_65]], %[[VAL_13]], %[[VAL_66]], %[[VAL_12]], %[[VAL_17]], %[[VAL_29]]) : (!llvm.ptr<i8>, i64, !llvm.ptr<f64>, !llvm.ptr<struct<(ptr<i64>, i64)>>, !llvm.ptr<struct<(ptr<i64>, i64)>>, i1) -> ()
// LLVM:           %[[VAL_68:.*]] = llvm.mlir.addressof @cstr.7068617365645F727800 : !llvm.ptr<array<10 x i8>>
// LLVM:           %[[VAL_69:.*]] = llvm.bitcast %[[VAL_68]] : !llvm.ptr<array<10 x i8>> to !llvm.ptr<i8>
// LLVM:           %[[VAL_70:.*]] = llvm.alloca %[[VAL_18]] x f64 : (i64) -> !llvm.ptr<f64>
// LLVM:           %[[VAL_71:.*]] = llvm.getelementptr %[[VAL_70]][0] : (!llvm.ptr<f64>) -> !llvm.ptr<f64>
// LLVM:           llvm.store %[[VAL_2]], %[[VAL_71]] : !llvm.ptr<f64>
// LLVM:           %[[VAL_72:.*]] = llvm.getelementptr %[[VAL_70]][1] : (!llvm.ptr<f64>) -> !llvm.ptr<f64>
// LLVM:           llvm.store %[[VAL_1]], %[[VAL_72]] : !llvm.ptr<f64>
// LLVM:           %[[VAL_73:.*]] = llvm.mlir.constant(1 : i32) : i32
// LLVM:           %[[VAL_74:.*]] = llvm.alloca %[[VAL_73]] x !llvm.struct<(ptr<i64>, i64)> : (i32) -> !llvm.ptr<struct<(ptr<i64>, i64)>>
// LLVM:           llvm.call @__nvqpp__cudaq_em_writeToSpan(%[[VAL_74]], %[[VAL_28]], %[[VAL_7]]) : (!llvm.ptr<struct<(ptr<i64>, i64)>>, !llvm.ptr<i64>, i64) -> ()
// LLVM:           llvm.call @__nvqpp__cudaq_em_apply(%[[VAL_69]], %[[VAL_18]], %[[VAL_70]], %[[VAL_74]], %[[VAL_17]], %[[VAL_29]]) : (!llvm.ptr<i8>, i64, !llvm.ptr<f64>, !llvm.ptr<struct<(ptr<i64>, i64)>>, !llvm.ptr<struct<(ptr<i64>, i64)>>, i1) -> ()
// LLVM:           %[[VAL_75:.*]] = llvm.alloca %[[VAL_13]] x f64 : (i64) -> !llvm.ptr<f64>
// LLVM:           %[[VAL_76:.*]] = llvm.getelementptr %[[VAL_75]][0] : (!llvm.ptr<f64>) -> !llvm.ptr<f64>
// LLVM:           llvm.store %[[VAL_1]], %[[VAL_76]] : !llvm.ptr<f64>
// LLVM:           %[[VAL_77:.*]] = llvm.mlir.constant(1 : i32) : i32
// LLVM:           %[[VAL_78:.*]] = llvm.alloca %[[VAL_77]] x !llvm.struct<(ptr<i64>, i64)> : (i32) -> !llvm.ptr<struct<(ptr<i64>, i64)>>
// LLVM:           llvm.call @__nvqpp__cudaq_em_writeToSpan(%[[VAL_78]], %[[VAL_28]], %[[VAL_7]]) : (!llvm.ptr<struct<(ptr<i64>, i64)>>, !llvm.ptr<i64>, i64) -> ()
// LLVM:           llvm.call @__nvqpp__cudaq_em_apply(%[[VAL_65]], %[[VAL_13]], %[[VAL_75]], %[[VAL_78]], %[[VAL_17]], %[[VAL_29]]) : (!llvm.ptr<i8>, i64, !llvm.ptr<f64>, !llvm.ptr<struct<(ptr<i64>, i64)>>, !llvm.ptr<struct<(ptr<i64>, i64)>>, i1) -> ()
// LLVM:           %[[VAL_79:.*]] = llvm.mlir.constant(1 : i32) : i32
// LLVM:           %[[VAL_80:.*]] = llvm.alloca %[[VAL_79]] x !llvm.struct<(ptr<i64>, i64)> : (i32) -> !llvm.ptr<struct<(ptr<i64>, i64)>>
// LLVM:           %[[VAL_81:.*]] = llvm.alloca %[[VAL_13]] x i64 : (i64) -> !llvm.ptr<i64>
// LLVM:           %[[VAL_82:.*]] = llvm.call @__nvqpp__cudaq_em_allocate() : () -> i64
// LLVM:           %[[VAL_83:.*]] = llvm.getelementptr %[[VAL_81]][0] : (!llvm.ptr<i64>) -> !llvm.ptr<i64>
// LLVM:           llvm.store %[[VAL_82]], %[[VAL_83]] : !llvm.ptr<i64>
// LLVM:           llvm.call @__nvqpp__cudaq_em_writeToSpan(%[[VAL_80]], %[[VAL_81]], %[[VAL_13]]) : (!llvm.ptr<struct<(ptr<i64>, i64)>>, !llvm.ptr<i64>, i64) -> ()
// LLVM:           %[[VAL_84:.*]] = llvm.alloca %[[VAL_13]] x f64 : (i64) -> !llvm.ptr<f64>
// LLVM:           %[[VAL_85:.*]] = llvm.getelementptr %[[VAL_84]][0] : (!llvm.ptr<f64>) -> !llvm.ptr<f64>
// LLVM:           llvm.store %[[VAL_1]], %[[VAL_85]] : !llvm.ptr<f64>
// LLVM:           %[[VAL_86:.*]] = llvm.mlir.constant(1 : i32) : i32
// LLVM:           %[[VAL_87:.*]] = llvm.alloca %[[VAL_86]] x !llvm.struct<(ptr<i64>, i64)> : (i32) -> !llvm.ptr<struct<(ptr<i64>, i64)>>
// LLVM:           llvm.call @__nvqpp__cudaq_em_writeToSpan(%[[VAL_87]], %[[VAL_28]], %[[VAL_7]]) : (!llvm.ptr<struct<(ptr<i64>, i64)>>, !llvm.ptr<i64>, i64) -> ()
// LLVM:           llvm.call @__nvqpp__cudaq_em_apply(%[[VAL_65]], %[[VAL_13]], %[[VAL_84]], %[[VAL_87]], %[[VAL_80]], %[[VAL_29]]) : (!llvm.ptr<i8>, i64, !llvm.ptr<f64>, !llvm.ptr<struct<(ptr<i64>, i64)>>, !llvm.ptr<struct<(ptr<i64>, i64)>>, i1) -> ()
// LLVM:           %[[VAL_88:.*]] = llvm.mlir.constant(1 : i32) : i32
// LLVM:           %[[VAL_89:.*]] = llvm.alloca %[[VAL_88]] x !llvm.struct<(ptr<i64>, i64)> : (i32) -> !llvm.ptr<struct<(ptr<i64>, i64)>>
// LLVM:           llvm.call @__nvqpp__cudaq_em_writeToSpan(%[[VAL_89]], %[[VAL_28]], %[[VAL_7]]) : (!llvm.ptr<struct<(ptr<i64>, i64)>>, !llvm.ptr<i64>, i64) -> ()
// LLVM:           llvm.call @__nvqpp__cudaq_em_apply(%[[VAL_31]], %[[VAL_7]], %[[VAL_25]], %[[VAL_89]], %[[VAL_80]], %[[VAL_29]]) : (!llvm.ptr<i8>, i64, !llvm.ptr<f64>, !llvm.ptr<struct<(ptr<i64>, i64)>>, !llvm.ptr<struct<(ptr<i64>, i64)>>, i1) -> ()
// LLVM:           llvm.call @__nvqpp__cudaq_em_return(%[[VAL_80]]) : (!llvm.ptr<struct<(ptr<i64>, i64)>>) -> ()
// LLVM:           %[[VAL_90:.*]] = llvm.mlir.addressof @cstr.727900 : !llvm.ptr<array<3 x i8>>
// LLVM:           %[[VAL_91:.*]] = llvm.bitcast %[[VAL_90]] : !llvm.ptr<array<3 x i8>> to !llvm.ptr<i8>
// LLVM:           %[[VAL_92:.*]] = llvm.alloca %[[VAL_13]] x f64 : (i64) -> !llvm.ptr<f64>
// LLVM:           %[[VAL_93:.*]] = llvm.getelementptr %[[VAL_92]][0] : (!llvm.ptr<f64>) -> !llvm.ptr<f64>
// LLVM:           llvm.store %[[VAL_2]], %[[VAL_93]] : !llvm.ptr<f64>
// LLVM:           %[[VAL_94:.*]] = llvm.mlir.constant(1 : i32) : i32
// LLVM:           %[[VAL_95:.*]] = llvm.alloca %[[VAL_94]] x !llvm.struct<(ptr<i64>, i64)> : (i32) -> !llvm.ptr<struct<(ptr<i64>, i64)>>
// LLVM:           llvm.call @__nvqpp__cudaq_em_writeToSpan(%[[VAL_95]], %[[VAL_28]], %[[VAL_7]]) : (!llvm.ptr<struct<(ptr<i64>, i64)>>, !llvm.ptr<i64>, i64) -> ()
// LLVM:           llvm.call @__nvqpp__cudaq_em_apply(%[[VAL_91]], %[[VAL_13]], %[[VAL_92]], %[[VAL_95]], %[[VAL_17]], %[[VAL_29]]) : (!llvm.ptr<i8>, i64, !llvm.ptr<f64>, !llvm.ptr<struct<(ptr<i64>, i64)>>, !llvm.ptr<struct<(ptr<i64>, i64)>>, i1) -> ()
// LLVM:           %[[VAL_96:.*]] = llvm.mlir.addressof @cstr.727A00 : !llvm.ptr<array<3 x i8>>
// LLVM:           %[[VAL_97:.*]] = llvm.bitcast %[[VAL_96]] : !llvm.ptr<array<3 x i8>> to !llvm.ptr<i8>
// LLVM:           %[[VAL_98:.*]] = llvm.alloca %[[VAL_13]] x f64 : (i64) -> !llvm.ptr<f64>
// LLVM:           %[[VAL_99:.*]] = llvm.getelementptr %[[VAL_98]][0] : (!llvm.ptr<f64>) -> !llvm.ptr<f64>
// LLVM:           llvm.store %[[VAL_1]], %[[VAL_99]] : !llvm.ptr<f64>
// LLVM:           %[[VAL_100:.*]] = llvm.mlir.constant(1 : i32) : i32
// LLVM:           %[[VAL_101:.*]] = llvm.alloca %[[VAL_100]] x !llvm.struct<(ptr<i64>, i64)> : (i32) -> !llvm.ptr<struct<(ptr<i64>, i64)>>
// LLVM:           llvm.call @__nvqpp__cudaq_em_writeToSpan(%[[VAL_101]], %[[VAL_28]], %[[VAL_7]]) : (!llvm.ptr<struct<(ptr<i64>, i64)>>, !llvm.ptr<i64>, i64) -> ()
// LLVM:           llvm.call @__nvqpp__cudaq_em_apply(%[[VAL_97]], %[[VAL_13]], %[[VAL_98]], %[[VAL_101]], %[[VAL_12]], %[[VAL_29]]) : (!llvm.ptr<i8>, i64, !llvm.ptr<f64>, !llvm.ptr<struct<(ptr<i64>, i64)>>, !llvm.ptr<struct<(ptr<i64>, i64)>>, i1) -> ()
// LLVM:           %[[VAL_102:.*]] = llvm.mlir.addressof @cstr.753200 : !llvm.ptr<array<3 x i8>>
// LLVM:           %[[VAL_103:.*]] = llvm.bitcast %[[VAL_102]] : !llvm.ptr<array<3 x i8>> to !llvm.ptr<i8>
// LLVM:           %[[VAL_104:.*]] = llvm.alloca %[[VAL_18]] x f64 : (i64) -> !llvm.ptr<f64>
// LLVM:           %[[VAL_105:.*]] = llvm.getelementptr %[[VAL_104]][0] : (!llvm.ptr<f64>) -> !llvm.ptr<f64>
// LLVM:           llvm.store %[[VAL_1]], %[[VAL_105]] : !llvm.ptr<f64>
// LLVM:           %[[VAL_106:.*]] = llvm.getelementptr %[[VAL_104]][1] : (!llvm.ptr<f64>) -> !llvm.ptr<f64>
// LLVM:           llvm.store %[[VAL_2]], %[[VAL_106]] : !llvm.ptr<f64>
// LLVM:           %[[VAL_107:.*]] = llvm.mlir.constant(1 : i32) : i32
// LLVM:           %[[VAL_108:.*]] = llvm.alloca %[[VAL_107]] x !llvm.struct<(ptr<i64>, i64)> : (i32) -> !llvm.ptr<struct<(ptr<i64>, i64)>>
// LLVM:           llvm.call @__nvqpp__cudaq_em_writeToSpan(%[[VAL_108]], %[[VAL_28]], %[[VAL_7]]) : (!llvm.ptr<struct<(ptr<i64>, i64)>>, !llvm.ptr<i64>, i64) -> ()
// LLVM:           llvm.call @__nvqpp__cudaq_em_apply(%[[VAL_103]], %[[VAL_18]], %[[VAL_104]], %[[VAL_108]], %[[VAL_12]], %[[VAL_29]]) : (!llvm.ptr<i8>, i64, !llvm.ptr<f64>, !llvm.ptr<struct<(ptr<i64>, i64)>>, !llvm.ptr<struct<(ptr<i64>, i64)>>, i1) -> ()
// LLVM:           %[[VAL_109:.*]] = llvm.mlir.addressof @cstr.753300 : !llvm.ptr<array<3 x i8>>
// LLVM:           %[[VAL_110:.*]] = llvm.bitcast %[[VAL_109]] : !llvm.ptr<array<3 x i8>> to !llvm.ptr<i8>
// LLVM:           %[[VAL_111:.*]] = llvm.alloca %[[VAL_5]] x f64 : (i64) -> !llvm.ptr<f64>
// LLVM:           %[[VAL_112:.*]] = llvm.getelementptr %[[VAL_111]][0] : (!llvm.ptr<f64>) -> !llvm.ptr<f64>
// LLVM:           llvm.store %[[VAL_1]], %[[VAL_112]] : !llvm.ptr<f64>
// LLVM:           %[[VAL_113:.*]] = llvm.getelementptr %[[VAL_111]][1] : (!llvm.ptr<f64>) -> !llvm.ptr<f64>
// LLVM:           llvm.store %[[VAL_2]], %[[VAL_113]] : !llvm.ptr<f64>
// LLVM:           %[[VAL_114:.*]] = llvm.getelementptr %[[VAL_111]][2] : (!llvm.ptr<f64>) -> !llvm.ptr<f64>
// LLVM:           llvm.store %[[VAL_0]], %[[VAL_114]] : !llvm.ptr<f64>
// LLVM:           %[[VAL_115:.*]] = llvm.mlir.constant(1 : i32) : i32
// LLVM:           %[[VAL_116:.*]] = llvm.alloca %[[VAL_115]] x !llvm.struct<(ptr<i64>, i64)> : (i32) -> !llvm.ptr<struct<(ptr<i64>, i64)>>
// LLVM:           llvm.call @__nvqpp__cudaq_em_writeToSpan(%[[VAL_116]], %[[VAL_28]], %[[VAL_7]]) : (!llvm.ptr<struct<(ptr<i64>, i64)>>, !llvm.ptr<i64>, i64) -> ()
// LLVM:           llvm.call @__nvqpp__cudaq_em_apply(%[[VAL_110]], %[[VAL_5]], %[[VAL_111]], %[[VAL_116]], %[[VAL_12]], %[[VAL_29]]) : (!llvm.ptr<i8>, i64, !llvm.ptr<f64>, !llvm.ptr<struct<(ptr<i64>, i64)>>, !llvm.ptr<struct<(ptr<i64>, i64)>>, i1) -> ()
// LLVM:           %[[VAL_117:.*]] = llvm.mlir.addressof @cstr.7377617000 : !llvm.ptr<array<5 x i8>>
// LLVM:           %[[VAL_118:.*]] = llvm.bitcast %[[VAL_117]] : !llvm.ptr<array<5 x i8>> to !llvm.ptr<i8>
// LLVM:           %[[VAL_119:.*]] = llvm.mlir.constant(1 : i32) : i32
// LLVM:           %[[VAL_120:.*]] = llvm.alloca %[[VAL_119]] x !llvm.struct<(ptr<i64>, i64)> : (i32) -> !llvm.ptr<struct<(ptr<i64>, i64)>>
// LLVM:           llvm.call @__nvqpp__cudaq_em_writeToSpan(%[[VAL_120]], %[[VAL_28]], %[[VAL_7]]) : (!llvm.ptr<struct<(ptr<i64>, i64)>>, !llvm.ptr<i64>, i64) -> ()
// LLVM:           %[[VAL_121:.*]] = llvm.mlir.constant(1 : i32) : i32
// LLVM:           %[[VAL_122:.*]] = llvm.alloca %[[VAL_121]] x !llvm.struct<(ptr<i64>, i64)> : (i32) -> !llvm.ptr<struct<(ptr<i64>, i64)>>
// LLVM:           %[[VAL_123:.*]] = llvm.load %[[VAL_45]] : !llvm.ptr<i64>
// LLVM:           %[[VAL_124:.*]] = llvm.add %[[VAL_7]], %[[VAL_123]]  : i64
// LLVM:           %[[VAL_125:.*]] = llvm.load %[[VAL_42]] : !llvm.ptr<i64>
// LLVM:           %[[VAL_126:.*]] = llvm.add %[[VAL_124]], %[[VAL_125]]  : i64
// LLVM:           %[[VAL_127:.*]] = llvm.alloca %[[VAL_126]] x i64 : (i64) -> !llvm.ptr<i64>
// LLVM:           llvm.call @__nvqpp__cudaq_em_writeToSpan(%[[VAL_122]], %[[VAL_127]], %[[VAL_126]]) : (!llvm.ptr<struct<(ptr<i64>, i64)>>, !llvm.ptr<i64>, i64) -> ()
// LLVM:           %[[VAL_128:.*]] = llvm.getelementptr %[[VAL_127]][0] : (!llvm.ptr<i64>) -> !llvm.ptr<i64>
// LLVM:           %[[VAL_129:.*]] = llvm.load %[[VAL_45]] : !llvm.ptr<i64>
// LLVM:           llvm.call @__nvqpp__cudaq_em_concatSpan(%[[VAL_128]], %[[VAL_12]], %[[VAL_129]]) : (!llvm.ptr<i64>, !llvm.ptr<struct<(ptr<i64>, i64)>>, i64) -> ()
// LLVM:           %[[VAL_130:.*]] = llvm.add %[[VAL_7]], %[[VAL_129]]  : i64
// LLVM:           %[[VAL_131:.*]] = llvm.getelementptr %[[VAL_127]]{{\[}}%[[VAL_130]]] : (!llvm.ptr<i64>, i64) -> !llvm.ptr<i64>
// LLVM:           %[[VAL_132:.*]] = llvm.load %[[VAL_42]] : !llvm.ptr<i64>
// LLVM:           llvm.call @__nvqpp__cudaq_em_concatSpan(%[[VAL_131]], %[[VAL_22]], %[[VAL_132]]) : (!llvm.ptr<i64>, !llvm.ptr<struct<(ptr<i64>, i64)>>, i64) -> ()
// LLVM:           llvm.call @__nvqpp__cudaq_em_apply(%[[VAL_118]], %[[VAL_7]], %[[VAL_25]], %[[VAL_120]], %[[VAL_122]], %[[VAL_29]]) : (!llvm.ptr<i8>, i64, !llvm.ptr<f64>, !llvm.ptr<struct<(ptr<i64>, i64)>>, !llvm.ptr<struct<(ptr<i64>, i64)>>, i1) -> ()
// LLVM:           %[[VAL_133:.*]] = llvm.mlir.addressof @cstr.6D696B6500 : !llvm.ptr<array<5 x i8>>
// LLVM:           %[[VAL_134:.*]] = llvm.bitcast %[[VAL_133]] : !llvm.ptr<array<5 x i8>> to !llvm.ptr<i8>
// LLVM:           %[[VAL_135:.*]] = llvm.call @__nvqpp__cudaq_em_measure(%[[VAL_22]], %[[VAL_134]]) : (!llvm.ptr<struct<(ptr<i64>, i64)>>, !llvm.ptr<i8>) -> i32
// LLVM:           %[[VAL_136:.*]] = llvm.mlir.constant(1 : i32) : i32
// LLVM:           %[[VAL_137:.*]] = llvm.alloca %[[VAL_136]] x !llvm.struct<(ptr<i64>, i64)> : (i32) -> !llvm.ptr<struct<(ptr<i64>, i64)>>
// LLVM:           llvm.call @__nvqpp__cudaq_em_writeToSpan(%[[VAL_137]], %[[VAL_28]], %[[VAL_7]]) : (!llvm.ptr<struct<(ptr<i64>, i64)>>, !llvm.ptr<i64>, i64) -> ()
// LLVM:           llvm.call @__nvqpp__cudaq_em_apply(%[[VAL_24]], %[[VAL_7]], %[[VAL_25]], %[[VAL_137]], %[[VAL_17]], %[[VAL_29]]) : (!llvm.ptr<i8>, i64, !llvm.ptr<f64>, !llvm.ptr<struct<(ptr<i64>, i64)>>, !llvm.ptr<struct<(ptr<i64>, i64)>>, i1) -> ()
// LLVM:           %[[VAL_138:.*]] = llvm.mlir.addressof @cstr.746F6D00 : !llvm.ptr<array<4 x i8>>
// LLVM:           %[[VAL_139:.*]] = llvm.bitcast %[[VAL_138]] : !llvm.ptr<array<4 x i8>> to !llvm.ptr<i8>
// LLVM:           %[[VAL_140:.*]] = llvm.call @__nvqpp__cudaq_em_measure(%[[VAL_17]], %[[VAL_139]]) : (!llvm.ptr<struct<(ptr<i64>, i64)>>, !llvm.ptr<i8>) -> i32
// LLVM:           %[[VAL_141:.*]] = llvm.mlir.constant(1 : i32) : i32
// LLVM:           %[[VAL_142:.*]] = llvm.alloca %[[VAL_141]] x !llvm.struct<(ptr<i64>, i64)> : (i32) -> !llvm.ptr<struct<(ptr<i64>, i64)>>
// LLVM:           llvm.call @__nvqpp__cudaq_em_writeToSpan(%[[VAL_142]], %[[VAL_28]], %[[VAL_7]]) : (!llvm.ptr<struct<(ptr<i64>, i64)>>, !llvm.ptr<i64>, i64) -> ()
// LLVM:           %[[VAL_143:.*]] = llvm.mlir.constant(true) : i1
// LLVM:           llvm.call @__nvqpp__cudaq_em_apply(%[[VAL_61]], %[[VAL_7]], %[[VAL_25]], %[[VAL_142]], %[[VAL_12]], %[[VAL_143]]) : (!llvm.ptr<i8>, i64, !llvm.ptr<f64>, !llvm.ptr<struct<(ptr<i64>, i64)>>, !llvm.ptr<struct<(ptr<i64>, i64)>>, i1) -> ()
// LLVM:           %[[VAL_144:.*]] = llvm.mlir.constant(1 : i32) : i32
// LLVM:           %[[VAL_145:.*]] = llvm.alloca %[[VAL_144]] x !llvm.struct<(ptr<i64>, i64)> : (i32) -> !llvm.ptr<struct<(ptr<i64>, i64)>>
// LLVM:           llvm.call @__nvqpp__cudaq_em_writeToSpan(%[[VAL_145]], %[[VAL_28]], %[[VAL_7]]) : (!llvm.ptr<struct<(ptr<i64>, i64)>>, !llvm.ptr<i64>, i64) -> ()
// LLVM:           llvm.call @__nvqpp__cudaq_em_apply(%[[VAL_24]], %[[VAL_7]], %[[VAL_25]], %[[VAL_145]], %[[VAL_12]], %[[VAL_29]]) : (!llvm.ptr<i8>, i64, !llvm.ptr<f64>, !llvm.ptr<struct<(ptr<i64>, i64)>>, !llvm.ptr<struct<(ptr<i64>, i64)>>, i1) -> ()
// LLVM:           %[[VAL_146:.*]] = llvm.mlir.addressof @cstr.72{{[0-9]+}}00 : !llvm.ptr<array<[[LEN:.*]] x i8>>
// LLVM:           %[[VAL_147:.*]] = llvm.bitcast %[[VAL_146]] : !llvm.ptr<array<[[LEN]] x i8>> to !llvm.ptr<i8>
// LLVM:           %[[VAL_148:.*]] = llvm.call @__nvqpp__cudaq_em_measure(%[[VAL_12]], %[[VAL_147]]) : (!llvm.ptr<struct<(ptr<i64>, i64)>>, !llvm.ptr<i8>) -> i32
// LLVM:           llvm.call @__nvqpp__cudaq_em_return(%[[VAL_4]]) : (!llvm.ptr<struct<(ptr<i64>, i64)>>) -> ()
// LLVM:           llvm.return
// LLVM:         }
// LLVM:         llvm.func @__nvqpp__cudaq_em_allocate() -> i64 attributes {sym_visibility = "private"}

// LLVM-LABEL:   llvm.func @__nvqpp__cudaq_em_allocate_veq(
// LLVM-SAME:      %[[VAL_0:.*]]: !llvm.ptr<struct<(ptr<i64>, i64)>>,
// LLVM-SAME:      %[[VAL_1:.*]]: i64) attributes {sym_visibility = "private"} {
// LLVM:           %[[VAL_2:.*]] = llvm.mlir.constant(1 : i64) : i64
// LLVM:           %[[VAL_3:.*]] = llvm.mlir.constant(0 : i64) : i64
// LLVM:           %[[VAL_4:.*]] = llvm.getelementptr %[[VAL_0]][0, 0] : (!llvm.ptr<struct<(ptr<i64>, i64)>>) -> !llvm.ptr<ptr<i64>>
// LLVM:           %[[VAL_13:.*]] = llvm.load %[[VAL_4]] : !llvm.ptr<ptr<i64>>
// LLVM:           llvm.br ^bb1(%[[VAL_3]] : i64)
// LLVM:         ^bb1(%[[VAL_5:.*]]: i64):
// LLVM:           %[[VAL_6:.*]] = llvm.icmp "slt" %[[VAL_5]], %[[VAL_1]] : i64
// LLVM:           llvm.cond_br %[[VAL_6]], ^bb2(%[[VAL_5]] : i64), ^bb4(%[[VAL_5]] : i64)
// LLVM:         ^bb2(%[[VAL_7:.*]]: i64):
// LLVM:           %[[VAL_8:.*]] = llvm.call @__nvqpp__cudaq_em_allocate() : () -> i64
// LLVM:           %[[VAL_9:.*]] = llvm.getelementptr %[[VAL_13]][%[[VAL_7]]] : (!llvm.ptr<i64>, i64) -> !llvm.ptr<i64>
// LLVM:           llvm.store %[[VAL_8]], %[[VAL_9]] : !llvm.ptr<i64>
// LLVM:           llvm.br ^bb3(%[[VAL_7]] : i64)
// LLVM:         ^bb3(%[[VAL_10:.*]]: i64):
// LLVM:           %[[VAL_11:.*]] = llvm.add %[[VAL_10]], %[[VAL_2]]  : i64
// LLVM:           llvm.br ^bb1(%[[VAL_11]] : i64)
// LLVM:         ^bb4(%[[VAL_12:.*]]: i64):
// LLVM:           llvm.br ^bb5
// LLVM:         ^bb5:
// LLVM:           llvm.return
// LLVM:         }
// LLVM:         llvm.func @__nvqpp__cudaq_em_apply(!llvm.ptr<i8>, i64, !llvm.ptr<f64>, !llvm.ptr<struct<(ptr<i64>, i64)>>, !llvm.ptr<struct<(ptr<i64>, i64)>>, i1) attributes {sym_visibility = "private"}
// LLVM:         llvm.func @llvm.memcpy.p0i8.p0i8.i64(!llvm.ptr<i8>, !llvm.ptr<i8>, i64, i1) attributes {sym_visibility = "private"}

// LLVM-LABEL:   llvm.func @__nvqpp__cudaq_em_concatSpan(
// LLVM-SAME:      %[[VAL_0:.*]]: !llvm.ptr<i64>,
// LLVM-SAME:      %[[VAL_1:.*]]: !llvm.ptr<struct<(ptr<i64>, i64)>>,
// LLVM-SAME:      %[[VAL_2:.*]]: i64) attributes {sym_visibility = "private"} {
// LLVM:           %[[VAL_3:.*]] = llvm.mlir.constant(false) : i1
// LLVM:           %[[VAL_4:.*]] = llvm.mlir.constant(8 : i64) : i64
// LLVM:           %[[VAL_5:.*]] = llvm.getelementptr %[[VAL_1]][0, 0] : (!llvm.ptr<struct<(ptr<i64>, i64)>>) -> !llvm.ptr<ptr<i64>>
// LLVM:           %[[VAL_6:.*]] = llvm.load %[[VAL_5]] : !llvm.ptr<ptr<i64>>
// LLVM:           %[[VAL_7:.*]] = llvm.mul %[[VAL_2]], %[[VAL_4]]  : i64
// LLVM:           %[[VAL_8:.*]] = llvm.bitcast %[[VAL_0]] : !llvm.ptr<i64> to !llvm.ptr<i8>
// LLVM:           %[[VAL_9:.*]] = llvm.bitcast %[[VAL_6]] : !llvm.ptr<i64> to !llvm.ptr<i8>
// LLVM:           llvm.call @llvm.memcpy.p0i8.p0i8.i64(%[[VAL_8]], %[[VAL_9]], %[[VAL_7]], %[[VAL_3]]) : (!llvm.ptr<i8>, !llvm.ptr<i8>, i64, i1) -> ()
// LLVM:           llvm.return
// LLVM:         }
// LLVM:         llvm.func @__nvqpp__cudaq_em_measure(!llvm.ptr<struct<(ptr<i64>, i64)>>, !llvm.ptr<i8>) -> i32 attributes {sym_visibility = "private"}
// LLVM:         llvm.func @__nvqpp__cudaq_em_reset(!llvm.ptr<struct<(ptr<i64>, i64)>>) attributes {sym_visibility = "private"}
// LLVM:         llvm.func @__nvqpp__cudaq_em_return(!llvm.ptr<struct<(ptr<i64>, i64)>>) attributes {sym_visibility = "private"}

// LLVM-LABEL:   llvm.func @__nvqpp__cudaq_em_writeToSpan(
// LLVM-SAME:      %[[VAL_0:.*]]: !llvm.ptr<struct<(ptr<i64>, i64)>>,
// LLVM-SAME:      %[[VAL_1:.*]]: !llvm.ptr<i64>,
// LLVM-SAME:      %[[VAL_2:.*]]: i64) attributes {sym_visibility = "private"} {
// LLVM:           %[[VAL_3:.*]] = llvm.getelementptr %[[VAL_0]][0, 0] : (!llvm.ptr<struct<(ptr<i64>, i64)>>) -> !llvm.ptr<ptr<i64>>
// LLVM:           llvm.store %[[VAL_1]], %[[VAL_3]] : !llvm.ptr<ptr<i64>>
// LLVM:           %[[VAL_4:.*]] = llvm.getelementptr %[[VAL_0]][0, 1] : (!llvm.ptr<struct<(ptr<i64>, i64)>>) -> !llvm.ptr<i64>
// LLVM:           llvm.store %[[VAL_2]], %[[VAL_4]] : !llvm.ptr<i64>
// LLVM:           llvm.return
// LLVM:         }
// LLVM-DAG:     llvm.mlir.global private constant @cstr.6800("h\00") {addr_space = 0 : i32}
// LLVM-DAG:     llvm.mlir.global private constant @cstr.7800("x\00") {addr_space = 0 : i32}
// LLVM-DAG:     llvm.mlir.global private constant @cstr.7900("y\00") {addr_space = 0 : i32}
// LLVM-DAG:     llvm.mlir.global private constant @cstr.7A00("z\00") {addr_space = 0 : i32}
// LLVM-DAG:     llvm.mlir.global private constant @cstr.7400("t\00") {addr_space = 0 : i32}
// LLVM-DAG:     llvm.mlir.global private constant @cstr.7300("s\00") {addr_space = 0 : i32}
// LLVM-DAG:     llvm.mlir.global private constant @cstr.727800("rx\00") {addr_space = 0 : i32}
// LLVM-DAG:     llvm.mlir.global private constant @cstr.7068617365645F727800("phased_rx\00") {addr_space = 0 : i32}
// LLVM-DAG:     llvm.mlir.global private constant @cstr.727900("ry\00") {addr_space = 0 : i32}
// LLVM-DAG:     llvm.mlir.global private constant @cstr.727A00("rz\00") {addr_space = 0 : i32}
// LLVM-DAG:     llvm.mlir.global private constant @cstr.753200("u2\00") {addr_space = 0 : i32}
// LLVM-DAG:     llvm.mlir.global private constant @cstr.753300("u3\00") {addr_space = 0 : i32}
// LLVM-DAG:     llvm.mlir.global private constant @cstr.7377617000("swap\00") {addr_space = 0 : i32}
// LLVM-DAG:     llvm.mlir.global private constant @cstr.6D696B6500("mike\00") {addr_space = 0 : i32}
// LLVM-DAG:     llvm.mlir.global private constant @cstr.746F6D00("tom\00") {addr_space = 0 : i32}
// LLVM-DAG:     llvm.mlir.global private constant @cstr.72{{[0-9]+}}00("r{{[0-9]+}}\00") {addr_space = 0 : i32}


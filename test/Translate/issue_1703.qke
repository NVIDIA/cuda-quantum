// ========================================================================== //
// Copyright (c) 2022 - 2024 NVIDIA Corporation & Affiliates.                 //
// All rights reserved.                                                       //
//                                                                            //
// This source code and the accompanying materials are made available under   //
// the terms of the Apache License 2.0 which accompanies this distribution.   //
// ========================================================================== //

// RUN: cudaq-opt --quake-to-qir %s | FileCheck %s

module attributes {
    quake.mangled_name_map = {
      __nvqpp__mlirgen__kernel = "__nvqpp__mlirgen__kernel_PyKernelEntryPointRewrite"}} {

  func.func @__nvqpp__mlirgen__kernel() attributes {"cudaq-entrypoint"} {
    %c0_i64 = arith.constant 0 : i64
    %c1_i64 = arith.constant 1 : i64
    %cst = arith.constant 1.000000e+00 : f64
    %c262144_i64 = arith.constant 262144 : i64
    %0 = quake.alloca !quake.veq<2>
    cf.br ^bb1(%c0_i64 : i64)
  ^bb1(%1: i64):  // 2 preds: ^bb0, ^bb2
    %2 = arith.cmpi slt, %1, %c262144_i64 : i64
    cf.cond_br %2, ^bb2(%1 : i64), ^bb3
  ^bb2(%3: i64):  // pred: ^bb1
    %4 = quake.extract_ref %0[0] : (!quake.veq<2>) -> !quake.ref
    %5 = quake.extract_ref %0[1] : (!quake.veq<2>) -> !quake.ref
    quake.r1 (%cst) [%4] %5 : (f64, !quake.ref, !quake.ref) -> ()
    %6 = arith.addi %3, %c1_i64 : i64
    cf.br ^bb1(%6 : i64)
  ^bb3:  // pred: ^bb1
    quake.dealloc %0 : !quake.veq<2>
    return
  }
}

// CHECK-LABEL:   llvm.func @__nvqpp__mlirgen__kernel() attributes {"cudaq-entrypoint"} {
// CHECK:           %[[VAL_0:.*]] = llvm.mlir.constant(1 : i64) : i64
// CHECK:           %[[VAL_1:.*]] = llvm.alloca %[[VAL_0]] x i64 : (i64) -> !llvm.ptr<i64>
// CHECK:           %[[VAL_6:.*]] = llvm.mlir.constant(2 : i64) : i64
// CHECK:           %[[VAL_7:.*]] = llvm.call @__quantum__rt__qubit_allocate_array(%[[VAL_6]]) : (i64) -> !llvm.ptr<struct<"Array", opaque>>
// CHECK-NOT:       llvm.alloca
// CHECK:           llvm.return
// CHECK:         }

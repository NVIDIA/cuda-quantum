// ========================================================================== //
// Copyright (c) 2022 - 2023 NVIDIA Corporation & Affiliates.                 //
// All rights reserved.                                                       //
//                                                                            //
// This source code and the accompanying materials are made available under   //
// the terms of the Apache License 2.0 which accompanies this distribution.   //
// ========================================================================== //

// RUN: cudaq-opt %s --quake-add-deallocs --canonicalize | cudaq-translate --convert-to=qir | FileCheck %s

module {
  func.func @adder_n4() {
// CHECK:    %[[VAL_0:.*]] = tail call ptr @__quantum__rt__qubit_allocate_array(i64 4)
// CHECK:         %[[VAL_2:.*]] = tail call ptr @__quantum__rt__array_get_element_ptr_1d(ptr %[[VAL_0]], i64 0)
// CHECK:         %[[VAL_5:.*]] = load ptr, ptr %[[VAL_2]], align 8
// CHECK:         tail call void @__quantum__qis__x(ptr %[[VAL_5]])
// CHECK:         %[[VAL_6:.*]] = tail call ptr @__quantum__rt__array_get_element_ptr_1d(ptr %[[VAL_0]], i64 1)
// CHECK:         %[[VAL_8:.*]] = load ptr, ptr %[[VAL_6]], align 8
// CHECK:         tail call void @__quantum__qis__x(ptr %[[VAL_8]])
// CHECK:         %[[VAL_9:.*]] = tail call ptr @__quantum__rt__array_get_element_ptr_1d(ptr %[[VAL_0]], i64 3)
// CHECK:         %[[VAL_11:.*]] = load ptr, ptr %[[VAL_9]], align 8
// CHECK:         tail call void @__quantum__qis__h(ptr %[[VAL_11]])
// CHECK:         %[[VAL_12:.*]] = tail call ptr @__quantum__rt__array_get_element_ptr_1d(ptr %[[VAL_0]], i64 2)
// CHECK:         %[[VAL_14:.*]] = load ptr, ptr %[[VAL_12]], align 8
// CHECK: tail call void (i64, ptr, ...) @invokeWithControlQubits(i64 1, ptr nonnull @__quantum__qis__x__ctl, ptr %[[VAL_14]], ptr %[[VAL_11]])
// CHECK:         tail call void @__quantum__qis__t(ptr %[[VAL_5]])
// CHECK:         tail call void @__quantum__qis__t(ptr %[[VAL_8]])
// CHECK:         tail call void @__quantum__qis__t(ptr %[[VAL_14]])
// CHECK:         tail call void @__quantum__qis__tdg(ptr %[[VAL_11]])
// CHECK: tail call void (i64, ptr, ...) @invokeWithControlQubits(i64 1, ptr nonnull @__quantum__qis__x__ctl, ptr %[[VAL_5]], ptr %[[VAL_8]])
// CHECK: tail call void (i64, ptr, ...) @invokeWithControlQubits(i64 1, ptr nonnull @__quantum__qis__x__ctl, ptr %[[VAL_14]], ptr %[[VAL_11]])
// CHECK: tail call void (i64, ptr, ...) @invokeWithControlQubits(i64 1, ptr nonnull @__quantum__qis__x__ctl, ptr %[[VAL_11]], ptr %[[VAL_5]])
// CHECK: tail call void (i64, ptr, ...) @invokeWithControlQubits(i64 1, ptr nonnull @__quantum__qis__x__ctl, ptr %[[VAL_8]], ptr %[[VAL_14]])
// CHECK: tail call void (i64, ptr, ...) @invokeWithControlQubits(i64 1, ptr nonnull @__quantum__qis__x__ctl, ptr %[[VAL_5]], ptr %[[VAL_8]])
// CHECK: tail call void (i64, ptr, ...) @invokeWithControlQubits(i64 1, ptr nonnull @__quantum__qis__x__ctl, ptr %[[VAL_14]], ptr %[[VAL_11]])
// CHECK:         tail call void @__quantum__qis__tdg(ptr %[[VAL_5]])
// CHECK:         tail call void @__quantum__qis__tdg(ptr %[[VAL_8]])
// CHECK:         tail call void @__quantum__qis__tdg(ptr %[[VAL_14]])
// CHECK:         tail call void @__quantum__qis__t(ptr %[[VAL_11]])
// CHECK: tail call void (i64, ptr, ...) @invokeWithControlQubits(i64 1, ptr nonnull @__quantum__qis__x__ctl, ptr %[[VAL_5]], ptr %[[VAL_8]])
// CHECK: tail call void (i64, ptr, ...) @invokeWithControlQubits(i64 1, ptr nonnull @__quantum__qis__x__ctl, ptr %[[VAL_14]], ptr %[[VAL_11]])
// CHECK:         tail call void @__quantum__qis__s(ptr %[[VAL_11]])
// CHECK: tail call void (i64, ptr, ...) @invokeWithControlQubits(i64 1, ptr nonnull @__quantum__qis__x__ctl, ptr %[[VAL_11]], ptr %[[VAL_5]])
// CHECK:         tail call void @__quantum__qis__h(ptr %[[VAL_11]])
// CHECK:         %[[VAL_15:.*]] = tail call ptr @__quantum__qis__mz(ptr %[[VAL_5]])
// CHECK:         %[[VAL_17:.*]] = tail call ptr @__quantum__qis__mz(ptr %[[VAL_8]])
// CHECK:         %[[VAL_18:.*]] = tail call ptr @__quantum__qis__mz(ptr %[[VAL_14]])
// CHECK:         %[[VAL_19:.*]] = tail call ptr @__quantum__qis__mz(ptr %[[VAL_11]])
// CHECK:         tail call void @__quantum__rt__qubit_release_array(ptr %[[VAL_0]])
// CHECK:         ret void
    %0 = quake.alloca !quake.veq<4>
    %1 = memref.alloc() : memref<4xi1>
    %c0 = arith.constant 0 : index
    %2 = quake.extract_ref %0[%c0] : (!quake.veq<4>, index) -> !quake.ref
    quake.x %2 : (!quake.ref) -> ()
    %c1 = arith.constant 1 : index
    %3 = quake.extract_ref %0[%c1] : (!quake.veq<4>, index) -> !quake.ref
    quake.x %3 : (!quake.ref) -> ()
    %c3 = arith.constant 3 : index
    %4 = quake.extract_ref %0[%c3] : (!quake.veq<4>, index) -> !quake.ref
    quake.h %4 : (!quake.ref) -> ()
    %c2 = arith.constant 2 : index
    %5 = quake.extract_ref %0[%c2] : (!quake.veq<4>, index) -> !quake.ref
    quake.x [%5] %4 : (!quake.ref, !quake.ref) -> ()
    quake.t %2 : (!quake.ref) -> ()
    quake.t %3 : (!quake.ref) -> ()
    quake.t %5 : (!quake.ref) -> ()
    quake.t<adj> %4 : (!quake.ref) -> ()
    quake.x [%2] %3 : (!quake.ref, !quake.ref) -> ()
    quake.x [%5] %4 : (!quake.ref, !quake.ref) -> ()
    quake.x [%4] %2 : (!quake.ref, !quake.ref) -> ()
    quake.x [%3] %5 : (!quake.ref, !quake.ref) -> ()
    quake.x [%2] %3 : (!quake.ref, !quake.ref) -> ()
    quake.x [%5] %4 : (!quake.ref, !quake.ref) -> ()
    quake.t<adj> %2 : (!quake.ref) -> ()
    quake.t<adj> %3 : (!quake.ref) -> ()
    quake.t<adj> %5 : (!quake.ref) -> ()
    quake.t %4 : (!quake.ref) -> ()
    quake.x [%2] %3 : (!quake.ref, !quake.ref) -> ()
    quake.x [%5] %4 : (!quake.ref, !quake.ref) -> ()
    quake.s %4 : (!quake.ref) -> ()
    quake.x [%4] %2 : (!quake.ref, !quake.ref) -> ()
    quake.h %4 : (!quake.ref) -> ()
    %6 = quake.mz %2 : (!quake.ref) -> i1
    %c0_0 = arith.constant 0 : index
    memref.store %6, %1[%c0_0] : memref<4xi1>
    %7 = quake.mz %3 : (!quake.ref) -> i1
    %c1_1 = arith.constant 1 : index
    memref.store %7, %1[%c1_1] : memref<4xi1>
    %8 = quake.mz %5 : (!quake.ref) -> i1
    %c2_2 = arith.constant 2 : index
    memref.store %8, %1[%c2_2] : memref<4xi1>
    %9 = quake.mz %4 : (!quake.ref) -> i1
    %c3_3 = arith.constant 3 : index
    memref.store %9, %1[%c3_3] : memref<4xi1>
    return
  }
}

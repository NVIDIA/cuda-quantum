// ========================================================================== //
// Copyright (c) 2022 - 2023 NVIDIA Corporation & Affiliates.                 //
// All rights reserved.                                                       //
//                                                                            //
// This source code and the accompanying materials are made available under   //
// the terms of the Apache License 2.0 which accompanies this distribution.   //
// ========================================================================== //

// RUN: cudaq-opt %s --add-dealloc | cudaq-translate --convert-to=qir | FileCheck %s

func.func @test_func2(){
  %zero = arith.constant 0 : i32
  %one = arith.constant 1 : i32
  %two = arith.constant 2 : i32
  %0 = quake.alloca !quake.veq<?>[%two : i32]

  %qr1 = quake.extract_ref %0[%zero] : (!quake.veq<?>,i32) -> !quake.ref
  %qr2 = quake.extract_ref %0[%one] : (!quake.veq<?>,i32) -> !quake.ref

  quake.mx %qr1 : (!quake.ref) -> !quake.measure
  quake.my %qr1 : (!quake.ref) -> !quake.measure
  return 
}

// CHECK-LABEL: define void @test_func2
// CHECK:    %[[VAL_0:.*]] = tail call %Array* @__quantum__rt__qubit_allocate_array(i64 2)
// CHECK:    %[[VAL_2:.*]] = tail call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %[[VAL_0]], i64 0)
// CHECK:    %[[VAL_3:.*]] = bitcast i8* %[[VAL_2]] to %Qubit**
// CHECK:    %[[VAL_5:.*]] = load %Qubit*, %Qubit** %[[VAL_3]], align 8
// CHECK:    tail call void @__quantum__qis__h(%Qubit* %[[VAL_5]])
// CHECK:    %[[VAL_7:.*]] = tail call %Result* @__quantum__qis__mz(%Qubit* %[[VAL_5]])
// CHECK:    tail call void @__quantum__qis__s__adj(%Qubit* %[[VAL_5]])
// CHECK:    tail call void @__quantum__qis__h(%Qubit* %[[VAL_5]])
// CHECK:    %[[VAL_9:.*]] = tail call %Result* @__quantum__qis__mz(%Qubit* %[[VAL_5]])
// CHECK:    tail call void @__quantum__rt__qubit_release_array(%Array* %[[VAL_0]])
// CHECK:    ret void

// ========================================================================== //
// Copyright (c) 2022 - 2023 NVIDIA Corporation & Affiliates.                 //
// All rights reserved.                                                       //
//                                                                            //
// This source code and the accompanying materials are made available under   //
// the terms of the Apache License 2.0 which accompanies this distribution.   //
// ========================================================================== //

// RUN: cudaq-opt %s --quake-add-deallocs | cudaq-translate --convert-to=qir | FileCheck %s

module {
  func.func @test_func2(){
    %zero = arith.constant 0 : i32
    %one = arith.constant 1 : i32
    %two = arith.constant 2 : i32
    %0 = quake.alloca !quake.veq<?>[%two : i32]

    %qr1 = quake.extract_ref %0[%zero] : (!quake.veq<?>,i32) -> !quake.ref
    %qr2 = quake.extract_ref %0[%one] : (!quake.veq<?>,i32) -> !quake.ref

    quake.mx %qr1 : (!quake.ref) -> i1
    quake.my %qr1 : (!quake.ref) -> i1
    return 
  }
}

// CHECK-LABEL: define void @test_func2
// CHECK:    %[[VAL_0:.*]] = tail call ptr @__quantum__rt__qubit_allocate_array(i64 2)
// CHECK:    %[[VAL_2:.*]] = tail call ptr @__quantum__rt__array_get_element_ptr_1d(ptr %[[VAL_0]], i64 0)
// CHECK:    %[[VAL_5:.*]] = load ptr, ptr %[[VAL_2]], align 8
// CHECK:    tail call void @__quantum__qis__h(ptr %[[VAL_5]])
// CHECK:    %[[VAL_7:.*]] = tail call ptr @__quantum__qis__mz(ptr %[[VAL_5]])
// CHECK:    tail call void @__quantum__qis__sdg(ptr %[[VAL_5]])
// CHECK:    tail call void @__quantum__qis__h(ptr %[[VAL_5]])
// CHECK:    %[[VAL_9:.*]] = tail call ptr @__quantum__qis__mz(ptr %[[VAL_5]])
// CHECK:    tail call void @__quantum__rt__qubit_release_array(ptr %[[VAL_0]])
// CHECK:    ret void

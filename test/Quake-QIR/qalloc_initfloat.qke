// ========================================================================== //
// Copyright (c) 2022 - 2024 NVIDIA Corporation & Affiliates.                 //
// All rights reserved.                                                       //
//                                                                            //
// This source code and the accompanying materials are made available under   //
// the terms of the Apache License 2.0 which accompanies this distribution.   //
// ========================================================================== //

// RUN: cudaq-translate --convert-to=qir %s | FileCheck %s

func.func @__nvqpp__mlirgen__function_test._Z4testSt6vectorIfSaIfEE(%arg0: !cc.stdvec<f32>) attributes {"cudaq-entrypoint", "cudaq-kernel", no_this} {
  %0 = cc.stdvec_size %arg0 : (!cc.stdvec<f32>) -> i64
  %1 = math.cttz %0 : i64
  %2 = cc.stdvec_data %arg0 : (!cc.stdvec<f32>) -> !cc.ptr<f32>
  %3 = quake.alloca !quake.veq<?>[%1 : i64]
  %4 = quake.init_state %3, %2 : (!quake.veq<?>, !cc.ptr<f32>) -> !quake.veq<?>
  return
}

// CHECK-LABEL: define void @__nvqpp__mlirgen__function_test.
// CHECK-SAME:    ({ float*, i64 } %[[VAL_0:.*]]) local_unnamed_addr {
// CHECK:         %[[VAL_1:.*]] = extractvalue { float*, i64 } %[[VAL_0]], 1
// CHECK:         %[[VAL_2:.*]] = tail call i64 @llvm.cttz.i64(i64 %[[VAL_1]], i1 false), !range !1
// CHECK:         %[[VAL_3:.*]] = extractvalue { float*, i64 } %[[VAL_0]], 0
// CHECK:         %[[VAL_4:.*]] = bitcast float* %[[VAL_3]] to i8*
// CHECK:         %[[VAL_5:.*]] = tail call %Array* @__quantum__rt__qubit_allocate_array_with_state_fp32(i64 %[[VAL_2]], i8* %[[VAL_4]])
// CHECK:         tail call void @__quantum__rt__qubit_release_array(
// CHECK:         ret void
// CHECK:       }

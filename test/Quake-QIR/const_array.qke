// ========================================================================== //
// Copyright (c) 2022 - 2024 NVIDIA Corporation & Affiliates.                 //
// All rights reserved.                                                       //
//                                                                            //
// This source code and the accompanying materials are made available under   //
// the terms of the Apache License 2.0 which accompanies this distribution.   //
// ========================================================================== //

// RUN: cudaq-translate --convert-to=qir %s | FileCheck %s

func.func private @g(%0 : !cc.stdvec<i32>)
func.func @f() {
  %0 = cc.const_array [0, 1, 0] : !cc.array<i32 x 3>
  %1 = arith.constant 1 : i32
  %2 = cc.get_const_element %0, %1 : (!cc.array<i32 x 3>, i32) -> i32
  %3 = cc.alloca !cc.array<i32 x 3>
  cc.store %0, %3 : !cc.ptr<!cc.array<i32 x 3>>
  %4 = arith.constant 3 : i64
  %5 = cc.cast %3 : (!cc.ptr<!cc.array<i32 x 3>>) -> !cc.ptr<i32>
  %6 = cc.stdvec_init %5, %4 : (!cc.ptr<i32>, i64) -> !cc.stdvec<i32>
  call @g(%6) : (!cc.stdvec<i32>) -> ()
  return
}

// CHECK-LABEL: define void @f() local_unnamed_addr {
// CHECK:         %[[VAL_0:.*]] = alloca [3 x i32], align 4
// CHECK:         %[[VAL_1:.*]] = getelementptr inbounds [3 x i32], [3 x i32]* %[[VAL_0]], i64 0, i64 0
// CHECK:         store i32 0, i32* %[[VAL_1]], align 4
// CHECK:         %[[VAL_2:.*]] = getelementptr inbounds [3 x i32], [3 x i32]* %[[VAL_0]], i64 0, i64 1
// CHECK:         store i32 1, i32* %[[VAL_2]], align 4
// CHECK:         %[[VAL_3:.*]] = getelementptr inbounds [3 x i32], [3 x i32]* %[[VAL_0]], i64 0, i64 2
// CHECK:         store i32 0, i32* %[[VAL_3]], align 4
// CHECK:         %[[VAL_4:.*]] = insertvalue { i32*, i64 } undef, i32* %[[VAL_1]], 0
// CHECK:         %[[VAL_5:.*]] = insertvalue { i32*, i64 } %[[VAL_4]], i64 3, 1
// CHECK:         call void @g({ i32*, i64 } %[[VAL_5]])
// CHECK:         ret void
// CHECK:       }

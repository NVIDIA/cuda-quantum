// ========================================================================== //
// Copyright (c) 2022 - 2023 NVIDIA Corporation & Affiliates.                 //
// All rights reserved.                                                       //
//                                                                            //
// This source code and the accompanying materials are made available under   //
// the terms of the Apache License 2.0 which accompanies this distribution.   //
// ========================================================================== //

// RUN: cudaq-opt --kernel-execution --canonicalize %s | \
// RUN: cudaq-translate --convert-to=qir | FileCheck %s

// NB: the mangled name map is required for the kernel-execution pass.
module
  attributes{ quake.mangled_name_map = {
    __nvqpp__mlirgen__test_0 = "test_0", __nvqpp__mlirgen__test_1 = "test_1",
    __nvqpp__mlirgen__test_2 = "test_2", __nvqpp__mlirgen__test_3 = "test_3"}}
{

func.func private @anchor(!cc.ptr<none>, i64)

func.func @__nvqpp__mlirgen__test_0(%arg0: !cc.stdvec<!cc.struct<{i32, f64}>>) {
  %0 = cc.stdvec_data %arg0 : (!cc.stdvec<!cc.struct<{i32, f64}>>) -> !cc.ptr<!cc.struct<{i32, f64}>>
  %1 = cc.stdvec_size %arg0 : (!cc.stdvec<!cc.struct<{i32, f64}>>) -> i64
  %2 = cc.cast %0 : (!cc.ptr<!cc.struct<{i32, f64}>>) -> !cc.ptr<none>
  call @anchor(%2, %1) : (!cc.ptr<none>, i64) -> ()
  return
}

// CHECK-LABEL: define void @__nvqpp__mlirgen__test_0({ { i32, double }*, i64 } 
// CHECK-SAME:                                                                  %[[VAL_0:.*]]) local_unnamed_addr {
// CHECK:         %[[VAL_1:.*]] = extractvalue { { i32, double }*, i64 } %[[VAL_0]], 0
// CHECK:         %[[VAL_2:.*]] = extractvalue { { i32, double }*, i64 } %[[VAL_0]], 1
// CHECK:         %[[VAL_3:.*]] = bitcast { i32, double }* %[[VAL_1]] to i8*
// CHECK:         tail call void @anchor(i8* %[[VAL_3]], i64 %[[VAL_2]])
// CHECK:         ret void
// CHECK:       }

func.func @__nvqpp__mlirgen__test_1(%arg0 : !cc.struct<{!cc.stdvec<i16>, !cc.stdvec<f32>}>) {
  %0 = cc.extract_value %arg0[0] : (!cc.struct<{!cc.stdvec<i16>, !cc.stdvec<f32>}>) -> !cc.stdvec<i16>
  %1 = cc.stdvec_data %0 : (!cc.stdvec<i16>) -> !cc.ptr<i16>
  %2 = cc.stdvec_size %0 : (!cc.stdvec<i16>) -> i64
  %3 = cc.cast %1 : (!cc.ptr<i16>) -> !cc.ptr<none>
  call @anchor(%3, %2) : (!cc.ptr<none>, i64) -> ()
  return
}

// CHECK-LABEL: define void @__nvqpp__mlirgen__test_1({ { i16*, i64 }, { float*, i64 } } 
// CHECK-SAME:                                                                           %[[VAL_0:.*]]) local_unnamed_addr {
// CHECK:         %[[VAL_1:.*]] = extractvalue { { i16*, i64 }, { float*, i64 } } %[[VAL_0]], 0
// CHECK:         %[[VAL_2:.*]] = extractvalue { i16*, i64 } %[[VAL_1]], 0
// CHECK:         %[[VAL_3:.*]] = extractvalue { i16*, i64 } %[[VAL_1]], 1
// CHECK:         %[[VAL_4:.*]] = bitcast i16* %[[VAL_2]] to i8*
// CHECK:         tail call void @anchor(i8* %[[VAL_4]], i64 %[[VAL_3]])
// CHECK:         ret void
// CHECK:       }

func.func @__nvqpp__mlirgen__test_2(%arg0: !cc.ptr<!cc.stdvec<!cc.struct<{i32, f64}>>>) {
  %arg = cc.load %arg0 : !cc.ptr<!cc.stdvec<!cc.struct<{i32, f64}>>>
  %0 = cc.stdvec_data %arg : (!cc.stdvec<!cc.struct<{i32, f64}>>) -> !cc.ptr<!cc.struct<{i32, f64}>>
  %1 = cc.stdvec_size %arg : (!cc.stdvec<!cc.struct<{i32, f64}>>) -> i64
  %2 = cc.cast %0 : (!cc.ptr<!cc.struct<{i32, f64}>>) -> !cc.ptr<none>
  call @anchor(%2, %1) : (!cc.ptr<none>, i64) -> ()
  return
}

// CHECK-LABEL: define void @__nvqpp__mlirgen__test_2({ { i32, double }*, i64 }* nocapture readonly 
// CHECK-SAME:                                                                                      %[[VAL_0:.*]]) local_unnamed_addr {
// CHECK:         %[[VAL_1:.*]] = bitcast { { i32, double }*, i64 }* %[[VAL_0]] to i8**
// CHECK:         %[[VAL_2:.*]] = load i8*, i8** %[[VAL_1]], align 8
// CHECK:         %[[VAL_3:.*]] = getelementptr inbounds { { i32, double }*, i64 }, { { i32, double }*, i64 }* %[[VAL_0]], i64 0, i32 1
// CHECK:         %[[VAL_4:.*]] = load i64, i64* %[[VAL_3]], align 8
// CHECK:         tail call void @anchor(i8* %[[VAL_2]], i64 %[[VAL_4]])
// CHECK:         ret void
// CHECK:       }

func.func @__nvqpp__mlirgen__test_3(%arg0 : !cc.ptr<!cc.struct<{!cc.stdvec<i16>, !cc.stdvec<f32>}>>) {
  %arg = cc.load %arg0 : !cc.ptr<!cc.struct<{!cc.stdvec<i16>, !cc.stdvec<f32>}>>
  %0 = cc.extract_value %arg[0] : (!cc.struct<{!cc.stdvec<i16>, !cc.stdvec<f32>}>) -> !cc.stdvec<i16>
  %1 = cc.stdvec_data %0 : (!cc.stdvec<i16>) -> !cc.ptr<i16>
  %2 = cc.stdvec_size %0 : (!cc.stdvec<i16>) -> i64
  %3 = cc.cast %1 : (!cc.ptr<i16>) -> !cc.ptr<none>
  call @anchor(%3, %2) : (!cc.ptr<none>, i64) -> ()
  return
}

// CHECK-LABEL: define void @__nvqpp__mlirgen__test_3({ { i16*, i64 }, { float*, i64 } }* nocapture readonly 
// CHECK-SAME:                                                                                               %[[VAL_0:.*]]) local_unnamed_addr {
// CHECK:         %[[VAL_1:.*]] = bitcast { { i16*, i64 }, { float*, i64 } }* %[[VAL_0]] to i8**
// CHECK:         %[[VAL_2:.*]] = load i8*, i8** %[[VAL_1]], align 8
// CHECK:         %[[VAL_3:.*]] = getelementptr inbounds { { i16*, i64 }, { float*, i64 } }, { { i16*, i64 }, { float*, i64 } }* %[[VAL_0]], i64 0, i32 0, i32 1
// CHECK:         %[[VAL_4:.*]] = load i64, i64* %[[VAL_3]], align 8
// CHECK:         tail call void @anchor(i8* %[[VAL_2]], i64 %[[VAL_4]])
// CHECK:         ret void
// CHECK:       }

}

// CHECK-LABEL: define { i8*, i64 } @test_0.thunk(i8* 
// CHECK-SAME:    %[[VAL_0:.*]], i1 %[[VAL_1:.*]]) {
// CHECK:         %[[VAL_2:.*]] = bitcast i8* %[[VAL_0]] to i64*
// CHECK:         %[[VAL_3:.*]] = load i64, i64* %[[VAL_2]], align 4
// CHECK:         %[[VAL_4:.*]] = getelementptr i8, i8* %[[VAL_0]], i64 8
// CHECK:         %[[VAL_5:.*]] = sdiv i64 %[[VAL_3]], 8
// CHECK:         tail call void @anchor(i8* %[[VAL_4]], i64 %[[VAL_5]])
// CHECK:         ret { i8*, i64 } zeroinitializer
// CHECK:       }

// CHECK-LABEL: define void @test_0(i8* nocapture readnone 
// CHECK-SAME:    %[[VAL_0:.*]], { { i32, double }*, { i32, double }*, { i32, double }* }* nocapture readonly %[[VAL_1:.*]]) local_unnamed_addr {
// CHECK:         %[[VAL_2:.*]] = getelementptr { { i32, double }*, { i32, double }*, { i32, double }* }, { { i32, double }*, { i32, double }*, { i32, double }* }* %[[VAL_1]], i64 0, i32 1
// CHECK:         %[[VAL_3:.*]] = getelementptr { { i32, double }*, { i32, double }*, { i32, double }* }, { { i32, double }*, { i32, double }*, { i32, double }* }* %[[VAL_1]], i64 0, i32 0
// CHECK:         %[[VAL_4:.*]] = load { i32, double }*, { i32, double }** %[[VAL_2]], align 8
// CHECK:         %[[VAL_5:.*]] = load { i32, double }*, { i32, double }** %[[VAL_3]], align 8
// CHECK:         %[[VAL_6:.*]] = ptrtoint { i32, double }* %[[VAL_4]] to i64
// CHECK:         %[[VAL_7:.*]] = ptrtoint { i32, double }* %[[VAL_5]] to i64
// CHECK:         %[[VAL_8:.*]] = sub i64 %[[VAL_6]], %[[VAL_7]]
// CHECK:         %[[VAL_9:.*]] = add i64 %[[VAL_8]], 8
// CHECK:         %[[VAL_10:.*]] = alloca i8, i64 %[[VAL_9]], align 8
// CHECK:         %[[VAL_11:.*]] = bitcast i8* %[[VAL_10]] to i64*
// CHECK:         store i64 %[[VAL_8]], i64* %[[VAL_11]], align 8
// CHECK:         %[[VAL_12:.*]] = getelementptr i8, i8* %[[VAL_10]], i64 8
// CHECK:         %[[VAL_13:.*]] = bitcast { i32, double }* %[[VAL_5]] to i8*
// CHECK:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %[[VAL_12]], i8* align 1 %[[VAL_13]], i64 %[[VAL_8]], i1 false)
// CHECK:         call void @altLaunchKernel(i8* nonnull getelementptr inbounds ([7 x i8], [7 x i8]* @test_0.kernelName, i64 0, i64 0), i8* nonnull bitcast ({ i8*, i64 } (i8*, i1)* @test_0.thunk to i8*), i8* nonnull %[[VAL_10]], i64 %[[VAL_9]], i64 2147483647)
// CHECK:         ret void
// CHECK:       }

// CHECK-LABEL: define { i8*, i64 } @test_1.thunk(i8* nocapture readnone 
// CHECK-SAME:    %[[VAL_0:.*]], i1 %[[VAL_1:.*]]) {
// CHECK:         tail call void @anchor(i8* undef, i64 undef)
// CHECK:         ret { i8*, i64 } zeroinitializer
// CHECK:       }

// CHECK-LABEL: define void @test_1(i8* nocapture readnone 
// CHECK-SAME:    %[[VAL_0:.*]], { { i16*, i64 }, { float*, i64 } }* nocapture readnone %[[VAL_1:.*]]) local_unnamed_addr {
// CHECK:         %[[VAL_2:.*]] = alloca { { { i16*, i64 }, { float*, i64 } } }, align 8
// CHECK:         %[[VAL_3:.*]] = bitcast { { { i16*, i64 }, { float*, i64 } } }* %[[VAL_2]] to i8*
// CHECK:         call void @altLaunchKernel(i8* nonnull getelementptr inbounds ([7 x i8], [7 x i8]* @test_1.kernelName, i64 0, i64 0), i8* nonnull bitcast ({ i8*, i64 } (i8*, i1)* @test_1.thunk to i8*), i8* nonnull %[[VAL_3]], i64 32, i64 2147483647)
// CHECK:         ret void
// CHECK:       }

// CHECK-LABEL: define { i8*, i64 } @test_2.thunk(i8* nocapture readonly 
// CHECK-SAME:    %[[VAL_0:.*]], i1 %[[VAL_1:.*]]) {
// CHECK:         %[[VAL_2:.*]] = bitcast i8* %[[VAL_0]] to { { i32, double }*, i64 }**
// CHECK:         %[[VAL_3:.*]] = load { { i32, double }*, i64 }*, { { i32, double }*, i64 }** %[[VAL_2]], align 8
// CHECK:         %[[VAL_4:.*]] = bitcast { { i32, double }*, i64 }* %[[VAL_3]] to i8**
// CHECK:         %[[VAL_5:.*]] = load i8*, i8** %[[VAL_4]], align 8
// CHECK:         %[[VAL_6:.*]] = getelementptr inbounds { { i32, double }*, i64 }, { { i32, double }*, i64 }* %[[VAL_3]], i64 0, i32 1
// CHECK:         %[[VAL_7:.*]] = load i64, i64* %[[VAL_6]], align 8
// CHECK:         tail call void @anchor(i8* %[[VAL_5]], i64 %[[VAL_7]])
// CHECK:         ret { i8*, i64 } zeroinitializer
// CHECK:       }

// CHECK-LABEL: define void @test_2(i8* nocapture readnone 
// CHECK-SAME:    %[[VAL_0:.*]], { { i32, double }*, i64 }* nocapture readnone %[[VAL_1:.*]]) local_unnamed_addr {
// CHECK:         %[[VAL_2:.*]] = alloca { { { i32, double }*, i64 }* }, align 8
// CHECK:         %[[VAL_3:.*]] = bitcast { { { i32, double }*, i64 }* }* %[[VAL_2]] to i8*
// CHECK:         call void @altLaunchKernel(i8* nonnull getelementptr inbounds ([7 x i8], [7 x i8]* @test_2.kernelName, i64 0, i64 0), i8* nonnull bitcast ({ i8*, i64 } (i8*, i1)* @test_2.thunk to i8*), i8* nonnull %[[VAL_3]], i64 8, i64 2147483647)
// CHECK:         ret void
// CHECK:       }

// CHECK-LABEL: define { i8*, i64 } @test_3.thunk(i8* nocapture readonly 
// CHECK-SAME:    %[[VAL_0:.*]], i1 %[[VAL_1:.*]]) {
// CHECK:         %[[VAL_2:.*]] = bitcast i8* %[[VAL_0]] to { { i16*, i64 }, { float*, i64 } }**
// CHECK:         %[[VAL_3:.*]] = load { { i16*, i64 }, { float*, i64 } }*, { { i16*, i64 }, { float*, i64 } }** %[[VAL_2]], align 8
// CHECK:         %[[VAL_4:.*]] = bitcast { { i16*, i64 }, { float*, i64 } }* %[[VAL_3]] to i8**
// CHECK:         %[[VAL_5:.*]] = load i8*, i8** %[[VAL_4]], align 8
// CHECK:         %[[VAL_6:.*]] = getelementptr inbounds { { i16*, i64 }, { float*, i64 } }, { { i16*, i64 }, { float*, i64 } }* %[[VAL_3]], i64 0, i32 0, i32 1
// CHECK:         %[[VAL_7:.*]] = load i64, i64* %[[VAL_6]], align 8
// CHECK:         tail call void @anchor(i8* %[[VAL_5]], i64 %[[VAL_7]])
// CHECK:         ret { i8*, i64 } zeroinitializer
// CHECK:       }

// CHECK-LABEL: define void @test_3(i8* nocapture readnone 
// CHECK-SAME:    %[[VAL_0:.*]], { { i16*, i64 }, { float*, i64 } }* nocapture readnone %[[VAL_1:.*]]) local_unnamed_addr {
// CHECK:         %[[VAL_2:.*]] = alloca { { { i16*, i64 }, { float*, i64 } }* }, align 8
// CHECK:         %[[VAL_3:.*]] = bitcast { { { i16*, i64 }, { float*, i64 } }* }* %[[VAL_2]] to i8*
// CHECK:         call void @altLaunchKernel(i8* nonnull getelementptr inbounds ([7 x i8], [7 x i8]* @test_3.kernelName, i64 0, i64 0), i8* nonnull bitcast ({ i8*, i64 } (i8*, i1)* @test_3.thunk to i8*), i8* nonnull %[[VAL_3]], i64 8, i64 2147483647)
// CHECK:         ret void
// CHECK:       }

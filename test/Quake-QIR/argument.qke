// ========================================================================== //
// Copyright (c) 2022 - 2024 NVIDIA Corporation & Affiliates.                 //
// All rights reserved.                                                       //
//                                                                            //
// This source code and the accompanying materials are made available under   //
// the terms of the Apache License 2.0 which accompanies this distribution.   //
// ========================================================================== //

// RUN: cudaq-opt --kernel-execution=codegen=1 --canonicalize %s | \
// RUN: cudaq-translate --convert-to=qir | FileCheck %s

// NB: the mangled name map is required for the kernel-execution pass.
module
  attributes{ quake.mangled_name_map = {
    __nvqpp__mlirgen__test_0 = "test_0", __nvqpp__mlirgen__test_1 = "test_1",
    __nvqpp__mlirgen__test_2 = "test_2", __nvqpp__mlirgen__test_3 = "test_3"}}
{

func.func private @anchor(!cc.ptr<none>, i64)

func.func @__nvqpp__mlirgen__test_0(%arg0: !cc.stdvec<!cc.struct<{i32, f64}>>) {
  %0 = cc.stdvec_data %arg0 : (!cc.stdvec<!cc.struct<{i32, f64}>>) -> !cc.ptr<!cc.struct<{i32, f64}>>
  %1 = cc.stdvec_size %arg0 : (!cc.stdvec<!cc.struct<{i32, f64}>>) -> i64
  %2 = cc.cast %0 : (!cc.ptr<!cc.struct<{i32, f64}>>) -> !cc.ptr<none>
  call @anchor(%2, %1) : (!cc.ptr<none>, i64) -> ()
  return
}

func.func @test_0(%0: !cc.ptr<i8>, %1: !cc.ptr<!cc.struct<{!cc.ptr<!cc.struct<{i32, f64}>>, !cc.ptr<!cc.struct<{i32, f64}>>, !cc.ptr<!cc.struct<{i32, f64}>>}>>) {
  return
}

// CHECK-LABEL: define void @__nvqpp__mlirgen__test_0({ { i32, double }*, i64 } 
// CHECK-SAME:    %[[VAL_0:.*]]) {{.*}}{
// CHECK:         %[[VAL_1:.*]] = extractvalue { { i32, double }*, i64 } %[[VAL_0]], 0
// CHECK:         %[[VAL_2:.*]] = extractvalue { { i32, double }*, i64 } %[[VAL_0]], 1
// CHECK:         %[[VAL_3:.*]] = bitcast { i32, double }* %[[VAL_1]] to i8*
// CHECK:         tail call void @anchor(i8* %[[VAL_3]], i64 %[[VAL_2]])
// CHECK:         ret void
// CHECK:       }

// CHECK-LABEL: define void @test_0(i8* nocapture readnone 
// CHECK-SAME:    %[[VAL_0:.*]], { { i32, double }*, { i32, double }*, { i32, double }* }* nocapture readonly %[[VAL_1:.*]]) {{.*}}{
// CHECK:         %[[VAL_2:.*]] = getelementptr { { i32, double }*, { i32, double }*, { i32, double }* }, { { i32, double }*, { i32, double }*, { i32, double }* }* %[[VAL_1]], i64 0, i32 1
// CHECK:         %[[VAL_3:.*]] = getelementptr { { i32, double }*, { i32, double }*, { i32, double }* }, { { i32, double }*, { i32, double }*, { i32, double }* }* %[[VAL_1]], i64 0, i32 0
// CHECK:         %[[VAL_4:.*]] = load { i32, double }*, { i32, double }** %[[VAL_2]], align 8
// CHECK:         %[[VAL_5:.*]] = load { i32, double }*, { i32, double }** %[[VAL_3]], align 8
// CHECK:         %[[VAL_6:.*]] = ptrtoint { i32, double }* %[[VAL_4]] to i64
// CHECK:         %[[VAL_7:.*]] = ptrtoint { i32, double }* %[[VAL_5]] to i64
// CHECK:         %[[VAL_8:.*]] = sub i64 %[[VAL_6]], %[[VAL_7]]
// CHECK:         %[[VAL_9:.*]] = add i64 %[[VAL_8]], 8
// CHECK:         %[[VAL_10:.*]] = alloca i8, i64 %[[VAL_9]], align 8
// CHECK:         %[[VAL_11:.*]] = bitcast i8* %[[VAL_10]] to i64*
// CHECK:         store i64 %[[VAL_8]], i64* %[[VAL_11]], align 8
// CHECK:         %[[VAL_12:.*]] = getelementptr i8, i8* %[[VAL_10]], i64 8
// CHECK:         %[[VAL_13:.*]] = bitcast { i32, double }* %[[VAL_5]] to i8*
// CHECK:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %[[VAL_12]], i8* align 1 %[[VAL_13]], i64 %[[VAL_8]], i1 false)
// CHECK:         call { i8*, i64 } @altLaunchKernel(i8* nonnull getelementptr inbounds ([7 x i8], [7 x i8]* @test_0.kernelName, i64 0, i64 0), i8* nonnull bitcast ({ i8*, i64 } (i8*, i1)* @test_0.thunk to i8*), i8* nonnull %[[VAL_10]], i64 %[[VAL_9]], i64 2147483647)
// CHECK:         ret void
// CHECK:       }

func.func @__nvqpp__mlirgen__test_1(%arg0 : !cc.struct<{!cc.stdvec<i16>, !cc.stdvec<f32>}>) {
  %0 = cc.extract_value %arg0[0] : (!cc.struct<{!cc.stdvec<i16>, !cc.stdvec<f32>}>) -> !cc.stdvec<i16>
  %1 = cc.stdvec_data %0 : (!cc.stdvec<i16>) -> !cc.ptr<!cc.array<i16 x ?>>
  %2 = cc.stdvec_size %0 : (!cc.stdvec<i16>) -> i64
  %3 = cc.cast %1 : (!cc.ptr<!cc.array<i16 x ?>>) -> !cc.ptr<none>
  call @anchor(%3, %2) : (!cc.ptr<none>, i64) -> ()
  %4 = cc.extract_value %arg0[1] : (!cc.struct<{!cc.stdvec<i16>, !cc.stdvec<f32>}>) -> !cc.stdvec<f32>
  %5 = cc.stdvec_data %4 : (!cc.stdvec<f32>) -> !cc.ptr<!cc.array<f32 x ?>>
  %6 = cc.stdvec_size %4 : (!cc.stdvec<f32>) -> i64
  %7 = cc.cast %5 : (!cc.ptr<!cc.array<f32 x ?>>) -> !cc.ptr<none>
  call @anchor(%7, %6) : (!cc.ptr<none>, i64) -> ()
  return
}

func.func @test_1(%0: !cc.ptr<i8>, %1: !cc.ptr<!cc.struct<{!cc.struct<{!cc.ptr<i16>, !cc.ptr<i16>, !cc.ptr<i16>}>, !cc.struct<{!cc.ptr<f32>, !cc.ptr<f32>, !cc.ptr<f32>}>}>>) {
  return
}

// CHECK-LABEL: define void @__nvqpp__mlirgen__test_1({ { i16*, i64 }, { float*, i64 } } 
// CHECK-SAME:    %[[VAL_0:.*]]) {{.*}}{
// CHECK:         %[[VAL_1:.*]] = extractvalue { { i16*, i64 }, { float*, i64 } } %[[VAL_0]], 0
// CHECK:         %[[VAL_2:.*]] = extractvalue { i16*, i64 } %[[VAL_1]], 0
// CHECK:         %[[VAL_3:.*]] = extractvalue { i16*, i64 } %[[VAL_1]], 1
// CHECK:         %[[VAL_4:.*]] = bitcast i16* %[[VAL_2]] to i8*
// CHECK:         tail call void @anchor(i8* %[[VAL_4]], i64 %[[VAL_3]])
// CHECK:         %[[VAL_5:.*]] = extractvalue { { i16*, i64 }, { float*, i64 } } %[[VAL_0]], 1
// CHECK:         %[[VAL_6:.*]] = extractvalue { float*, i64 } %[[VAL_5]], 0
// CHECK:         %[[VAL_7:.*]] = extractvalue { float*, i64 } %[[VAL_5]], 1
// CHECK:         %[[VAL_8:.*]] = bitcast float* %[[VAL_6]] to i8*
// CHECK:         tail call void @anchor(i8* %[[VAL_8]], i64 %[[VAL_7]])
// CHECK:         ret void
// CHECK:       }

// CHECK-LABEL: define void @test_1(i8* nocapture readnone 
// CHECK-SAME:    %[[VAL_0:.*]], { { i16*, i16*, i16* }, { float*, float*, float* } }* nocapture readonly %[[VAL_1:.*]]) {{.*}}{
// CHECK:         %[[VAL_2:.*]] = getelementptr { { i16*, i16*, i16* }, { float*, float*, float* } }, { { i16*, i16*, i16* }, { float*, float*, float* } }* %[[VAL_1]], i64 0, i32 0, i32 1
// CHECK:         %[[VAL_3:.*]] = getelementptr { { i16*, i16*, i16* }, { float*, float*, float* } }, { { i16*, i16*, i16* }, { float*, float*, float* } }* %[[VAL_1]], i64 0, i32 0, i32 0
// CHECK:         %[[VAL_4:.*]] = load i16*, i16** %[[VAL_2]], align 8
// CHECK:         %[[VAL_5:.*]] = load i16*, i16** %[[VAL_3]], align 8
// CHECK:         %[[VAL_6:.*]] = ptrtoint i16* %[[VAL_4]] to i64
// CHECK:         %[[VAL_7:.*]] = ptrtoint i16* %[[VAL_5]] to i64
// CHECK:         %[[VAL_8:.*]] = sub i64 %[[VAL_6]], %[[VAL_7]]
// CHECK:         %[[VAL_9:.*]] = getelementptr { { i16*, i16*, i16* }, { float*, float*, float* } }, { { i16*, i16*, i16* }, { float*, float*, float* } }* %[[VAL_1]], i64 0, i32 1, i32 1
// CHECK:         %[[VAL_10:.*]] = getelementptr { { i16*, i16*, i16* }, { float*, float*, float* } }, { { i16*, i16*, i16* }, { float*, float*, float* } }* %[[VAL_1]], i64 0, i32 1, i32 0
// CHECK:         %[[VAL_11:.*]] = load float*, float** %[[VAL_9]], align 8
// CHECK:         %[[VAL_12:.*]] = load float*, float** %[[VAL_10]], align 8
// CHECK:         %[[VAL_13:.*]] = ptrtoint float* %[[VAL_11]] to i64
// CHECK:         %[[VAL_14:.*]] = ptrtoint float* %[[VAL_12]] to i64
// CHECK:         %[[VAL_15:.*]] = sub i64 %[[VAL_13]], %[[VAL_14]]
// CHECK:         %[[VAL_16:.*]] = add i64 %[[VAL_8]], 16
// CHECK:         %[[VAL_17:.*]] = add i64 %[[VAL_16]], %[[VAL_15]]
// CHECK:         %[[VAL_18:.*]] = alloca i8, i64 %[[VAL_17]], align 8
// CHECK:         %[[VAL_19:.*]] = bitcast i8* %[[VAL_18]] to i64*
// CHECK:         store i64 %[[VAL_8]], i64* %[[VAL_19]], align 8
// CHECK:         %[[VAL_20:.*]] = getelementptr inbounds i8, i8* %[[VAL_18]], i64 8
// CHECK:         %[[VAL_21:.*]] = bitcast i8* %[[VAL_20]] to i64*
// CHECK:         store i64 %[[VAL_15]], i64* %[[VAL_21]], align 8
// CHECK:         %[[VAL_22:.*]] = getelementptr i8, i8* %[[VAL_18]], i64 16
// CHECK:         %[[VAL_23:.*]] = bitcast i16* %[[VAL_5]] to i8*
// CHECK:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %[[VAL_22]], i8* align 1 %[[VAL_23]], i64 %[[VAL_8]], i1 false)
// CHECK:         %[[VAL_24:.*]] = getelementptr i8, i8* %[[VAL_22]], i64 %[[VAL_8]]
// CHECK:         %[[VAL_25:.*]] = bitcast float* %[[VAL_12]] to i8*
// CHECK:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %[[VAL_24]], i8* align 1 %[[VAL_25]], i64 %[[VAL_15]], i1 false)
// CHECK:         call { i8*, i64 } @altLaunchKernel(i8* nonnull getelementptr inbounds ([7 x i8], [7 x i8]* @test_1.kernelName, i64 0, i64 0), i8* nonnull bitcast ({ i8*, i64 } (i8*, i1)* @test_1.thunk to i8*), i8* nonnull %[[VAL_18]], i64 %[[VAL_17]], i64 2147483647)
// CHECK:         ret void
// CHECK:       }

func.func @__nvqpp__mlirgen__test_2(%arg0: !cc.stdvec<!cc.struct<{i32, f64}>>) {
  %0 = cc.stdvec_data %arg0 : (!cc.stdvec<!cc.struct<{i32, f64}>>) -> !cc.ptr<!cc.struct<{i32, f64}>>
  %1 = cc.stdvec_size %arg0 : (!cc.stdvec<!cc.struct<{i32, f64}>>) -> i64
  %2 = cc.cast %0 : (!cc.ptr<!cc.struct<{i32, f64}>>) -> !cc.ptr<none>
  call @anchor(%2, %1) : (!cc.ptr<none>, i64) -> ()
  return
}

func.func @test_2(%0: !cc.ptr<i8>, %1: !cc.ptr<!cc.struct<{!cc.ptr<!cc.struct<{i32, f64}>>, !cc.ptr<!cc.struct<{i32, f64}>>, !cc.ptr<!cc.struct<{i32, f64}>>}>>) {
  return
}

// CHECK-LABEL: define void @__nvqpp__mlirgen__test_2({ { i32, double }*, i64 } 
// CHECK-SAME:    %[[VAL_0:.*]]) {{.*}}{
// CHECK:         %[[VAL_1:.*]] = extractvalue { { i32, double }*, i64 } %[[VAL_0]], 0
// CHECK:         %[[VAL_2:.*]] = extractvalue { { i32, double }*, i64 } %[[VAL_0]], 1
// CHECK:         %[[VAL_3:.*]] = bitcast { i32, double }* %[[VAL_1]] to i8*
// CHECK:         tail call void @anchor(i8* %[[VAL_3]], i64 %[[VAL_2]])
// CHECK:         ret void
// CHECK:       }

// CHECK-LABEL: define void @test_2(i8* nocapture readnone 
// CHECK-SAME:    %[[VAL_0:.*]], { { i32, double }*, { i32, double }*, { i32, double }* }* nocapture readonly %[[VAL_1:.*]]) {{.*}}{
// CHECK:         %[[VAL_2:.*]] = getelementptr { { i32, double }*, { i32, double }*, { i32, double }* }, { { i32, double }*, { i32, double }*, { i32, double }* }* %[[VAL_1]], i64 0, i32 1
// CHECK:         %[[VAL_3:.*]] = getelementptr { { i32, double }*, { i32, double }*, { i32, double }* }, { { i32, double }*, { i32, double }*, { i32, double }* }* %[[VAL_1]], i64 0, i32 0
// CHECK:         %[[VAL_4:.*]] = load { i32, double }*, { i32, double }** %[[VAL_2]], align 8
// CHECK:         %[[VAL_5:.*]] = load { i32, double }*, { i32, double }** %[[VAL_3]], align 8
// CHECK:         %[[VAL_6:.*]] = ptrtoint { i32, double }* %[[VAL_4]] to i64
// CHECK:         %[[VAL_7:.*]] = ptrtoint { i32, double }* %[[VAL_5]] to i64
// CHECK:         %[[VAL_8:.*]] = sub i64 %[[VAL_6]], %[[VAL_7]]
// CHECK:         %[[VAL_9:.*]] = add i64 %[[VAL_8]], 8
// CHECK:         %[[VAL_10:.*]] = alloca i8, i64 %[[VAL_9]], align 8
// CHECK:         %[[VAL_11:.*]] = bitcast i8* %[[VAL_10]] to i64*
// CHECK:         store i64 %[[VAL_8]], i64* %[[VAL_11]], align 8
// CHECK:         %[[VAL_12:.*]] = getelementptr i8, i8* %[[VAL_10]], i64 8
// CHECK:         %[[VAL_13:.*]] = bitcast { i32, double }* %[[VAL_5]] to i8*
// CHECK:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %[[VAL_12]], i8* align 1 %[[VAL_13]], i64 %[[VAL_8]], i1 false)
// CHECK:         call { i8*, i64 } @altLaunchKernel(i8* nonnull getelementptr inbounds ([7 x i8], [7 x i8]* @test_2.kernelName, i64 0, i64 0), i8* nonnull bitcast ({ i8*, i64 } (i8*, i1)* @test_2.thunk to i8*), i8* nonnull %[[VAL_10]], i64 %[[VAL_9]], i64 2147483647)
// CHECK:         ret void
// CHECK:       }

func.func @__nvqpp__mlirgen__test_3(%arg0 : !cc.struct<{!cc.stdvec<i16>, !cc.stdvec<f32>}>) {
  %0 = cc.extract_value %arg0[0] : (!cc.struct<{!cc.stdvec<i16>, !cc.stdvec<f32>}>) -> !cc.stdvec<i16>
  %1 = cc.stdvec_data %0 : (!cc.stdvec<i16>) -> !cc.ptr<i16>
  %2 = cc.stdvec_size %0 : (!cc.stdvec<i16>) -> i64
  %3 = cc.cast %1 : (!cc.ptr<i16>) -> !cc.ptr<none>
  call @anchor(%3, %2) : (!cc.ptr<none>, i64) -> ()
  %5 = cc.extract_value %arg0[1] : (!cc.struct<{!cc.stdvec<i16>, !cc.stdvec<f32>}>) -> !cc.stdvec<f32>
  %6 = cc.stdvec_data %5 : (!cc.stdvec<f32>) -> !cc.ptr<f32>
  %7 = cc.stdvec_size %5 : (!cc.stdvec<f32>) -> i64
  %8 = cc.cast %6 : (!cc.ptr<f32>) -> !cc.ptr<none>
  call @anchor(%8, %7) : (!cc.ptr<none>, i64) -> ()
  return
}

func.func @test_3(%0: !cc.ptr<i8>, %1: !cc.ptr<!cc.struct<{!cc.struct<{!cc.ptr<i16>, !cc.ptr<i16>, !cc.ptr<i16>}>, !cc.struct<{!cc.ptr<f32>, !cc.ptr<f32>, !cc.ptr<f32>}>}>>) {
  return
}
}

// CHECK-LABEL: define void @__nvqpp__mlirgen__test_3({ { i16*, i64 }, { float*, i64 } } 
// CHECK-SAME:    %[[VAL_0:.*]]) {{.*}}{
// CHECK:         %[[VAL_1:.*]] = extractvalue { { i16*, i64 }, { float*, i64 } } %[[VAL_0]], 0
// CHECK:         %[[VAL_2:.*]] = extractvalue { i16*, i64 } %[[VAL_1]], 0
// CHECK:         %[[VAL_3:.*]] = extractvalue { i16*, i64 } %[[VAL_1]], 1
// CHECK:         %[[VAL_4:.*]] = bitcast i16* %[[VAL_2]] to i8*
// CHECK:         tail call void @anchor(i8* %[[VAL_4]], i64 %[[VAL_3]])
// CHECK:         %[[VAL_5:.*]] = extractvalue { { i16*, i64 }, { float*, i64 } } %[[VAL_0]], 1
// CHECK:         %[[VAL_6:.*]] = extractvalue { float*, i64 } %[[VAL_5]], 0
// CHECK:         %[[VAL_7:.*]] = extractvalue { float*, i64 } %[[VAL_5]], 1
// CHECK:         %[[VAL_8:.*]] = bitcast float* %[[VAL_6]] to i8*
// CHECK:         tail call void @anchor(i8* %[[VAL_8]], i64 %[[VAL_7]])
// CHECK:         ret void
// CHECK:       }

// CHECK-LABEL: define void @test_3(i8* nocapture readnone 
// CHECK-SAME:    %[[VAL_0:.*]], { { i16*, i16*, i16* }, { float*, float*, float* } }* nocapture readonly %[[VAL_1:.*]]) {{.*}}{
// CHECK:         %[[VAL_2:.*]] = getelementptr { { i16*, i16*, i16* }, { float*, float*, float* } }, { { i16*, i16*, i16* }, { float*, float*, float* } }* %[[VAL_1]], i64 0, i32 0, i32 1
// CHECK:         %[[VAL_3:.*]] = getelementptr { { i16*, i16*, i16* }, { float*, float*, float* } }, { { i16*, i16*, i16* }, { float*, float*, float* } }* %[[VAL_1]], i64 0, i32 0, i32 0
// CHECK:         %[[VAL_4:.*]] = load i16*, i16** %[[VAL_2]], align 8
// CHECK:         %[[VAL_5:.*]] = load i16*, i16** %[[VAL_3]], align 8
// CHECK:         %[[VAL_6:.*]] = ptrtoint i16* %[[VAL_4]] to i64
// CHECK:         %[[VAL_7:.*]] = ptrtoint i16* %[[VAL_5]] to i64
// CHECK:         %[[VAL_8:.*]] = sub i64 %[[VAL_6]], %[[VAL_7]]
// CHECK:         %[[VAL_9:.*]] = getelementptr { { i16*, i16*, i16* }, { float*, float*, float* } }, { { i16*, i16*, i16* }, { float*, float*, float* } }* %[[VAL_1]], i64 0, i32 1, i32 1
// CHECK:         %[[VAL_10:.*]] = getelementptr { { i16*, i16*, i16* }, { float*, float*, float* } }, { { i16*, i16*, i16* }, { float*, float*, float* } }* %[[VAL_1]], i64 0, i32 1, i32 0
// CHECK:         %[[VAL_11:.*]] = load float*, float** %[[VAL_9]], align 8
// CHECK:         %[[VAL_12:.*]] = load float*, float** %[[VAL_10]], align 8
// CHECK:         %[[VAL_13:.*]] = ptrtoint float* %[[VAL_11]] to i64
// CHECK:         %[[VAL_14:.*]] = ptrtoint float* %[[VAL_12]] to i64
// CHECK:         %[[VAL_15:.*]] = sub i64 %[[VAL_13]], %[[VAL_14]]
// CHECK:         %[[VAL_16:.*]] = add i64 %[[VAL_8]], 16
// CHECK:         %[[VAL_17:.*]] = add i64 %[[VAL_16]], %[[VAL_15]]
// CHECK:         %[[VAL_18:.*]] = alloca i8, i64 %[[VAL_17]], align 8
// CHECK:         %[[VAL_19:.*]] = bitcast i8* %[[VAL_18]] to i64*
// CHECK:         store i64 %[[VAL_8]], i64* %[[VAL_19]], align 8
// CHECK:         %[[VAL_20:.*]] = getelementptr inbounds i8, i8* %[[VAL_18]], i64 8
// CHECK:         %[[VAL_21:.*]] = bitcast i8* %[[VAL_20]] to i64*
// CHECK:         store i64 %[[VAL_15]], i64* %[[VAL_21]], align 8
// CHECK:         %[[VAL_22:.*]] = getelementptr i8, i8* %[[VAL_18]], i64 16
// CHECK:         %[[VAL_23:.*]] = bitcast i16* %[[VAL_5]] to i8*
// CHECK:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %[[VAL_22]], i8* align 1 %[[VAL_23]], i64 %[[VAL_8]], i1 false)
// CHECK:         %[[VAL_24:.*]] = getelementptr i8, i8* %[[VAL_22]], i64 %[[VAL_8]]
// CHECK:         %[[VAL_25:.*]] = bitcast float* %[[VAL_12]] to i8*
// CHECK:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %[[VAL_24]], i8* align 1 %[[VAL_25]], i64 %[[VAL_15]], i1 false)
// CHECK:         call { i8*, i64 } @altLaunchKernel(i8* nonnull getelementptr inbounds ([7 x i8], [7 x i8]* @test_3.kernelName, i64 0, i64 0), i8* nonnull bitcast ({ i8*, i64 } (i8*, i1)* @test_3.thunk to i8*), i8* nonnull %[[VAL_18]], i64 %[[VAL_17]], i64 2147483647)
// CHECK:         ret void
// CHECK:       }

// CHECK-LABEL: define i64 @test_0.returnOffset() {{.*}}{
// CHECK:         ret i64 2147483647
// CHECK:       }

// CHECK-LABEL: define { i8*, i64 } @test_0.thunk(i8* 
// CHECK-SAME:    %[[VAL_0:.*]], i1 %[[VAL_1:.*]]) {
// CHECK:         %[[VAL_2:.*]] = bitcast i8* %[[VAL_0]] to i64*
// CHECK:         %[[VAL_3:.*]] = load i64, i64* %[[VAL_2]], align 4
// CHECK:         %[[VAL_4:.*]] = getelementptr i8, i8* %[[VAL_0]], i64 8
// CHECK:         %[[VAL_5:.*]] = sdiv i64 %[[VAL_3]], 16
// CHECK:         tail call void @anchor(i8* %[[VAL_4]], i64 %[[VAL_5]])
// CHECK:         ret { i8*, i64 } zeroinitializer
// CHECK:       }

// CHECK-LABEL: define i64 @test_0.argsCreator(i8** nocapture readonly 
// CHECK-SAME:    %[[VAL_0:.*]], i8** nocapture writeonly %[[VAL_1:.*]]) #{{[0-9]+}} {
// CHECK:         %[[VAL_2:.*]] = load i8*, i8** %[[VAL_0]], align 8
// CHECK:         %[[VAL_3:.*]] = getelementptr i8, i8* %[[VAL_2]], i64 8
// CHECK:         %[[VAL_4:.*]] = bitcast i8* %[[VAL_3]] to { i32, double }**
// CHECK:         %[[VAL_5:.*]] = bitcast i8* %[[VAL_2]] to { i32, double }**
// CHECK:         %[[VAL_6:.*]] = load { i32, double }*, { i32, double }** %[[VAL_4]], align 8
// CHECK:         %[[VAL_7:.*]] = load { i32, double }*, { i32, double }** %[[VAL_5]], align 8
// CHECK:         %[[VAL_8:.*]] = ptrtoint { i32, double }* %[[VAL_6]] to i64
// CHECK:         %[[VAL_9:.*]] = ptrtoint { i32, double }* %[[VAL_7]] to i64
// CHECK:         %[[VAL_10:.*]] = sub i64 %[[VAL_8]], %[[VAL_9]]
// CHECK:         %[[VAL_11:.*]] = add i64 %[[VAL_10]], 8
// CHECK:         %[[VAL_12:.*]] = tail call i8* @malloc(i64 %[[VAL_11]])
// CHECK:         %[[VAL_13:.*]] = bitcast i8* %[[VAL_12]] to { i64 }*
// CHECK:         %[[VAL_14:.*]] = getelementptr { i64 }, { i64 }* %[[VAL_13]], i64 0, i32 0
// CHECK:         store i64 %[[VAL_10]], i64* %[[VAL_14]], align 4
// CHECK:         %[[VAL_15:.*]] = getelementptr i8, i8* %[[VAL_12]], i64 8
// CHECK:         %[[VAL_16:.*]] = bitcast i8* %[[VAL_2]] to i8**
// CHECK:         %[[VAL_17:.*]] = load i8*, i8** %[[VAL_16]], align 8
// CHECK:         tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %[[VAL_15]], i8* align 1 %[[VAL_17]], i64 %[[VAL_10]], i1 false)
// CHECK:         store i8* %[[VAL_12]], i8** %[[VAL_1]], align 8
// CHECK:         ret i64 %[[VAL_11]]
// CHECK:       }

// CHECK-LABEL: define void @test_0.kernelRegFunc() {
// CHECK:         tail call void @cudaqRegisterKernelName(i8* nonnull getelementptr inbounds ([7 x i8], [7 x i8]* @test_0.kernelName, i64 0, i64 0))
// CHECK:         tail call void @cudaqRegisterArgsCreator(i8* nonnull getelementptr inbounds ([7 x i8], [7 x i8]* @test_0.kernelName, i64 0, i64 0), i8* nonnull bitcast (i64 (i8**, i8**)* @test_0.argsCreator to i8*))
// CHECK:         ret void
// CHECK:       }

// CHECK-LABEL: define i64 @test_1.returnOffset() {{.*}}{
// CHECK:         ret i64 2147483647
// CHECK:       }

// CHECK-LABEL: define { i8*, i64 } @test_1.thunk(i8* 
// CHECK-SAME:    %[[VAL_0:.*]], i1 %[[VAL_1:.*]]) {
// CHECK:         %[[VAL_2:.*]] = bitcast i8* %[[VAL_0]] to i64*
// CHECK:         %[[VAL_3:.*]] = load i64, i64* %[[VAL_2]], align 4
// CHECK:         %[[VAL_4:.*]] = getelementptr inbounds i8, i8* %[[VAL_0]], i64 8
// CHECK:         %[[VAL_5:.*]] = bitcast i8* %[[VAL_4]] to i64*
// CHECK:         %[[VAL_6:.*]] = load i64, i64* %[[VAL_5]], align 4
// CHECK:         %[[VAL_7:.*]] = getelementptr i8, i8* %[[VAL_0]], i64 16
// CHECK:         %[[VAL_8:.*]] = sdiv i64 %[[VAL_3]], 2
// CHECK:         %[[VAL_9:.*]] = getelementptr i8, i8* %[[VAL_7]], i64 %[[VAL_3]]
// CHECK:         %[[VAL_10:.*]] = sdiv i64 %[[VAL_6]], 4
// CHECK:         tail call void @anchor(i8* %[[VAL_7]], i64 %[[VAL_8]])
// CHECK:         tail call void @anchor(i8* %[[VAL_9]], i64 %[[VAL_10]])
// CHECK:         ret { i8*, i64 } zeroinitializer
// CHECK:       }

// CHECK-LABEL: define i64 @test_1.argsCreator(i8** nocapture readonly 
// CHECK-SAME:    %[[VAL_0:.*]], i8** nocapture writeonly %[[VAL_1:.*]]) #{{[0-9]+}} {
// CHECK:         %[[VAL_2:.*]] = load i8*, i8** %[[VAL_0]], align 8
// CHECK:         %[[VAL_3:.*]] = getelementptr i8, i8* %[[VAL_2]], i64 8
// CHECK:         %[[VAL_4:.*]] = bitcast i8* %[[VAL_3]] to i16**
// CHECK:         %[[VAL_5:.*]] = bitcast i8* %[[VAL_2]] to i16**
// CHECK:         %[[VAL_6:.*]] = load i16*, i16** %[[VAL_4]], align 8
// CHECK:         %[[VAL_7:.*]] = load i16*, i16** %[[VAL_5]], align 8
// CHECK:         %[[VAL_8:.*]] = ptrtoint i16* %[[VAL_6]] to i64
// CHECK:         %[[VAL_9:.*]] = ptrtoint i16* %[[VAL_7]] to i64
// CHECK:         %[[VAL_10:.*]] = sub i64 %[[VAL_8]], %[[VAL_9]]
// CHECK:         %[[VAL_11:.*]] = getelementptr i8, i8* %[[VAL_2]], i64 32
// CHECK:         %[[VAL_12:.*]] = bitcast i8* %[[VAL_11]] to float**
// CHECK:         %[[VAL_13:.*]] = getelementptr i8, i8* %[[VAL_2]], i64 24
// CHECK:         %[[VAL_14:.*]] = bitcast i8* %[[VAL_13]] to float**
// CHECK:         %[[VAL_15:.*]] = load float*, float** %[[VAL_12]], align 8
// CHECK:         %[[VAL_16:.*]] = load float*, float** %[[VAL_14]], align 8
// CHECK:         %[[VAL_17:.*]] = ptrtoint float* %[[VAL_15]] to i64
// CHECK:         %[[VAL_18:.*]] = ptrtoint float* %[[VAL_16]] to i64
// CHECK:         %[[VAL_19:.*]] = sub i64 %[[VAL_17]], %[[VAL_18]]
// CHECK:         %[[VAL_20:.*]] = add i64 %[[VAL_10]], 16
// CHECK:         %[[VAL_21:.*]] = add i64 %[[VAL_20]], %[[VAL_19]]
// CHECK:         %[[VAL_22:.*]] = tail call i8* @malloc(i64 %[[VAL_21]])
// CHECK:         %[[VAL_23:.*]] = bitcast i8* %[[VAL_22]] to { { i64, i64 } }*
// CHECK:         %[[VAL_24:.*]] = getelementptr inbounds { { i64, i64 } }, { { i64, i64 } }* %[[VAL_23]], i64 0, i32 0, i32 0
// CHECK:         store i64 %[[VAL_10]], i64* %[[VAL_24]], align 4
// CHECK:         %[[VAL_25:.*]] = getelementptr inbounds { { i64, i64 } }, { { i64, i64 } }* %[[VAL_23]], i64 0, i32 0, i32 1
// CHECK:         store i64 %[[VAL_19]], i64* %[[VAL_25]], align 4
// CHECK:         %[[VAL_26:.*]] = getelementptr i8, i8* %[[VAL_22]], i64 16
// CHECK:         %[[VAL_27:.*]] = bitcast i8* %[[VAL_2]] to i8**
// CHECK:         %[[VAL_28:.*]] = load i8*, i8** %[[VAL_27]], align 8
// CHECK:         tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %[[VAL_26]], i8* align 1 %[[VAL_28]], i64 %[[VAL_10]], i1 false)
// CHECK:         %[[VAL_29:.*]] = getelementptr i8, i8* %[[VAL_26]], i64 %[[VAL_10]]
// CHECK:         %[[VAL_30:.*]] = bitcast i8* %[[VAL_13]] to i8**
// CHECK:         %[[VAL_31:.*]] = load i8*, i8** %[[VAL_30]], align 8
// CHECK:         tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %[[VAL_29]], i8* align 1 %[[VAL_31]], i64 %[[VAL_19]], i1 false)
// CHECK:         store i8* %[[VAL_22]], i8** %[[VAL_1]], align 8
// CHECK:         ret i64 %[[VAL_21]]
// CHECK:       }

// CHECK-LABEL: define void @test_1.kernelRegFunc() {
// CHECK:         tail call void @cudaqRegisterKernelName(i8* nonnull getelementptr inbounds ([7 x i8], [7 x i8]* @test_1.kernelName, i64 0, i64 0))
// CHECK:         tail call void @cudaqRegisterArgsCreator(i8* nonnull getelementptr inbounds ([7 x i8], [7 x i8]* @test_1.kernelName, i64 0, i64 0), i8* nonnull bitcast (i64 (i8**, i8**)* @test_1.argsCreator to i8*))
// CHECK:         ret void
// CHECK:       }
// CHECK:       ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)

// CHECK-LABEL: define i64 @test_2.returnOffset() {{.*}}{
// CHECK:         ret i64 2147483647
// CHECK:       }

// CHECK-LABEL: define { i8*, i64 } @test_2.thunk(i8* 
// CHECK-SAME:    %[[VAL_0:.*]], i1 %[[VAL_1:.*]]) {
// CHECK:         %[[VAL_2:.*]] = bitcast i8* %[[VAL_0]] to i64*
// CHECK:         %[[VAL_3:.*]] = load i64, i64* %[[VAL_2]], align 4
// CHECK:         %[[VAL_4:.*]] = getelementptr i8, i8* %[[VAL_0]], i64 8
// CHECK:         %[[VAL_5:.*]] = sdiv i64 %[[VAL_3]], 16
// CHECK:         tail call void @anchor(i8* %[[VAL_4]], i64 %[[VAL_5]])
// CHECK:         ret { i8*, i64 } zeroinitializer
// CHECK:       }
// CHECK:       ; Function Attrs: mustprogress nofree nounwind willreturn

// CHECK-LABEL: define i64 @test_2.argsCreator(i8** nocapture readonly 
// CHECK-SAME:    %[[VAL_0:.*]], i8** nocapture writeonly %[[VAL_1:.*]]) #{{[0-9]+}} {
// CHECK:         %[[VAL_2:.*]] = load i8*, i8** %[[VAL_0]], align 8
// CHECK:         %[[VAL_3:.*]] = getelementptr i8, i8* %[[VAL_2]], i64 8
// CHECK:         %[[VAL_4:.*]] = bitcast i8* %[[VAL_3]] to { i32, double }**
// CHECK:         %[[VAL_5:.*]] = bitcast i8* %[[VAL_2]] to { i32, double }**
// CHECK:         %[[VAL_6:.*]] = load { i32, double }*, { i32, double }** %[[VAL_4]], align 8
// CHECK:         %[[VAL_7:.*]] = load { i32, double }*, { i32, double }** %[[VAL_5]], align 8
// CHECK:         %[[VAL_8:.*]] = ptrtoint { i32, double }* %[[VAL_6]] to i64
// CHECK:         %[[VAL_9:.*]] = ptrtoint { i32, double }* %[[VAL_7]] to i64
// CHECK:         %[[VAL_10:.*]] = sub i64 %[[VAL_8]], %[[VAL_9]]
// CHECK:         %[[VAL_11:.*]] = add i64 %[[VAL_10]], 8
// CHECK:         %[[VAL_12:.*]] = tail call i8* @malloc(i64 %[[VAL_11]])
// CHECK:         %[[VAL_13:.*]] = bitcast i8* %[[VAL_12]] to { i64 }*
// CHECK:         %[[VAL_14:.*]] = getelementptr { i64 }, { i64 }* %[[VAL_13]], i64 0, i32 0
// CHECK:         store i64 %[[VAL_10]], i64* %[[VAL_14]], align 4
// CHECK:         %[[VAL_15:.*]] = getelementptr i8, i8* %[[VAL_12]], i64 8
// CHECK:         %[[VAL_16:.*]] = bitcast i8* %[[VAL_2]] to i8**
// CHECK:         %[[VAL_17:.*]] = load i8*, i8** %[[VAL_16]], align 8
// CHECK:         tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %[[VAL_15]], i8* align 1 %[[VAL_17]], i64 %[[VAL_10]], i1 false)
// CHECK:         store i8* %[[VAL_12]], i8** %[[VAL_1]], align 8
// CHECK:         ret i64 %[[VAL_11]]
// CHECK:       }

// CHECK-LABEL: define void @test_2.kernelRegFunc() {
// CHECK:         tail call void @cudaqRegisterKernelName(i8* nonnull getelementptr inbounds ([7 x i8], [7 x i8]* @test_2.kernelName, i64 0, i64 0))
// CHECK:         tail call void @cudaqRegisterArgsCreator(i8* nonnull getelementptr inbounds ([7 x i8], [7 x i8]* @test_2.kernelName, i64 0, i64 0), i8* nonnull bitcast (i64 (i8**, i8**)* @test_2.argsCreator to i8*))
// CHECK:         ret void
// CHECK:       }

// CHECK-LABEL: define i64 @test_3.returnOffset() {{.*}}{
// CHECK:         ret i64 2147483647
// CHECK:       }

// CHECK-LABEL: define { i8*, i64 } @test_3.thunk(i8* 
// CHECK-SAME:    %[[VAL_0:.*]], i1 %[[VAL_1:.*]]) {
// CHECK:         %[[VAL_2:.*]] = bitcast i8* %[[VAL_0]] to i64*
// CHECK:         %[[VAL_3:.*]] = load i64, i64* %[[VAL_2]], align 4
// CHECK:         %[[VAL_4:.*]] = getelementptr inbounds i8, i8* %[[VAL_0]], i64 8
// CHECK:         %[[VAL_5:.*]] = bitcast i8* %[[VAL_4]] to i64*
// CHECK:         %[[VAL_6:.*]] = load i64, i64* %[[VAL_5]], align 4
// CHECK:         %[[VAL_7:.*]] = getelementptr i8, i8* %[[VAL_0]], i64 16
// CHECK:         %[[VAL_8:.*]] = sdiv i64 %[[VAL_3]], 2
// CHECK:         %[[VAL_9:.*]] = getelementptr i8, i8* %[[VAL_7]], i64 %[[VAL_3]]
// CHECK:         %[[VAL_10:.*]] = sdiv i64 %[[VAL_6]], 4
// CHECK:         tail call void @anchor(i8* %[[VAL_7]], i64 %[[VAL_8]])
// CHECK:         tail call void @anchor(i8* %[[VAL_9]], i64 %[[VAL_10]])
// CHECK:         ret { i8*, i64 } zeroinitializer
// CHECK:       }

// CHECK-LABEL: define i64 @test_3.argsCreator(i8** nocapture readonly 
// CHECK-SAME:    %[[VAL_0:.*]], i8** nocapture writeonly %[[VAL_1:.*]]) #{{[0-9]+}} {
// CHECK:         %[[VAL_2:.*]] = load i8*, i8** %[[VAL_0]], align 8
// CHECK:         %[[VAL_3:.*]] = getelementptr i8, i8* %[[VAL_2]], i64 8
// CHECK:         %[[VAL_4:.*]] = bitcast i8* %[[VAL_3]] to i16**
// CHECK:         %[[VAL_5:.*]] = bitcast i8* %[[VAL_2]] to i16**
// CHECK:         %[[VAL_6:.*]] = load i16*, i16** %[[VAL_4]], align 8
// CHECK:         %[[VAL_7:.*]] = load i16*, i16** %[[VAL_5]], align 8
// CHECK:         %[[VAL_8:.*]] = ptrtoint i16* %[[VAL_6]] to i64
// CHECK:         %[[VAL_9:.*]] = ptrtoint i16* %[[VAL_7]] to i64
// CHECK:         %[[VAL_10:.*]] = sub i64 %[[VAL_8]], %[[VAL_9]]
// CHECK:         %[[VAL_11:.*]] = getelementptr i8, i8* %[[VAL_2]], i64 32
// CHECK:         %[[VAL_12:.*]] = bitcast i8* %[[VAL_11]] to float**
// CHECK:         %[[VAL_13:.*]] = getelementptr i8, i8* %[[VAL_2]], i64 24
// CHECK:         %[[VAL_14:.*]] = bitcast i8* %[[VAL_13]] to float**
// CHECK:         %[[VAL_15:.*]] = load float*, float** %[[VAL_12]], align 8
// CHECK:         %[[VAL_16:.*]] = load float*, float** %[[VAL_14]], align 8
// CHECK:         %[[VAL_17:.*]] = ptrtoint float* %[[VAL_15]] to i64
// CHECK:         %[[VAL_18:.*]] = ptrtoint float* %[[VAL_16]] to i64
// CHECK:         %[[VAL_19:.*]] = sub i64 %[[VAL_17]], %[[VAL_18]]
// CHECK:         %[[VAL_20:.*]] = add i64 %[[VAL_10]], 16
// CHECK:         %[[VAL_21:.*]] = add i64 %[[VAL_20]], %[[VAL_19]]
// CHECK:         %[[VAL_22:.*]] = tail call i8* @malloc(i64 %[[VAL_21]])
// CHECK:         %[[VAL_23:.*]] = bitcast i8* %[[VAL_22]] to { { i64, i64 } }*
// CHECK:         %[[VAL_24:.*]] = getelementptr inbounds { { i64, i64 } }, { { i64, i64 } }* %[[VAL_23]], i64 0, i32 0, i32 0
// CHECK:         store i64 %[[VAL_10]], i64* %[[VAL_24]], align 4
// CHECK:         %[[VAL_25:.*]] = getelementptr inbounds { { i64, i64 } }, { { i64, i64 } }* %[[VAL_23]], i64 0, i32 0, i32 1
// CHECK:         store i64 %[[VAL_19]], i64* %[[VAL_25]], align 4
// CHECK:         %[[VAL_26:.*]] = getelementptr i8, i8* %[[VAL_22]], i64 16
// CHECK:         %[[VAL_27:.*]] = bitcast i8* %[[VAL_2]] to i8**
// CHECK:         %[[VAL_28:.*]] = load i8*, i8** %[[VAL_27]], align 8
// CHECK:         tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %[[VAL_26]], i8* align 1 %[[VAL_28]], i64 %[[VAL_10]], i1 false)
// CHECK:         %[[VAL_29:.*]] = getelementptr i8, i8* %[[VAL_26]], i64 %[[VAL_10]]
// CHECK:         %[[VAL_30:.*]] = bitcast i8* %[[VAL_13]] to i8**
// CHECK:         %[[VAL_31:.*]] = load i8*, i8** %[[VAL_30]], align 8
// CHECK:         tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %[[VAL_29]], i8* align 1 %[[VAL_31]], i64 %[[VAL_19]], i1 false)
// CHECK:         store i8* %[[VAL_22]], i8** %[[VAL_1]], align 8
// CHECK:         ret i64 %[[VAL_21]]
// CHECK:       }

// CHECK-LABEL: define void @test_3.kernelRegFunc() {
// CHECK:         tail call void @cudaqRegisterKernelName(i8* nonnull getelementptr inbounds ([7 x i8], [7 x i8]* @test_3.kernelName, i64 0, i64 0))
// CHECK:         tail call void @cudaqRegisterArgsCreator(i8* nonnull getelementptr inbounds ([7 x i8], [7 x i8]* @test_3.kernelName, i64 0, i64 0), i8* nonnull bitcast (i64 (i8**, i8**)* @test_3.argsCreator to i8*))
// CHECK:         ret void
// CHECK:       }

// ========================================================================== //
// Copyright (c) 2022 - 2024 NVIDIA Corporation & Affiliates.                 //
// All rights reserved.                                                       //
//                                                                            //
// This source code and the accompanying materials are made available under   //
// the terms of the Apache License 2.0 which accompanies this distribution.   //
// ========================================================================== //

// RUN: cudaq-opt %s --canonicalize --add-dealloc | cudaq-translate --convert-to=qir | FileCheck %s

module attributes {quake.mangled_name_map = {__nvqpp__mlirgen__Z4mainE3$_0 = "_ZZ4mainENK3$_0clEd"}} {
  func.func @__nvqpp__mlirgen__Z4mainE3$_0(%arg0: f64) attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %0 = cc.alloca f64
    cc.store %arg0, %0 : !cc.ptr<f64>
    %1 = quake.alloca !quake.veq<4>
    %2 = quake.extract_ref %1[0] : (!quake.veq<4>) -> !quake.ref
    quake.x %2 : (!quake.ref) -> ()
    %3 = quake.extract_ref %1[1] : (!quake.veq<4>) -> !quake.ref
    quake.x %3 : (!quake.ref) -> ()
    %4 = cc.load %0 : !cc.ptr<f64>
    %5 = cc.string_literal "XXXY" : !cc.ptr<!cc.array<i8 x 5>>
    quake.exp_pauli %4, %1, %5 : (f64, !quake.veq<4>, !cc.ptr<!cc.array<i8 x 5>>) -> ()
    return
  }
}

// CHECK:         %[[VAL_9:.*]] = alloca { i8*, i64 }, align 8
// CHECK:    %[[VAL_0:.*]] = tail call %[[VAL_1:.*]]* @__quantum__rt__qubit_allocate_array(i64 4)
// CHECK:         %[[VAL_2:.*]] = tail call i8* @__quantum__rt__array_get_element_ptr_1d(%[[VAL_1]]* %[[VAL_0]], i64 0)
// CHECK:         %[[VAL_3:.*]] = bitcast i8* %[[VAL_2]] to %[[VAL_4:.*]]**
// CHECK:         %[[VAL_5:.*]] = load %[[VAL_4]]*, %[[VAL_4]]** %[[VAL_3]], align 8
// CHECK:         tail call void @__quantum__qis__x(%[[VAL_4]]* %[[VAL_5]])
// CHECK:         %[[VAL_6:.*]] = tail call i8* @__quantum__rt__array_get_element_ptr_1d(%[[VAL_1]]* %[[VAL_0]], i64 1)
// CHECK:         %[[VAL_7:.*]] = bitcast i8* %[[VAL_6]] to %[[VAL_4]]**
// CHECK:         %[[VAL_8:.*]] = load %[[VAL_4]]*, %[[VAL_4]]** %[[VAL_7]], align 8
// CHECK:         tail call void @__quantum__qis__x(%[[VAL_4]]* %[[VAL_8]])
// CHECK:         %[[VAL_10:.*]] = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %[[VAL_9]], i64 0, i32 0
// CHECK:         store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @cstr.5858585900, i64 0, i64 0), i8** %[[VAL_10]], align 8
// CHECK:         %[[VAL_11:.*]] = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %[[VAL_9]], i64 0, i32 1
// CHECK:         store i64 4, i64* %[[VAL_11]], align 8
// CHECK:         %[[VAL_12:.*]] = bitcast { i8*, i64 }* %[[VAL_9]] to i8*
// CHECK:         call void @__quantum__qis__exp_pauli(double %[[VAL_13:.*]], %[[VAL_1]]* %[[VAL_0]], i8* nonnull %[[VAL_12]])
// CHECK:         call void @__quantum__rt__qubit_release_array(%[[VAL_1]]* %[[VAL_0]])
// CHECK:         ret void

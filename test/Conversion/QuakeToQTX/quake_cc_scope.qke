// ========================================================================== //
// Copyright (c) 2022 - 2023 NVIDIA Corporation & Affiliates.                 //
// All rights reserved.                                                       //
//                                                                            //
// This source code and the accompanying materials are made available under   //
// the terms of the Apache License 2.0 which accompanies this distribution.   //
// ========================================================================== //

// RUN: cudaq-opt --convert-quake-to-qtx %s | FileCheck %s

module {

  // CHECK-LABEL: func.func @one_scope
  func.func @one_scope() {
    // CHECK: %[[Q0_W0:.*]] = qtx.alloca
    // CHECK: %[[Q1_W0:.*]] = qtx.alloca
    %q0 = quake.alloca !quake.ref
    %q1 = quake.alloca !quake.ref

    // CHECK: %[[Q1_W2:.*]] = cc.scope
    cc.scope {
      // CHECK: %[[Q1_W1:.*]] = qtx.x [%[[Q0_W0]]] %[[Q1_W0]]
      quake.x [%q0] %q1 : (!quake.ref, !quake.ref) -> ()

      // CHECK: cc.continue %[[Q1_W1]]
    }
    // CHECK:  %[[Q1_W3:.*]] = qtx.z [%[[Q0_W0]]] %[[Q1_W2:.*]]
    quake.z [%q0] %q1 : (!quake.ref, !quake.ref) -> ()
    return
  }

  // CHECK-LABEL: func.func @scope_local_wire
  func.func @scope_local_wire() {
    // CHECK: %[[Q0_W0:.*]] = qtx.alloca
    %q0 = quake.alloca !quake.ref

    // CHECK: %[[Q0_W2:.*]] = cc.scope
    cc.scope {
      // CHECK: %[[Q1_W0:.*]] = qtx.alloca
      %q1 = quake.alloca !quake.ref

      // CHECK: %[[Q1_W1:.*]] = qtx.x [%[[Q0_W0]]] %[[Q1_W0]]
      quake.x [%q0] %q1 : (!quake.ref, !quake.ref) -> ()

      // CHECK: %[[Q0_W1:.*]] = qtx.y [%[[Q1_W1]]] %[[Q0_W0]]
      quake.y [%q1] %q0 : (!quake.ref, !quake.ref) -> ()

      // TODO: cc.continue %[[Q0_W1]]
    }
    // CHECK: %[[Q0_W3:.*]] = qtx.z %[[Q0_W2]]
    quake.z %q0 : (!quake.ref) -> ()
    return
  }

  // CHECK-LABEL: func.func @nested_scopes
  func.func @nested_scopes() {
    // CHECK: %[[Q0_W0:.*]] = qtx.alloca
    // CHECK: %[[Q1_W0:.*]] = qtx.alloca
    // CHECK: %[[Q2_W0:.*]] = qtx.alloca
    %q0 = quake.alloca  !quake.ref
    %q1 = quake.alloca  !quake.ref
    %q2 = quake.alloca  !quake.ref

    // CHECK: %[[Q1_Q2:.*]]:2 = cc.scope
    cc.scope {
      // CHECK: %[[Q1_W1:.*]] = qtx.h [%[[Q0_W0]]] %[[Q1_W0]]
      quake.h [%q0] %q1 : (!quake.ref, !quake.ref) -> ()

      // CHECK: %[[Q2_W2:.*]] = cc.scope
      cc.scope {
        // CHECK: %[[Q2_W1:.*]] = qtx.x [%[[Q0_W0]]] %[[Q2_W0]]
        quake.x [%q0] %q2 : (!quake.ref, !quake.ref) -> ()
        // CHECK: cc.continue %[[Q2_W1]]
      }

      // CHECK: cc.continue %[[Q1_W1]], %[[Q2_W2]]
    }

    // CHECK: %[[Q2_W1:.*]] = qtx.y [%[[Q0_W0]]] %[[Q1_Q2]]#0
    quake.y [%q0] %q1 : (!quake.ref, !quake.ref) -> ()
    return
  }


  // CHECK-LABEL: func.func @scope_local_extract_and_vec_measurement
  func.func @scope_local_extract_and_vec_measurement(%qvec : !quake.qvec<2>) {
    %c_0 = arith.constant 0 : i32
    %c_1 = arith.constant 1 : i32

    // CHECK: %[[Q0_W0:.*]], %[[A_0:.*]] = qtx.array_borrow %[[IDX_0:.*]] from %{{.*}}
    %q0 = quake.extract_ref %qvec[%c_0] : (!quake.qvec<2>, i32) -> !quake.ref

    // CHECK: %[[A_3:.*]] = cc.scope
    cc.scope {
      // CHECK: %[[Q1_W0:.*]], %[[A_1:.*]] = qtx.array_borrow %{{.*}} from %[[A_0]]
      %q1 = quake.extract_ref %qvec[%c_1] : (!quake.qvec<2>,i32) -> !quake.ref

      // CHECK:  %[[Q1_W1:.*]] = qtx.y %[[Q1_W0]]
      quake.y %q1 : (!quake.ref) -> ()

      // CHECK: %[[A_2:.*]] = qtx.array_yield %[[Q1_W1]] to %[[A_1]]
      // CHECK: cc.continue %[[A_2]]
    }

    // CHECK: %[[A_4:.*]] = qtx.array_yield %[[Q0_W0]] to %[[A_3]]
    // CHECK: %{{.*}}, %[[A_5:.*]] = qtx.mz %[[A_4]]
    // CHECK: %{{.*}}, %{{.*}} = qtx.array_borrow %[[IDX_0]] from %[[A_5]]
    %reg = quake.mz %qvec : (!quake.qvec<2>) -> !cc.stdvec<i1>
    return
  }

  // CHECK-LABEL: func.func @vec_op_in_nested_scope
  func.func @vec_op_in_nested_scope(%qvec : !quake.qvec<2>) {
    %c_0 = arith.constant 0 : i32

    // CHECK: %[[Q0_W0:.*]], %[[A_0:.*]] = qtx.array_borrow %[[IDX_0:.*]] from %{{.*}}
    %q0 = quake.extract_ref %qvec[%c_0] : (!quake.qvec<2>,i32) -> !quake.ref

    // CHECK: %[[A_Q0_1:.*]]:2 = cc.scope
    cc.scope {

      // CHECK: %[[A_Q0:.*]]:2 = cc.scope
      cc.scope {
        // CHECK: %[[A_1:.*]] = qtx.array_yield %[[Q0_W0]] to %[[A_0]]
        // CHECK: %[[A_2:.*]] = qtx.reset %[[A_1]]
        // CHECK: %[[Q0_W1:.*]], %[[A_3:.*]] = qtx.array_borrow %[[IDX_0]] from %[[A_2]]
        quake.reset %qvec : (!quake.qvec<2>)-> ()

        // CHECK: cc.continue %[[A_3]], %[[Q0_W1]]
      }
      // CHECK: cc.continue %[[A_Q0]]#0, %[[A_Q0]]#1
    }

    // CHECK: %[[A_4:.*]] = qtx.array_yield %[[A_Q0_1]]#1 to %[[A_Q0_1]]#0
    // CHECK: %{{.*}}, %[[A_5:.*]] = qtx.mz %[[A_4]]
    // CHECK: %{{.*}}, %[[A_6:.*]] = qtx.array_borrow %[[IDX_0]] from %[[A_5]]
    %reg = quake.mz %qvec : (!quake.qvec<2>) -> !cc.stdvec<i1>
    return
  }

  // CHECK-LABEL: func.func @vec_op_in_nested_scope_and_local_extraction
  func.func @vec_op_in_nested_scope_and_local_extraction(%qvec : !quake.qvec<2>) {
    %c_0 = arith.constant 0 : i32
    %c_1 = arith.constant 1 : i32

    // CHECK: %[[Q0_W0:.*]], %[[A_0:.*]] = qtx.array_borrow %[[IDX_0:.*]] from %{{.*}}
    %q0 = quake.extract_ref %qvec[%c_0] : (!quake.qvec<2>,i32) -> !quake.ref

    // CHECK: %[[A_Q0_1:.*]]:2 = cc.scope
    cc.scope {

      // CHECK: %[[A_Q0:.*]]:2 = cc.scope
      cc.scope {
        // CHECK: %[[Q1_W0:.*]], %[[A_1:.*]] = qtx.array_borrow %[[IDX_1:.*]] from %[[A_0]]
        %q1 = quake.extract_ref %qvec[%c_1] : (!quake.qvec<2>,i32) -> !quake.ref

        // CHECK: %[[A_2:.*]] = qtx.array_yield %[[Q0_W0]], %[[Q1_W0]] to %[[A_1]]
        // CHECK: %[[A_3:.*]] = qtx.reset %[[A_2]]
        // CHECK: %[[Q0_Q1:.*]]:2, %[[A_4:.*]] = qtx.array_borrow %[[IDX_0]], %[[IDX_1]] from %[[A_3]]
        quake.reset %qvec : (!quake.qvec<2>) -> ()

        // CHECK: %[[A_5:.*]] = qtx.array_yield %[[Q0_Q1]]#1 to %[[A_4]]
        // CHECK: cc.continue %[[A_5]], %[[Q0_Q1]]#0
      }
      // CHECK: cc.continue %[[A_Q0]]#0, %[[A_Q0]]#1
    }

    // CHECK: %[[A_6:.*]] = qtx.array_yield %[[A_Q0_1]]#1 to %[[A_Q0_1]]#0
    // CHECK: %{{.*}}, %[[A_7:.*]] = qtx.mz %[[A_6]]
    // CHECK: %{{.*}}, %[[A_8:.*]] = qtx.array_borrow %[[IDX_0]] from %[[A_7]]
    %reg = quake.mz %qvec : (!quake.qvec<2>) -> !cc.stdvec<i1>
    return
  }
}


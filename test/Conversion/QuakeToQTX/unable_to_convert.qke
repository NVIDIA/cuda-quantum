// ========================================================================== //
// Copyright (c) 2022 - 2023 NVIDIA Corporation & Affiliates.                 //
// All rights reserved.                                                       //
//                                                                            //
// This source code and the accompanying materials are made available under   //
// the terms of the Apache License 2.0 which accompanies this distribution.   //
// ========================================================================== //

// RUN: cudaq-opt --convert-quake-to-qtx %s -split-input-file -verify-diagnostics
// RUN: cudaq-opt --convert-quake-to-qtx %s 2>/dev/null | FileCheck %s


// expected-warning@+1 {{couldn't convert kernel to QTX}}
func.func @unknown_size_veq(%veq: !quake.veq<?>) {
  return
}

// CHECK-LABEL:   func.func @unknown_size_veq(
// CHECK-SAME:                                 %[[VAL_0:.*]]: !quake.veq<?>) {
// CHECK:           return
// CHECK:         }

// -----

// Make sure we corretly undo the in-place update of `func.return`.

// expected-warning@+1 {{couldn't convert kernel to QTX}}
func.func @return_mz(%veq: !quake.veq<2>, %size: i64) -> !cc.stdvec<i1> {
  %reg = quake.mz %veq : (!quake.veq<2>) -> !cc.stdvec<i1>
  %error = quake.alloca [%size : i64]  !quake.veq<?>
  return %reg : !cc.stdvec<i1>
}

// CHECK-LABEL:   func.func @return_mz(
// CHECK-SAME:                         %[[VAL_0:.*]]: !quake.veq<2>,
// CHECK-SAME:                         %[[VAL_1:.*]]: i64) -> !cc.stdvec<i1> {
// CHECK:           %[[VAL_2:.*]] = quake.mz %[[VAL_0]] : (!quake.veq<2>) -> !cc.stdvec<i1>
// CHECK:           %[[VAL_3:.*]] = quake.alloca[%[[VAL_1]] : i64] !quake.veq<?>
// CHECK:           return %[[VAL_2]] : !cc.stdvec<i1>
// CHECK:         }

// -----

// expected-warning@+1 {{couldn't convert kernel to QTX}}
func.func @too_many_qextracts(%a: i64, %b: i64, %c: i64) {
  %0 = quake.alloca !quake.veq<2>
  %qa = quake.extract_ref %0[%a] : (!quake.veq<2>, i64) -> !quake.ref
  %qb = quake.extract_ref %0[%b] : (!quake.veq<2>, i64) -> !quake.ref
  %qc = quake.extract_ref %0[%c] : (!quake.veq<2>, i64) -> !quake.ref
  return
}

// CHECK-LABEL:   func.func @too_many_qextracts(
// CHECK-SAME:                                  %[[VAL_0:.*]]: i64, %[[VAL_1:.*]]: i64, %[[VAL_2:.*]]: i64) {
// CHECK:           %[[VAL_3:.*]] = quake.alloca !quake.veq<2>
// CHECK:           %[[VAL_4:.*]] = quake.extract_ref %[[VAL_3]]{{\[}}%[[VAL_0]]] : (!quake.veq<2>, i64) -> !quake.ref
// CHECK:           %[[VAL_5:.*]] = quake.extract_ref %[[VAL_3]]{{\[}}%[[VAL_1]]] : (!quake.veq<2>, i64) -> !quake.ref
// CHECK:           %[[VAL_6:.*]] = quake.extract_ref %[[VAL_3]]{{\[}}%[[VAL_2]]] : (!quake.veq<2>, i64) -> !quake.ref
// CHECK:           return
// CHECK:         }

// -----

// expected-warning@+1 {{couldn't convert kernel to QTX}}
func.func @for_loop_with_extracted_vector() {
  %c2_i64 = arith.constant 2 : i64
  %c0_i64 = arith.constant 0 : i64
  %c1_i64 = arith.constant 1 : i64

  %0 = quake.alloca  !quake.veq<2>
  %1 = quake.extract_ref %0[%c0_i64] : (!quake.veq<2>, i64) -> !quake.ref
  %2 = quake.extract_ref %0[%c1_i64] : (!quake.veq<2>, i64) -> !quake.ref

  %alloca = memref.alloca() : memref<i64>
  memref.store %c0_i64, %alloca[] : memref<i64>
  cc.loop while {
    %4 = memref.load %alloca[] : memref<i64>
    %5 = arith.cmpi ult, %4, %c2_i64 : i64
    cc.condition %5
  } do {
    %4 = memref.load %alloca[] : memref<i64>
    %5 = quake.extract_ref %0[%4] : (!quake.veq<2>, i64) -> !quake.ref
    quake.x %5 : (!quake.ref) -> ()
    cc.continue
  } step {
    %4 = memref.load %alloca[] : memref<i64>
    %5 = arith.addi %4, %c1_i64 : i64
    memref.store %5, %alloca[] : memref<i64>
  }
  return
}

// CHECK-LABEL:   func.func @for_loop_with_extracted_vector() {
// CHECK:           %[[VAL_0:.*]] = arith.constant 2 : i64
// CHECK:           %[[VAL_1:.*]] = arith.constant 0 : i64
// CHECK:           %[[VAL_2:.*]] = arith.constant 1 : i64
// CHECK:           %[[VAL_3:.*]] = quake.alloca !quake.veq<2>
// CHECK:           %[[VAL_4:.*]] = quake.extract_ref %[[VAL_3]]{{\[}}%[[VAL_1]]] : (!quake.veq<2>, i64) -> !quake.ref
// CHECK:           %[[VAL_5:.*]] = quake.extract_ref %[[VAL_3]]{{\[}}%[[VAL_2]]] : (!quake.veq<2>, i64) -> !quake.ref
// CHECK:           %[[VAL_6:.*]] = memref.alloca() : memref<i64>
// CHECK:           memref.store %[[VAL_1]], %[[VAL_6]][] : memref<i64>
// CHECK:           cc.loop while {
// CHECK:             %[[VAL_7:.*]] = memref.load %[[VAL_6]][] : memref<i64>
// CHECK:             %[[VAL_8:.*]] = arith.cmpi ult, %[[VAL_7]], %[[VAL_0]] : i64
// CHECK:             cc.condition %[[VAL_8]]
// CHECK:           } do {
// CHECK:             %[[VAL_9:.*]] = memref.load %[[VAL_6]][] : memref<i64>
// CHECK:             %[[VAL_10:.*]] = quake.extract_ref %[[VAL_3]]{{\[}}%[[VAL_9]]] : (!quake.veq<2>, i64) -> !quake.ref
// CHECK:             quake.x %[[VAL_10]] : (!quake.ref) -> ()
// CHECK:             cc.continue
// CHECK:           } step {
// CHECK:             %[[VAL_11:.*]] = memref.load %[[VAL_6]][] : memref<i64>
// CHECK:             %[[VAL_12:.*]] = arith.addi %[[VAL_11]], %[[VAL_2]] : i64
// CHECK:             memref.store %[[VAL_12]], %[[VAL_6]][] : memref<i64>
// CHECK:           }
// CHECK:           return
// CHECK:         }


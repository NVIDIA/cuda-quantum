#!/bin/bash

# ============================================================================ #
# Copyright (c) 2022 - 2023 NVIDIA Corporation & Affiliates.                   #
# All rights reserved.                                                         #
#                                                                              #
# This source code and the accompanying materials are made available under     #
# the terms of the Apache License 2.0 which accompanies this distribution.     #
# ============================================================================ #

# This is a skeleton driver script to compile C++ source that contains
# CUDA Quantum code.

RED=$(tput setaf 1)
NORMAL=$(tput sgr0)
function error_exit {
	callerName=$(basename "$(caller 0)")
	echo "${RED}${callerName}:$(echo $(caller 0) | cut -d " " -f1): $1${NORMAL}"
	exit 1
}

function run() {
	if $ECHO; then
		echo "$*"
	fi
	$*
	if [ $? -ne 0 ]; then
		echo "failed: \"$*\"" >&2
		exit 1
	fi
}

function add_pass_to_pipeline {
	if [ -z "$1" ]; then
		echo "$2"
	else
		echo "$1,$2"
	fi
}

function list_targets {
	ls -I *.cpp -1 ${install_dir}/targets/ | grep ".config$" | sed -e 's/\.config$//'
	exit 0
}

function list_simulators {
	for file in $(grep -L "PLATFORM_QPU=" $(ls ${install_dir}/targets/*.config)) ; do
		if ! grep -q "LIBRARY_MODE_EXECUTION_MANAGER=" $file ; then
			echo $(basename $file | cut -d "." -f 1)
		fi
	done
}

function get_simulation_backend {
	config_file="${install_dir}/targets/$1.config"
	if [ -f "$config_file" ]; then
    	line=$(grep "NVQIR_SIMULATION_BACKEND=" "$config_file")
		if [ $? -eq 0 ]; then
			echo ${line#*=} | tr -d '"'
		fi
	fi
}

function query_gpu {
	if [ -x "$(command -v nvidia-smi)" ]; then
		# Make sure nvidia-smi works.
		nvidia-smi -L | grep 'Failed\|Error\|error\|failed' >/dev/null 2>&1
		if [ $? != 0 ]; then
			ngpus=$(nvidia-smi -L | wc -l)
			if [ $((ngpus > 0)) != 0 ]; then
				echo true
				return
			fi
		fi
	fi
	echo false
}

function show_help {
	cat - <<HELP
--llvm-version=<vers>
	Set the LLVM version suffix is <vers>.

--execution-manager=<mgr> | -em=<mgr> | -execution-manager=<mgr>
	Set the execution manager to <mgr>.

--target=<target> | -target=<target>
	Set the Target name to <target>.

--list-targets
    List the available targets NVQ++ can compile to.

--emit-qir=<file> | -emit-qir=<file>
	Emit the QIR output to <file>.

--emulate | -emulate
   For physical, remote QPU execution, enable local emulation for testing.

--platform=<lib> | -platform=<lib>
	Set the platform library name to <lib>.

--cmake-host-compiler=<cc>
	Set the host C++ compiler to <cc>.

-g
	Enable debugging output.

--enable-mlir
	Enable and generate MLIR code for CUDA Quantum kernels.

--clang-verbose | -clang-verbose
	Enable the verbose option (-v) to the C++ compiler.

--load=<domain>
    Load the domain-specific library, e.g. chemistry.

--[no-]device-code-loading
	Enable/disable device code loading pass.

--[no-]unwind-lowering
	Enable/disable unwind lowering pass.

--[no-]kernel-execution
	Enable/disable kernel execution pass.

--[no-]aggressive-early-inline
	Enable/disable early inlining pass.

--[no-]apply-specialization
	Enable/disable specialization of quake.apply ops.

--[no-]lambda-lifting
	Enable/disable lambda lifting pass.

--save-temps
	Save temporary files.

-o=<obj>
	Specify the output file.

-D<macro>
	Define a cpp macro.

-L<dir> | -L <dir>
	Add <dir> to the linker's library path.

-I<dir> | -I <dir>
	Add a <dir> to the include path.

-l<libname> | -l <libname>
	Add <libname> to the linker's list of libs to link.

-c
	Compile only. Do not link.

-Wl<opt>
	Linker options to be passed to the linker.

-v
	Verbose output. Shows the commands the driver executes.

-h | --help
	Print this help.
HELP
	exit 0
}

# Install directory is wherever this script is and up one directory
install_dir="$(
	cd -- "$(dirname "$0")/.." >/dev/null 2>&1
	pwd -P
)"
llvm_install_dir="@LLVM_BINARY_DIR@"
llvm_version="@LLVM_VERSION_MAJOR@.@LLVM_VERSION_MINOR@.@LLVM_VERSION_PATCH@"
llvm_suffix="@NVQPP_LLVM_EXECUTABLE_SUFFIX@"

IS_RELOCATABLE_INSTALL=@CUDAQ_RELOCATABLE_BOOL@
INCLUDES="@CUDAQ_CXX_NVQPP_INCLUDE_STR@"

# If we are a relocatable package, then we
# want to re-divert llvm_install_dir to the install_dir
if ${IS_RELOCATABLE_INSTALL}; then
	llvm_install_dir="${install_dir}"
fi

# Ensure that we have cudaq.h and we know where the include path is
CUDAQ_INCLUDE_PATH="${install_dir}/include"
if [ ! -f "${install_dir}/include/cudaq.h" ]; then
	# If the header is not there, then we are likely in
	# the build directory for testing.
	if [ "@CMAKE_BINARY_DIR@" -ef "${install_dir}" ]; then
		CUDAQ_INCLUDE_PATH="@CMAKE_SOURCE_DIR@/runtime"
		INCLUDES="${INCLUDES} -I @CMAKE_SOURCE_DIR@/tpls/fmt/include"
	else
		error_exit "Invalid CUDA Quantum install configuration."
	fi
fi

ECHO=false
TOOLBIN="${install_dir}/bin/"
LLVMBIN="${llvm_install_dir}/bin/"

if [ -d "${llvm_install_dir}/bin" -a \
	-x "${llvm_install_dir}/bin/llc${llvm_suffix}" -a \
	-x "${llvm_install_dir}/bin/clang++${llvm_suffix}" ]; then
	LLVMBIN="${llvm_install_dir}/bin/"
fi

# Compiler and linker flags
COMPILER_FLAGS="-std=c++20 -I${CUDAQ_INCLUDE_PATH} ${CUDAQ_CLANG_EXTRA_ARGS}"
CLANG_RESOURCE_DIR=""
# If we are a relocatable package, we want to
# add compiler flags that will point clang to our repackaged
# clang / gcc system headers.
if ${IS_RELOCATABLE_INSTALL}; then
	CLANG_RESOURCE_DIR="-resource-dir ${install_dir}/lib/clang/@CUDAQ_LLVM_VERSION@"
fi

CUDAQ_IS_APPLE=@CUDAQ_IS_APPLE@
LINKER_PATH=
NVQPP_LD_PATH=${NVQPP_LD_PATH:-"@NVQPP_LD_PATH@"}
if [ -f "$NVQPP_LD_PATH" ]; then
	LINKER_PATH="--ld-path=${NVQPP_LD_PATH}"
fi
LINKER_FLAGS="${LINKER_FLAGS} -Wl,-rpath,${install_dir}/lib -Wl,-rpath,${install_dir}/lib/plugins -Wl,-rpath,${PWD}"

LIBRARY_MODE_EXECUTION_MANAGER="default"
PLATFORM_LIBRARY="default"
LLVM_QUANTUM_TARGET="qir"
LINKDIRS="-L${install_dir}/lib -L${install_dir}/lib/plugins @CUDAQ_CXX_NVQPP_LINK_STR@"
LINKLIBS="-lcudaq -lcudaq-common -lcudaq-mlir-runtime -lcudaq-builder -lcudaq-ensmallen -lcudaq-nlopt -lcudaq-spin"

# Add any plugin libraries to the link stage
CUDAQ_PLUGIN_DIR=${install_dir}/lib/plugins
if [ -d "$CUDAQ_PLUGIN_DIR" ] && [ -n "$(ls -A $CUDAQ_PLUGIN_DIR)" ]
then
  CUDAQ_PLUGIN_LIBS=`ls ${install_dir}/lib/plugins/*`
  for entry in $CUDAQ_PLUGIN_LIBS
  do
    PLUGIN_NAME=$(basename $entry)
    PLUGIN_NAME=${PLUGIN_NAME#lib}
    PLUGIN_NAME=${PLUGIN_NAME%@CMAKE_SHARED_LIBRARY_SUFFIX@}
    LINKLIBS="$LINKLIBS -l$PLUGIN_NAME"
  done
fi

CUDAQ_EMULATE_REMOTE=false
CLANG_VERBOSE=
OUTPUTOPTS=
OUTPUTFILE=
OBJS=
SRCS=
ARGS=
CUDAQ_QUAKE_ARGS=
DO_LINK=true
SHOW_VERSION=false
ENABLE_UNWIND_LOWERING=true
ENABLE_DEVICE_CODE_LOADERS=true
ENABLE_KERNEL_EXECUTION=true
ENABLE_AGGRESSIVE_EARLY_INLINE=true
ENABLE_LOWER_TO_CFG=true
ENABLE_APPLY_SPECIALIZATION=true
ENABLE_LAMBDA_LIFTING=true
DELETE_TEMPS=true
TARGET_CONFIG=
EMIT_QIR=false
PREPROCESSOR_DEFINES=
CUDAQ_QUAKE_DEBUG=
SHOW_HELP=false
LIST_TARGETS=false
DISABLE_QUBIT_MAPPING=false
NVQIR_LIBS="-lnvqir -lnvqir-"

# Provide a default backend, user can override
NVQIR_SIMULATION_BACKEND="qpp"
# Check availability of NVIDA GPU(s)
gpu_found=$(query_gpu)
if ${gpu_found} && [ -f "${install_dir}/lib/libnvqir-custatevec-fp32.so" ]; then
	NVQIR_SIMULATION_BACKEND="custatevec-fp32"
fi
# Check environment variable - overrides the default
if [[ ! -z "${CUDAQ_DEFAULT_SIMULATOR}" ]]; then
	available_simulators=( $(list_simulators) )
	for s in "${available_simulators[@]}"
	do
		if [ "${CUDAQ_DEFAULT_SIMULATOR}" = "$s" ]; then
			TARGET_CONFIG="${CUDAQ_DEFAULT_SIMULATOR}"
			NVQIR_SIMULATION_BACKEND=$(get_simulation_backend "$s")
			break
		fi
	done
fi

# We default to LIBRARY_MODE, physical
# Quantum Targets can override this to turn on
# our MLIR compilation workflow.
LIBRARY_MODE=true

CXX=${LLVMBIN}clang++${llvm_suffix}
LINKER_CXX=${CXX}
CMAKE_FALLBACK_HOST_CXX=${CXX}
TARGET_ARGS=

if [[ $# -eq 0 ]]; then
    SHOW_HELP=true
fi

# First, find the target option. The name is needed since it is the prefix for
# any target specific options.
N=$#
for (( i=1; i<=$N; i++ )); do
	if [[ ${@:$i:1} == --target ]] || [[ ${@:$i:1} == -target ]]; then
		TARGET_CONFIG="${@:$i+1:1}"
		break
	fi
done

while [ $# -ne 0 ]; do
	# Filter out any target-specific options.
	if [[ $# -gt 1 ]] && [[ -n "${TARGET_CONFIG}" ]] && \
	     [[ "$1" = --${TARGET_CONFIG}-* ]]; then
		# Assume always has an additional value
		TARGET_ARGS="${TARGET_ARGS} $1 $2"
		shift 2
		continue
	fi

	# Otherwise, process the argument.
	case "$1" in
	--llvm-version)
		llvm_suffix="$2"
		shift
		;;
	--execution-manager | -em | -execution-manager)
		LIBRARY_MODE_EXECUTION_MANAGER="$2"
		shift
		;;
	--target | -target)
		shift
		;;
	--emit-qir | -emit-qir)
		EMIT_QIR=true
		;;
	--emulate | -emulate)
		CUDAQ_EMULATE_REMOTE=true
		;;
	# This is intentionally not included in the "show_help" documentation
	# because it may change in the future.
	--disable-qubit-mapping | -disable-qubit-mapping)
		DISABLE_QUBIT_MAPPING=true
		;;
	--list-targets)
		LIST_TARGETS=true
		;;
	--platform | -platform)
		PLATFORM_LIBRARY="$2"
		shift
		;;
	--load | -load)
		LINKLIBS="${LINKLIBS} -lcudaq-$2"
		shift
		;;
	--cmake-host-compiler)
		CMAKE_FALLBACK_HOST_CXX="$2"
		shift
		;;
	-g)
		COMPILER_FLAGS="${COMPILER_FLAGS} -g"
		CUDAQ_QUAKE_DEBUG="-g"
		;;
	--enable-mlir)
		LIBRARY_MODE=false
		;;
	--clang-verbose | -clang-verbose)
		CLANG_VERBOSE="-v"
		;;
	--no-device-code-loading)
		ENABLE_DEVICE_CODE_LOADERS=false
		;;
	--device-code-loading)
		ENABLE_DEVICE_CODE_LOADERS=true
		;;
	--no-unwind-lowering)
		ENABLE_UNWIND_LOWERING=false
		;;
	--unwind-lowering)
		ENABLE_UNWIND_LOWERING=true
		;;
	--no-kernel-execution)
		ENABLE_KERNEL_EXECUTION=false
		;;
	--kernel-execution)
		ENABLE_KERNEL_EXECUTION=true
		;;
	--no-aggressive-early-inline)
		ENABLE_AGGRESSIVE_EARLY_INLINE=false
		;;
	--aggressive-early-inline)
		ENABLE_AGGRESSIVE_EARLY_INLINE=true
		;;
	--no-apply-specialization)
		ENABLE_APPLY_SPECIALIZATION=false
		;;
	--apply-specialization)
		ENABLE_APPLY_SPECIALIZATION=true
		;;
	--no-lambda-lifting)
		ENABLE_LAMBDA_LIFTING=false
		;;
	--lambda-lifting)
		ENABLE_LAMBDA_LIFTING=true
		;;
	--save-temps)
		DELETE_TEMPS=false
		;;
	-h|--help)
		SHOW_HELP=true
		;;
	-o)
		OUTPUTOPTS="-o $2"
		OUTPUTFILE="$2"
		shift
		;;
	-D*)
		DEFINED_VAR=$1
		PREPROCESSOR_DEFINES="${PREPROCESSOR_DEFINES} -D ${DEFINED_VAR:2}"
		;;
	-L)
		LINKER_FLAGS="${LINKER_FLAGS} -L$2"
		shift
		;;
	-I)
		INCLUDES="${INCLUDES} -I $2"
		shift
		;;
	-l)
		LINKLIBS="${LINKLIBS} -l$2"
		shift
		;;
	-c)
		DO_LINK=false
		;;
	-L* | -Wl*)
		LINKER_FLAGS="${LINKER_FLAGS} $1"
		;;
	-I*)
		# introduce a space for cudaq-quake option handling
		DIR=$(echo $1 | sed -e 's/^-I//')
		INCLUDES="${INCLUDES} -I ${DIR}"
		;;
	-l*)
		LINKLIBS="${LINKLIBS} $1"
		;;
	--version)
		CUDAQ_QUAKE_ARGS="--nvqpp-version ${CUDAQ_QUAKE_ARGS}"
		SHOW_VERSION=true
		;;
	-v)
		ECHO=true
		;;
	*.o | *.so | *.bundle)
		OBJS="${OBJS} $1"
		;;
	*.cpp | *.cc)
		SRCS="${SRCS} $1"
		;;
	*.a | *.dylib)
		LINKLIBS="${LINKLIBS} $1"
		;;
	*)
		# Pass any unrecognized options on to the clang++ tool.
		ARGS="${ARGS} $1"
		CUDAQ_QUAKE_ARGS="${CUDAQ_QUAKE_ARGS} --Xcudaq $1"
		;;
	esac
	shift
done

if ${SHOW_HELP}; then
	show_help
fi

if ${LIST_TARGETS}; then
	list_targets
fi

TMPFILES=
function delete_temp_files {
	if ${DELETE_TEMPS}; then
		if [ -n "${TMPFILES}" ]; then
			rm -f ${TMPFILES}
		fi
	fi
}
trap delete_temp_files EXIT

# Goal here is to parse the backend config file, get the
# platform library name, and any boolean flags, and setup
# the resultant binary to target that specified backend.
OBJS_TO_MERGE=""
if [ -n "${TARGET_CONFIG}" ]; then
	TARGET_CONFIG_FILE="${install_dir}/targets/${TARGET_CONFIG}.config"
	if [ -f "${TARGET_CONFIG_FILE}" ]; then
		GEN_TARGET_BACKEND=false
		. "${TARGET_CONFIG_FILE}" ${TARGET_ARGS}

		if ${GEN_TARGET_BACKEND}; then
			# Add a function that will run before main and set the target
			# backend on the quantum_platform
			TARGET_CONFIG="${TARGET_CONFIG};emulate;${CUDAQ_EMULATE_REMOTE}"
			TARGET_CONFIG="${TARGET_CONFIG};disable_qubit_mapping;${DISABLE_QUBIT_MAPPING}"
			TARGET_CONFIG="${TARGET_CONFIG}${PLATFORM_EXTRA_ARGS}"
			OUTFILENAME=$(mktemp nvqppGenTargetBackend.XXXXXX.o)
			run ${CXX} -DNVQPP_TARGET_BACKEND_CONFIG="\"${TARGET_CONFIG}\"" -o $OUTFILENAME -c -x c++ ${install_dir}/targets/backendConfig.cpp
			OBJS_TO_MERGE="${OUTFILENAME}"
			TMPFILES="${TMPFILES} ${OUTFILENAME}"
		fi
	else
		error_exit "Invalid Target: ($TARGET_CONFIG)"
	fi
fi

# Configure the NVQIR link line if this is in refactored mode
NVQIR_LIBS="${NVQIR_LIBS}${NVQIR_SIMULATION_BACKEND}"

# Set the execution manager and the platform
LINKLIBS="${LINKLIBS} -lcudaq-em-${LIBRARY_MODE_EXECUTION_MANAGER}"
LINKLIBS="${LINKLIBS} -lcudaq-platform-${PLATFORM_LIBRARY}"
LINKLIBS="${LINKLIBS} ${NVQIR_LIBS}"

if ${CUDAQ_IS_APPLE}; then
	if [ "@CMAKE_CXX_COMPILER_ID@" == "GNU" ]; then
		LINKER_CXX=@CMAKE_CXX_COMPILER@
	fi
fi
LLC=${LLVMBIN}llc${llvm_suffix}

if ${LIBRARY_MODE}; then
	ENABLE_KERNEL_EXECUTION=false
fi

RUN_OPT=false
OPT_PASSES=
if ${ENABLE_UNWIND_LOWERING}; then
	RUN_OPT=true
	OPT_PASSES="func.func(unwind-lowering)"
fi
if ${ENABLE_LAMBDA_LIFTING}; then
	RUN_OPT=true
	OPT_PASSES=$(add_pass_to_pipeline "${OPT_PASSES}" "canonicalize,lambda-lifting")
fi
if ${ENABLE_APPLY_SPECIALIZATION}; then
	RUN_OPT=true
	OPT_PASSES=$(add_pass_to_pipeline "${OPT_PASSES}" "func.func(memtoreg{quantum=0}),canonicalize,apply-op-specialization")
fi
if ${ENABLE_KERNEL_EXECUTION}; then
	RUN_OPT=true
	OPT_PASSES=$(add_pass_to_pipeline "${OPT_PASSES}" "kernel-execution")
fi
if ${ENABLE_AGGRESSIVE_EARLY_INLINE}; then
	RUN_OPT=true
	if ${DO_LINK}; then
		OPT_PASSES=$(add_pass_to_pipeline "${OPT_PASSES}" "aggressive-early-inlining")
	else
		OPT_PASSES=$(add_pass_to_pipeline "${OPT_PASSES}" "func.func(indirect-to-direct-calls),inline")
	fi
fi
if ${ENABLE_DEVICE_CODE_LOADERS}; then
	RUN_OPT=true
	OPT_PASSES=$(add_pass_to_pipeline "${OPT_PASSES}" "func.func(quake-add-metadata)")
	OPT_PASSES=$(add_pass_to_pipeline "${OPT_PASSES}" "device-code-loader{use-quake=1}")
fi
if ${ENABLE_LOWER_TO_CFG}; then
	RUN_OPT=true
	OPT_PASSES=$(add_pass_to_pipeline "${OPT_PASSES}" "expand-measurements,func.func(lower-to-cfg)")
fi
if ${RUN_OPT}; then
	OPT_PASSES=$(add_pass_to_pipeline "${OPT_PASSES}" "canonicalize,cse")
fi

OPT_PASSES="builtin.module(${OPT_PASSES})"

if ${SHOW_VERSION} && [ -z "$SRCS" ] && [ -z "$OBJS" ]; then
	# If version is requested and no source files were provided, bypass the
	# cudaq-quake path that expects to read code from stdin.
	echo "" | ${TOOLBIN}cudaq-quake ${CUDAQ_QUAKE_ARGS}
	DO_LINK=false
fi

for i in ${SRCS}; do
	file=$(basename -s .cc -s .cpp $i)

	# If LIBRARY_MODE explicitly requested, then
	# simply compile with the classical compiler.
	if ${LIBRARY_MODE}; then
		run ${CMAKE_FALLBACK_HOST_CXX} ${COMPILER_FLAGS} -DCUDAQ_LIBRARY_MODE ${PREPROCESSOR_DEFINES} ${INCLUDES} ${ARGS} -o ${file}.o -c $i
		OBJS="${OBJS} ${file}.o"
		# Go to the next iteration, maybe there
		# will be cudaq kernels there
		continue
	fi

	# If we make it here, we have CUDA Quantum kernels, need
	# to map to MLIR and output an LLVM file for the classical code
	run ${TOOLBIN}cudaq-quake ${CUDAQ_QUAKE_DEBUG} ${CLANG_VERBOSE} ${CLANG_RESOURCE_DIR} ${PREPROCESSOR_DEFINES} ${INCLUDES} ${CUDAQ_QUAKE_ARGS} --emit-llvm-file $i -o ${file}.qke
	TMPFILES="${TMPFILES} ${file}.ll ${file}.qke"

	# Run the MLIR passes
	QUAKE_IN=${file}.qke
	if [ -f ${QUAKE_IN} ]; then
		if ${RUN_OPT}; then
			DCL_FILE=$(mktemp ${file}.qke.XXXXXX)
			TMPFILES="${TMPFILES} ${DCL_FILE} ${DCL_FILE}.o"
			run ${TOOLBIN}cudaq-opt --pass-pipeline="${OPT_PASSES}" ${QUAKE_IN} -o ${DCL_FILE}
			QUAKE_IN=${DCL_FILE}
		fi
		QUAKELL_FILE=$(mktemp ${file}.ll.XXXXXX)
		TMPFILES="${TMPFILES} ${QUAKELL_FILE}"

		# FIXME This next step needs to be extensible... We may lower to QIR, but we
		# may need to lower to Rigetti QIR and link with their libs or we may lower
		# to IBM QUIR
		run ${TOOLBIN}cudaq-translate --convert-to=${LLVM_QUANTUM_TARGET} ${QUAKE_IN} -o ${QUAKELL_FILE}
		if ${EMIT_QIR}; then
			run cp ${QUAKELL_FILE} ${file}.qir.ll
			exit 0
		fi

		# Rewrite internal linkages so we can override the function.
		mv ${file}.ll ${file}.pre.ll
		TMPFILES="${TMPFILES} ${file}.pre.ll"
		run ${install_dir}/bin/fixup-linkage ${file}.qke ${file}.pre.ll ${file}.ll

		# Lower our LLVM to object files
		run ${LLC} --relocation-model=pic --filetype=obj -O2 ${QUAKELL_FILE} -o ${file}.qke.o
		QUAKE_OBJ="${file}.qke.o"
	else
		QUAKE_OBJ=
	fi
	run ${LLC} --relocation-model=pic --filetype=obj -O2 ${file}.ll -o ${file}.classic.o
	TMPFILES="${TMPFILES} ${file}.qke.o ${file}.classic.o"
	if ${DO_LINK}; then
		TMPFILES="${TMPFILES} ${file}.o"
	fi

	# If we had cudaq kernels, merge the quantum and classical object files.
	run ${LINKER_CXX} ${LINKER_PATH} ${LINKDIRS} -r ${QUAKE_OBJ} ${file}.classic.o ${OBJS_TO_MERGE} -o ${file}.o
	OBJS="${OBJS} ${file}.o"
done

if ${DO_LINK}; then
	run ${LINKER_CXX} ${LINKER_PATH} ${LINKER_FLAGS} ${LINKDIRS} ${OBJS} ${LINKLIBS} ${OUTPUTOPTS}
else
	# Save the object file to what the user specified
	if [ ! -z "${OUTPUTFILE}" ] && [ $((${#OBJS[@]} == 0)) ]; then
		run mv ${OBJS} ${OUTPUTFILE}
	fi
fi

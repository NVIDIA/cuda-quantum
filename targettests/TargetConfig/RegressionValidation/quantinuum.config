# ============================================================================ #
# Copyright (c) 2022 - 2024 NVIDIA Corporation & Affiliates.                   #
# All rights reserved.                                                         #
#                                                                              #
# This source code and the accompanying materials are made available under     #
# the terms of the Apache License 2.0 which accompanies this distribution.     #
# ============================================================================ #

#  RUN: cudaq-target-conf -o %t %cudaq_target_dir/quantinuum.yml && cat %t | FileCheck %s

# Tell DefaultQuantumPlatform what QPU subtype to use
# CHECK-DAG: PLATFORM_QPU=remote_rest

# Tell NVQ++ to generate glue code to set the target backend name
# CHECK-DAG: GEN_TARGET_BACKEND=true

# Add the rest-qpu library to the link list
# CHECK-DAG: LINKLIBS="${LINKLIBS} -lcudaq-rest-qpu"

# Define the lowering pipeline, here we lower to Adaptive QIR
# CHECK-DAG: PLATFORM_LOWERING_CONFIG="func.func(const-prop-complex,canonicalize,cse,lift-array-alloc),globalize-array-values,func.func(state-prep),unitary-synthesis,canonicalize,apply-op-specialization,aggressive-early-inlining,expand-measurements,unrolling-pipeline,decomposition{enable-patterns=U3ToRotations},func.func(lower-to-cfg,canonicalize,multicontrol-decomposition),quantinuum-gate-set-mapping"

# Tell the rest-qpu that we are generating QIR.
# CHECK-DAG: CODEGEN_EMISSION=qir-adaptive

# Physical backends must set library mode to false.
# CHECK-DAG: LIBRARY_MODE=false

PLATFORM_EXTRA_ARGS=""
# NB: extra arguments always take the form:
#   --<target>-<option> <value>
# as in
#   --quantinuum-machine foo
while [ $# -gt 1 ]; do
	case "$1" in
	--quantinuum-url)
		PLATFORM_EXTRA_ARGS="$PLATFORM_EXTRA_ARGS;url;$2"
		;;
	--quantinuum-machine)
		PLATFORM_EXTRA_ARGS="$PLATFORM_EXTRA_ARGS;machine;$2"
		;;
	esac
	shift 2
done

/*******************************************************************************
 * Copyright (c) 2022 - 2025 NVIDIA Corporation & Affiliates.                  *
 * All rights reserved.                                                        *
 *                                                                             *
 * This source code and the accompanying materials are made available under    *
 * the terms of the Apache License 2.0 which accompanies this distribution.    *
 ******************************************************************************/

// RUN: nvq++ %s --target=remote-mqpu -o %t && %t

#include <cudaq.h>
#include <cudaq/algorithm.h>
#include <random>

#define ASSERT_NEAR(x,y,tolerance) assert(abs(x-y) < tolerance)

int main() {
  auto kernel = []() __qpu__ {
    GEN-QALLOC: nqubits=5-10
    for (size_t i = 0; i < 10; i++) {
      GEN-SUBCIRCUIT
      if (mz(GEN:<qubit>)) {
        break;
      }

      GEN-SUBCIRCUIT
      GEN-BLOCK
    }
  };

  const auto PHASE_SWITCH = "CUDAQ_PHASE_FOLDING";

  setenv(PHASE_SWITCH, "0", true);
  cudaq::set_random_seed(1);
  auto state1 = cudaq::get_state(kernel);

  setenv(PHASE_SWITCH, "1", true);
  cudaq::set_random_seed(1);
  auto state2 = cudaq::get_state(kernel);

  assert(state1.get_num_qubits() == state2.get_num_qubits());
  auto result = state1.overlap(state2);
  printf("Real: %f, imag: %f\n", result.real(), result.imag());
  ASSERT_NEAR(result.real(), 1., 0.00001);
  ASSERT_NEAR(result.imag(), 0., 0.00001);
  return 0;
}

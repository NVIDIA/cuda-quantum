============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.2.0, pluggy-1.5.0
rootdir: /workspaces/cuda-quantum
configfile: pyproject.toml
plugins: anyio-4.9.0
collected 1 item

python/tests/mlir/exp_pauli.py .                                         [100%]

==================================== PASSES ====================================
________________________________ test_exp_pauli ________________________________
----------------------------- Captured stdout call -----------------------------
; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

%Array = type opaque
%Qubit = type opaque

@cstr.58495900 = private constant [4 x i8] c"XIY\00"

define void @__nvqpp__mlirgen__U_exp_pauli.ctrl(%Array* %0, %Array* %1) local_unnamed_addr {
  %3 = alloca [1 x { i8*, i64 }], align 8
  %4 = getelementptr inbounds [1 x { i8*, i64 }], [1 x { i8*, i64 }]* %3, i64 0, i64 0, i32 0
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @cstr.58495900, i64 0, i64 0), i8** %4, align 8
  %5 = getelementptr inbounds [1 x { i8*, i64 }], [1 x { i8*, i64 }]* %3, i64 0, i64 0, i32 1
  store i64 3, i64* %5, align 8
  %6 = bitcast [1 x { i8*, i64 }]* %3 to i8*
  call void @__quantum__qis__exp_pauli__ctl(double 2.310000e+01, %Array* %0, %Array* %1, i8* nonnull %6)
  ret void
}

define void @__nvqpp__mlirgen__U_exp_pauli(%Array* %0) local_unnamed_addr {
  %2 = alloca [1 x { i8*, i64 }], align 8
  %3 = getelementptr inbounds [1 x { i8*, i64 }], [1 x { i8*, i64 }]* %2, i64 0, i64 0, i32 0
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @cstr.58495900, i64 0, i64 0), i8** %3, align 8
  %4 = getelementptr inbounds [1 x { i8*, i64 }], [1 x { i8*, i64 }]* %2, i64 0, i64 0, i32 1
  store i64 3, i64* %4, align 8
  %5 = bitcast [1 x { i8*, i64 }]* %2 to i8*
  call void @__quantum__qis__exp_pauli(double 2.310000e+01, %Array* %0, i8* nonnull %5)
  ret void
}

define void @__nvqpp__mlirgen__kernel_ancilla_exp_pauli({ double*, i64 } %0) local_unnamed_addr {
  %2 = alloca [1 x { i8*, i64 }], align 8
  %3 = tail call %Qubit* @__quantum__rt__qubit_allocate()
  %4 = extractvalue { double*, i64 } %0, 1
  %5 = tail call %Array* @__quantum__rt__qubit_allocate_array(i64 %4)
  %6 = icmp sgt i64 %4, 0
  br i1 %6, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %1
  %7 = extractvalue { double*, i64 } %0, 0
  br label %8

8:                                                ; preds = %.lr.ph, %8
  %9 = phi i64 [ 0, %.lr.ph ], [ %14, %8 ]
  %10 = getelementptr double, double* %7, i64 %9
  %11 = load double, double* %10, align 8
  %12 = tail call %Qubit** @__quantum__rt__array_get_element_ptr_1d(%Array* %5, i64 %9)
  %13 = load %Qubit*, %Qubit** %12, align 8
  tail call void @__quantum__qis__rx(double %11, %Qubit* %13)
  %14 = add nuw nsw i64 %9, 1
  %exitcond.not = icmp eq i64 %14, %4
  br i1 %exitcond.not, label %._crit_edge, label %8

._crit_edge:                                      ; preds = %8, %1
  tail call void @__quantum__qis__h(%Qubit* %3)
  %15 = tail call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %16 = tail call %Qubit** @__quantum__rt__array_get_element_ptr_1d(%Array* %15, i64 0)
  store %Qubit* %3, %Qubit** %16, align 8
  %17 = bitcast [1 x { i8*, i64 }]* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %17)
  %18 = getelementptr inbounds [1 x { i8*, i64 }], [1 x { i8*, i64 }]* %2, i64 0, i64 0, i32 0
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @cstr.58495900, i64 0, i64 0), i8** %18, align 8
  %19 = getelementptr inbounds [1 x { i8*, i64 }], [1 x { i8*, i64 }]* %2, i64 0, i64 0, i32 1
  store i64 3, i64* %19, align 8
  call void @__quantum__qis__exp_pauli__ctl(double 2.310000e+01, %Array* %15, %Array* %5, i8* nonnull %17)
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %17)
  call void @__quantum__rt__qubit_release(%Qubit* %3)
  call void @__quantum__rt__qubit_release_array(%Array* %5)
  ret void
}

declare %Qubit* @__quantum__rt__qubit_allocate() local_unnamed_addr

declare %Array* @__quantum__rt__qubit_allocate_array(i64) local_unnamed_addr

declare void @__quantum__rt__qubit_release_array(%Array*) local_unnamed_addr

declare void @__quantum__rt__qubit_release(%Qubit*) local_unnamed_addr

declare %Array* @__quantum__rt__array_create_1d(i32, i64) local_unnamed_addr

declare %Qubit** @__quantum__rt__array_get_element_ptr_1d(%Array*, i64) local_unnamed_addr

declare void @__quantum__qis__exp_pauli__ctl(double, %Array*, %Array*, i8*) local_unnamed_addr

declare void @__quantum__qis__h(%Qubit*) local_unnamed_addr

declare void @__quantum__qis__rx(double, %Qubit*) local_unnamed_addr

declare void @__quantum__qis__exp_pauli(double, %Array*, i8*) local_unnamed_addr

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #0

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #0

attributes #0 = { nocallback nofree nosync nounwind willreturn memory(argmem: readwrite) }

!llvm.module.flags = !{!0}

!0 = !{i32 2, !"Debug Info Version", i32 3}

============================== 1 passed in 2.87s ===============================

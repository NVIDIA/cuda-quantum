on:
  workflow_call:
    inputs:
      platform:
        type: string
        required: false
        default: linux/amd64
      devdeps_image:
        required: false
        type: string
      devdeps_cache:
        required: true
        type: string
      devdeps_archive:
        required: true
        type: string
      export_environment:
        required: false
        type: boolean

name: Run CI within the dev environment container

jobs:
  build_and_test:
    name: Dev environment (Debug)
    runs-on: ${{ (contains(inputs.platform, 'arm') && 'linux-arm64-cpu8') || 'linux-amd64-cpu8' }}
    permissions:
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Restore environment
        id: restore_devdeps
        if: inputs.devdeps_image == ''
        uses: actions/cache/restore@v3
        with:
          path: ${{ inputs.devdeps_archive }}
          key: ${{ inputs.devdeps_cache }}
          fail-on-cache-miss: true

      - name: Set up context for buildx
        run: |
          docker context create builder_context

      - name: Set up buildx runner
        uses: docker/setup-buildx-action@v2
        with:
          endpoint: builder_context

      - name: Build CUDA Quantum
        id: cudaq_build
        run: |
          if ${{ steps.restore_devdeps.outcome != 'skipped' }}; then
            load_output=`docker load --input "${{ inputs.devdeps_archive }}"`
            base_image=`echo "$load_output" | grep -o 'Loaded image: \S*:\S*' | head -1 | cut -d ' ' -f 3`
          elif ${{ inputs.devdeps_image != '' }}; then
            base_image=${{ inputs.devdeps_image }}
          else
            echo "::error file=test_in_devenv.yml::Missing configuration for development dependencies. Either specify the image (i.e. provide devdeps_image) or cache (i.e. provide devdeps_cache and devdeps_archive) that should be used for the build."
            exit 1
          fi

          DOCKER_BUILDKIT=1 docker build --platform ${{ inputs.platform }} \
            -t cuda-quantum-dev:local -f docker/build/cudaq.dev.Dockerfile . \
            --build-arg base_image=$base_image \
            --build-arg install="CMAKE_BUILD_TYPE=Debug"

      - name: Test CUDA Quantum
        uses: addnab/docker-run-action@v3
        with:
          image: cuda-quantum-dev:local
          shell: bash
          run: |
            cd $CUDAQ_REPO_ROOT
            python3 -m pip install iqm-client
            ctest --output-on-failure --test-dir build -E ctest-nvqpp
            ctest_status=$?
            /opt/llvm/bin/llvm-lit -v --param nvqpp_site_config=build/test/lit.site.cfg.py build/test
            lit_status=$?
            if [ ! $ctest_status -eq 0 ] || [ ! $lit_status -eq 0 ]; then
              echo "::error file=test_in_devenv.yml::C++ tests failed (ctest status $ctest_status, llvm-lit status $lit_status)."
              exit 1
            fi

      - name: Save environment
        id: env_save
        if: inputs.export_environment
        run: |
          output_directory=/tmp
          platform_id=`echo ${{ inputs.platform }} | sed 's/linux\///g' | tr -d ' '`
          filename=${platform_id}_debug_build

          docker run --name cuda-quantum-dev cuda-quantum-dev:local
          docker export cuda-quantum-dev > $output_directory/$filename.tar
          docker rm -f cuda-quantum-dev
    
          echo "filename=$filename" >> $GITHUB_OUTPUT
          echo "output_directory=$output_directory" >> $GITHUB_OUTPUT

      - name: Upload environment
        uses: actions/upload-artifact@v3
        if: inputs.export_environment
        with:
          name: ${{ steps.env_save.outputs.filename }}
          path: ${{ steps.env_save.outputs.output_directory }}/${{ steps.env_save.outputs.filename }}.tar
          retention-days: 1

  build_and_test_python:
    name: Dev environment (Python)
    runs-on: ${{ (contains(inputs.platform, 'arm') && 'linux-arm64-cpu8') || 'linux-amd64-cpu8' }}
    permissions:
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Restore environment
        id: restore_devdeps
        if: inputs.devdeps_image == ''
        uses: actions/cache/restore@v3
        with:
          path: ${{ inputs.devdeps_archive }}
          key: ${{ inputs.devdeps_cache }}
          fail-on-cache-miss: true

      - name: Set up context for buildx
        run: |
          docker context create builder_context

      - name: Set up buildx runner
        uses: docker/setup-buildx-action@v2
        with:
          endpoint: builder_context

      - name: Set up dev environment
        id: dev_env
        run: |
          if ${{ steps.restore_devdeps.outcome != 'skipped' }}; then
            load_output=`docker load --input "${{ inputs.devdeps_archive }}"`
            base_image=`echo "$load_output" | grep -o 'Loaded image: \S*:\S*' | head -1 | cut -d ' ' -f 3`
          elif ${{ inputs.devdeps_image != '' }}; then
            base_image=${{ inputs.devdeps_image }}
          else
            echo "::error file=test_in_devenv.yml::Missing configuration for development dependencies. Either specify the image (i.e. provide devdeps_image) or cache (i.e. provide devdeps_cache and devdeps_archive) that should be used for the build."
            exit 1
          fi

          DOCKER_BUILDKIT=1 docker build --platform ${{ inputs.platform }} \
            -t dev_env:local -f docker/build/cudaq.dev.Dockerfile . \
            --build-arg base_image=$base_image 

      - name: Build and test CUDA Quantum (Python)
        uses: addnab/docker-run-action@v3
        with:
          image: dev_env:local
          shell: bash
          run: |
            cd $CUDAQ_REPO_ROOT
            pip install iqm_client --user -vvv
            pip install . --user -vvv
            python3 -m pytest -v python/tests/ \
              --ignore python/tests/backends
            pytest_status=$?
            if [ ! $pytest_status -eq 0 ]; then
              echo "::error file=test_in_devenv.yml::Python tests failed with status $pytest_status."
              exit 1
            fi

            for backendTest in python/tests/backends/*.py; do
              python3 -m pytest -v $backendTest
              pytest_status=$?

              # Exit code 5 indicates that no tests were collected,
              # i.e. all tests in this file were skipped.
              if [ ! $pytest_status -eq 0 ] && [ ! $pytest_status -eq 5 ]; then
                echo "::error file=test_in_devenv.yml::Python $backendTest tests failed with status $pytest_status."
                exit 1
              fi 
            done 
            
      - name: Save environment
        id: env_save
        if: inputs.export_environment
        run: |
          output_directory=/tmp
          platform_id=`echo ${{ inputs.platform }} | sed 's/linux\///g' | tr -d ' '`
          filename=${platform_id}_python_build

          docker run --name dev_env dev_env:local
          docker export dev_env > $output_directory/$filename.tar
          docker rm -f dev_env
    
          echo "filename=$filename" >> $GITHUB_OUTPUT
          echo "output_directory=$output_directory" >> $GITHUB_OUTPUT

      - name: Upload environment
        uses: actions/upload-artifact@v3
        if: inputs.export_environment
        with:
          name: ${{ steps.env_save.outputs.filename }}
          path: ${{ steps.env_save.outputs.output_directory }}/${{ steps.env_save.outputs.filename }}.tar
          retention-days: 1

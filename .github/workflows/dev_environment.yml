on:
  workflow_call:
    inputs:
      toolchain:
        required: true
        type: string
      cache_location:
        required: false
        type: string
      build_cuda_quantum:
        required: false
        type: boolean
      test_cuda_quantum:
        required: false
        type: boolean
      container_registry:
        required: false
        type: string
      export_environment:
        required: false
        type: boolean

name: CUDA Quantum dev environment

jobs:
  devdeps:
    name: Dev environment
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up buildx runner
        uses: docker/setup-buildx-action@v2

      - name: Determine build arguments
        id: build_info
        run: |
          echo "llvm_commit=$(git rev-parse @:./tpls/llvm)" >> $GITHUB_OUTPUT
          echo "cache_base=${{ github.event.pull_request.base.ref || 'main' }}" >> $GITHUB_OUTPUT
          echo "cache_target=${{ inputs.cache_location || github.ref_name  }}" >> $GITHUB_OUTPUT
          echo "full_image_name=${{ inputs.container_registry || 'ghcr.io' }}/nvidia/cuda-quantum-devdeps" >> $GITHUB_OUTPUT

      - name: Extract metadata for Docker image
        id: metadata
        uses: docker/metadata-action@v4
        with:
          images: ${{ steps.build_info.outputs.full_image_name  }}
          flavor: |
            latest=false
            prefix=${{ inputs.toolchain }}-,onlatest=true
          tags: |
            # workflow dispatch is covered by these
            type=schedule,enable=true,pattern=nightly
            type=ref,enable=true,event=branch
            type=ref,enable=true,prefix=${{ inputs.toolchain }}-pr-,event=pr
            type=ref,enable=true,event=tag
          labels: |
            org.opencontainers.image.title=cuda-quantum-devdeps
            org.opencontainers.image.description=Development dependencies for building and testing CUDA Quantum

      - name: Log in to the container registry
        uses: docker/login-action@v2
        if: inputs.container_registry != ''
        with:
          registry: ${{ inputs.container_registry }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build dev environment image and push if requested
        id: build_devdeps
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./docker/build/devdeps.Dockerfile
          build-args: |
            llvm_commit=${{ steps.build_info.outputs.llvm_commit }}
            toolchain=${{ inputs.toolchain }}
          push: ${{ inputs.container_registry != '' }}
          load: ${{ inputs.build_cuda_quantum || inputs.test_cuda_quantum || inputs.export_environment }}
          tags: ${{ steps.metadata.outputs.tags }}
          labels: ${{ steps.metadata.outputs.labels }}
          platforms: linux/amd64
          cache-from: |
            type=gha,scope=${{ steps.build_info.outputs.cache_target }}-cuda-quantum-devdeps-${{ inputs.toolchain }}
            type=gha,scope=${{ steps.build_info.outputs.cache_base }}-cuda-quantum-devdeps-${{ inputs.toolchain }}
            type=registry,ref=${{ steps.build_info.outputs.full_image_name  }}:${{ inputs.toolchain }}-${{ steps.build_info.outputs.cache_base }}
          cache-to: |
            type=gha,mode=max,scope=${{ steps.build_info.outputs.cache_target }}-cuda-quantum-devdeps-${{ inputs.toolchain }}

      - name: Create dev environment container
        if: inputs.build_cuda_quantum || inputs.test_cuda_quantum
        run: |
          images=`echo '${{ steps.build_devdeps.outputs.metadata }}' | jq '."image.name"' | tr -d '"'`
          while IFS=',' read -ra created; do
            container_built=false
            for image in "${created[@]}"; do
              tag=`echo $image | cut -d ":" -f 2`
              docker build -t cuda-quantum-devdeps -f .devcontainer/Dockerfile . \
                --build-arg tag=$tag --build-arg workspace=. --build-arg destination=workspaces/cuda-quantum \
                || container_built=true
              if $container_built
              then break
              fi
            done
          done <<< "$images"

      - name: Build CUDA Quantum
        if: inputs.build_cuda_quantum || inputs.test_cuda_quantum
        run: |
          docker run --rm -dit --name cuda-quantum cuda-quantum-devdeps
          docker exec --workdir /workspaces/cuda-quantum cuda-quantum bash scripts/build_cudaq.sh -v
          docker commit cuda-quantum nvidia/cuda-quantum-dev:${{ inputs.toolchain }}-latest
          docker stop cuda-quantum

      - name: Test CUDA Quantum
        if: inputs.test_cuda_quantum
        uses: addnab/docker-run-action@v3
        with:
            image: nvidia/cuda-quantum-dev:${{ inputs.toolchain }}-latest
            shell: bash
            run: |
                cd /workspaces/cuda-quantum
                ctest --output-on-failure --test-dir build -E ctest-nvqpp
                /opt/llvm/bin/llvm-lit -v --param nvqpp_site_config=build/test/lit.site.cfg.py build/test

      - name: Save the build/test environment
        if: inputs.export_environment
        run: |
          if ${{ ! inputs.build_cuda_quantum && ! inputs.test_cuda_quantum }}; then
            docker tag ${{ steps.build_devdeps.outputs.imageid }} nvidia/cuda-quantum-dev:${{ inputs.toolchain }}-latest
          fi
          docker run --rm --name cuda-quantum-dev nvidia/cuda-quantum-dev:${{ inputs.toolchain }}-latest
          docker export cuda-quantum-dev > /tmp/${{ inputs.toolchain }}_build.tar

      - name: Upload testing environment as artifact
        uses: actions/upload-artifact@v3
        if: inputs.export_environment
        with:
          name: ${{ inputs.toolchain }}-build
          path: /tmp/${{ inputs.toolchain }}_build.tar
          retention-days: 1
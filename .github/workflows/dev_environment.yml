on:
  workflow_call:
    inputs:
      dockerfile:
        required: true
        type: string
      base_image:
        required: false
        type: string
      toolchain:
        required: false
        type: string
      cache_location:
        required: false
        type: string
      matrix_key:
        required: false
        type: string
      environment:
        required: false
        type: string
    outputs:
      image_name:
        description: "The full name of the built docker image."
        value: ${{ jobs.finalize.outputs.image_name }}
      digest:
        description: "The digest of the docker image, if it was deployed to the registry."
        value: ${{ jobs.finalize.outputs.digest }}
      cache_key:
        description: "The cache key to retrieve a tar archive containing the built image(s)."
        value: ${{ jobs.finalize.outputs.tar_cache }}

name: CUDA Quantum cached dev images

jobs:
  metadata:
    name: Metadata
    runs-on: ubuntu-latest
    permissions:
      contents: read

    outputs:
      dockerfile: ${{ steps.build_info.outputs.dockerfile }}
      image_name: ${{ steps.build_info.outputs.image_name }}
      image_title: ${{ steps.build_info.outputs.image_title }}
      image_id: ${{ steps.build_info.outputs.image_id }}
      image_tags: ${{ steps.metadata.outputs.tags }}
      image_labels: ${{ steps.metadata.outputs.labels }}
      llvm_commit: ${{ steps.build_info.outputs.llvm_commit }}
      cache_target: ${{ steps.build_info.outputs.cache_target }}
      cache_base: ${{ steps.build_info.outputs.cache_base }}
      cache_id: ${{ steps.build_info.outputs.cache_id }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Determine build arguments
        id: build_info
        run: |
          repo_owner=${{ github.repository_owner }}
          image_id=`basename ${{ inputs.dockerfile }} .Dockerfile`
          image_title=cuda-quantum-`echo $image_id | cut -d "." -f 1`
          image_name=${{ vars.registry || 'ghcr.io' }}/${repo_owner,,}/$image_title
          toolchain=${{ inputs.toolchain }}
          tag_prefix=${toolchain:+$toolchain-}
          tag_suffix=`echo $image_id | cut -s -d "." -f 2- | xargs -I "%" echo .% | tr . -`

          echo "image_name=$image_name" >> $GITHUB_OUTPUT
          echo "image_title=$image_title" >> $GITHUB_OUTPUT
          echo "image_id=$image_id" >> $GITHUB_OUTPUT
          echo "tag_prefix=$tag_prefix" >> $GITHUB_OUTPUT
          echo "tag_suffix=$tag_suffix" >> $GITHUB_OUTPUT
          echo "dockerfile=${{ inputs.dockerfile }}" >> $GITHUB_OUTPUT
          echo "llvm_commit=$(git rev-parse @:./tpls/llvm)" >> $GITHUB_OUTPUT
          echo "cache_base=${{ github.event.pull_request.base.ref || 'main' }}" >> $GITHUB_OUTPUT
          echo "cache_target=${{ inputs.cache_location || github.ref_name }}" >> $GITHUB_OUTPUT
          echo "cache_id=$(echo $image_id | tr . -)${toolchain:+-$toolchain}" >> $GITHUB_OUTPUT

      - name: Extract metadata for Docker image
        id: metadata
        uses: docker/metadata-action@v4
        with:
          images: ${{ steps.build_info.outputs.image_name }}
          flavor: |
            latest=false
            prefix=${{ steps.build_info.outputs.tag_prefix }},onlatest=true
            suffix=${{ steps.build_info.outputs.tag_suffix }},onlatest=true
          tags: |
            # workflow dispatch is covered by these
            type=schedule,enable=true,pattern=nightly
            type=ref,enable=true,event=branch
            type=ref,enable=true,prefix=${{ steps.build_info.outputs.tag_prefix }}pr-,event=pr
            type=ref,enable=true,event=tag
          labels: |
            org.opencontainers.image.title=${{ steps.build_info.outputs.image_title }}
            org.opencontainers.image.description=Dev tools for building and testing CUDA Quantum

  build:
    name: Caching
    runs-on: ubuntu-latest
    needs: metadata
    timeout-minutes: 600
    permissions:
      contents: read

    outputs:
      tar_cache: ${{ steps.cache.outputs.tar_cache }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up buildx runner
        uses: docker/setup-buildx-action@v2

      - name: Build ${{ needs.metadata.outputs.image_title }} image
        id: build_image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./docker/${{ needs.metadata.outputs.dockerfile }}
          build-args: |
            base_image=${{ inputs.base_image }}
            toolchain=${{ inputs.toolchain }}
            llvm_commit=${{ needs.metadata.outputs.llvm_commit }}
          load: false
          tags: ${{ needs.metadata.outputs.image_tags }}
          labels: ${{ needs.metadata.outputs.image_labels }}
          platforms: linux/amd64
          cache-from: |
            type=gha,scope=${{ needs.metadata.outputs.cache_target }}-cuda-quantum-${{ needs.metadata.outputs.cache_id }}
            type=gha,scope=${{ needs.metadata.outputs.cache_base }}-cuda-quantum-${{ needs.metadata.outputs.cache_id }}
            type=registry,ref=${{ needs.metadata.outputs.image_name }}:${{ steps.build_info.outputs.tag_prefix }}${{ needs.metadata.outputs.cache_base }}${{ steps.build_info.outputs.tag_suffix }}
          cache-to: |
            type=gha,mode=max,scope=${{ needs.metadata.outputs.cache_target }}-cuda-quantum-${{ needs.metadata.outputs.cache_id }}
          outputs: type=docker,dest=/tmp/${{ needs.metadata.outputs.image_id }}.tar

      - name: Create cache location
        id: cache
        run: |
          echo "tar_cache=tar-${{ needs.metadata.outputs.cache_id }}-${{ github.sha }}" >> $GITHUB_OUTPUT

      - name: Cache ${{ needs.metadata.outputs.image_title }} image
        uses: actions/cache/save@v3
        with:
          path: /tmp/${{ needs.metadata.outputs.image_id }}.tar
          key: ${{ steps.cache.outputs.tar_cache }}

  deployment:
    name: Deployment
    if: inputs.environment
    runs-on: ubuntu-latest
    needs: [metadata, build]
    permissions: write-all

    outputs:
      digest: ${{ steps.push_image.outputs.digest }}

    environment:
      name: ${{ inputs.environment }}
      url: ${{ vars.deployment_url }}

    steps:
      - name: Load tar cache
        uses: actions/cache/restore@v3
        with:
          path: /tmp/${{ needs.metadata.outputs.image_id }}.tar
          key: ${{ needs.build.outputs.tar_cache }}
          fail-on-cache-miss: true

      - name: Log in to the container registry
        uses: docker/login-action@v2
        if: vars.registry != ''
        with:
          registry: ${{ vars.registry }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push ${{ needs.metadata.outputs.image_title }} image
        id: push_image
        run: |
          # Note that this may change the digest compared to the digest produced during build
          # (the saved docker format has its own manifest that doesn't necessarily have the same bit-by-bit format...)
          docker load --input /tmp/${{ needs.metadata.outputs.image_id }}.tar
          docker push ${{ needs.metadata.outputs.image_name }} --all-tags
          digests=`docker images ${{ needs.metadata.outputs.image_name }} --digests --format '{{.Digest}}'`
          echo "digest=$digests" >> $GITHUB_OUTPUT

      - name: Clean up
        run: |
          gh extension install actions/gh-actions-cache
          echo "Deleting cache $key"
          gh actions-cache delete ${{ needs.build.outputs.tar_cache }} -R ${{ github.repository }} --confirm
        env:
          GH_TOKEN: ${{ github.token }}

  finalize:
    name: Finalize
    runs-on: ubuntu-latest
    if: ${{ always() }}
    needs: [metadata, build, deployment]

    outputs:
      image_name: ${{ fromJson(steps.write_json.outputs.result).image_name }}
      digest: ${{ fromJson(steps.write_json.outputs.result).digest }}
      cache_key: ${{ fromJson(steps.write_json.outputs.result).cache_key }}

    steps:        
      - uses: cloudposse/github-action-matrix-outputs-write@0.3.0
        id: write_json
        with:
          matrix-step-name: ${{ inputs.matrix_key && 'dev_environment' }}
          matrix-key: ${{ inputs.matrix_key }}
          outputs: |
            image_name: ${{ needs.metadata.outputs.image_name }}
            digest: ${{ needs.deployment.outputs.digest }}
            cache_key: ${{ needs.build.outputs.tar_cache }}

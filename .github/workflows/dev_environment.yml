on:
  workflow_call:
    inputs:
      toolchain:
        required: true
        type: string
      cache_location:
        required: false
        type: string
      environment:
        required: false
        type: string

name: CUDA Quantum dev environment

jobs:
  metadata:
    name: Metadata
    runs-on: ubuntu-latest
    permissions:
      contents: read

    outputs:
      image_name: ${{ steps.build_info.outputs.image_name }}
      image_tags: ${{ steps.metadata.outputs.tags }}
      image_labels: ${{ steps.metadata.outputs.labels }}
      llvm_commit: ${{ steps.build_info.outputs.llvm_commit }}
      cache_target: ${{ steps.build_info.outputs.cache_target }}
      cache_base: ${{ steps.build_info.outputs.cache_base }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Determine build arguments
        id: build_info
        run: |
          echo "llvm_commit=$(git rev-parse @:./tpls/llvm)" >> $GITHUB_OUTPUT
          echo "cache_base=${{ github.event.pull_request.base.ref || 'main' }}" >> $GITHUB_OUTPUT
          echo "cache_target=${{ inputs.cache_location || github.ref_name  }}" >> $GITHUB_OUTPUT
          echo "image_name=${{ vars.registry || 'ghcr.io' }}/nvidia/cuda-quantum-devdeps" >> $GITHUB_OUTPUT

      - name: Extract metadata for Docker image
        id: metadata
        uses: docker/metadata-action@v4
        with:
          images: ${{ steps.build_info.outputs.image_name  }}
          flavor: |
            latest=false
            prefix=${{ inputs.toolchain }}-,onlatest=true
          tags: |
            # workflow dispatch is covered by these
            type=schedule,enable=true,pattern=nightly
            type=ref,enable=true,event=branch
            type=ref,enable=true,prefix=${{ inputs.toolchain }}-pr-,event=pr
            type=ref,enable=true,event=tag
          labels: |
            org.opencontainers.image.title=cuda-quantum-devdeps
            org.opencontainers.image.description=Development dependencies for building and testing CUDA Quantum

  devdeps:
    name: Dev environment
    runs-on: ubuntu-latest
    needs: metadata
    permissions:
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up buildx runner
        uses: docker/setup-buildx-action@v2

      - name: Build cuda-quantum-devdeps image
        id: build_devdeps
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./docker/build/devdeps.Dockerfile
          build-args: |
            llvm_commit=${{ needs.metadata.outputs.llvm_commit }}
            toolchain=${{ inputs.toolchain }}
          load: false
          tags: ${{ needs.metadata.outputs.image_tags }}
          labels: ${{ needs.metadata.outputs.image_labels }}
          platforms: linux/amd64
          cache-from: |
            type=gha,scope=${{ needs.metadata.outputs.cache_target }}-cuda-quantum-devdeps-${{ inputs.toolchain }}
            type=gha,scope=${{ needs.metadata.outputs.cache_base }}-cuda-quantum-devdeps-${{ inputs.toolchain }}
            type=registry,ref=${{ needs.metadata.outputs.image_name }}:${{ inputs.toolchain }}-${{ needs.metadata.outputs.cache_base }}
          cache-to: |
            type=gha,mode=max,scope=${{ needs.metadata.outputs.cache_target }}-cuda-quantum-devdeps-${{ inputs.toolchain }}
          outputs: type=docker,dest=/tmp/devdeps.tar

      - name: Cache cuda-quantum-devdeps image
        uses: actions/cache/save@v3
        with:
          path: /tmp/devdeps.tar
          key: tar-devdeps-${{ inputs.toolchain }}-${{ github.sha }}

  deployment:
    name: Deploy cuda-quantum-devdeps image
    if: inputs.environment
    runs-on: ubuntu-latest
    needs: [metadata, devdeps]

    permissions:
      contents: read
      packages: write

    environment:
      name: ${{ inputs.environment }}
      url: ${{ vars.deployment_url }}

    steps:
      - name: Load tar cache
        uses: actions/cache/restore@v3
        with:
          path: /tmp/devdeps.tar
          key: tar-devdeps-${{ inputs.toolchain }}-${{ github.sha }}
          fail-on-cache-miss: true

      - name: Log in to the container registry
        uses: docker/login-action@v2
        if: vars.registry != ''
        with:
          registry: ${{ vars.registry }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push images
        run: |
          docker load --input /tmp/devdeps.tar
          docker push ${{ needs.metadata.outputs.image_name }} --all-tags
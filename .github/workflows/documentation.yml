on:
  workflow_dispatch:
    inputs:
      artifacts_url:
        required: true
        type: string
        description: 'The url to the artifacts that contain the docs to publish.'
      artifact_name:
        required: false
        type: string
        default: cuda_quantum_docs
        description: 'The name of the artifact that contain the docs to publish.'
      version:
        required: true
        type: string
        description: 'The version that the documentation corresponds to, e.g. 0.3.1 or latest.'
  workflow_run:
    workflows:
      - Deployments
      - CI
    types:
      - completed

name: Documentation

concurrency:
    group: ${{ github.workflow }}${{ github.event.workflow_run.name }} # only one docs publishing can be run at a time, since all docs are published to the same location!
    cancel-in-progress: false

jobs:
  publish_docs:
    name: Publish documentation
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' || github.event.workflow_run.event == 'pull_request' || github.event.workflow_run.conclusion == 'success'

    permissions:
      contents: write

    environment:
      name: ${{ (github.event.workflow_run.event == 'pull_request' && 'default') || 'github-pages' }}
      url: ${{ vars.deployment_url || format('https://github.com/{0}', github.repository) }}
  
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ref: ${{ (github.event.workflow_run.event == 'pull_request' && vars.preview_branch) || vars.live_branch }}
          token: ${{ (github.event.workflow_run.event == 'pull_request' && github.token) || secrets.REPO_BOT_ACCESS_TOKEN }}

      - name: Download artifacts
        id: artifacts
        run: |
          artifacts_url=${{ (github.event_name == 'workflow_dispatch' && inputs.artifacts_url) || github.event.workflow_run.artifacts_url }}
          artifacts=$(gh api $artifacts_url -q '.artifacts[] | {name: .name, url: .archive_download_url}')
          artifact_name=${{ (github.event_name == 'workflow_dispatch' && inputs.artifact_name) || 'cuda_quantum_docs' }}

          status=${{ (github.event.workflow_run.event == 'pull_request' && 0) || 1 }}
          for artifact in `echo "$artifacts"`; do
            name=`echo $artifact | jq -r '.name'`
            if [ "$name" == "$artifact_name" ]; then
              url=`echo $artifact | jq -r '.url'`
              gh api $url > cuda_quantum_docs.zip
              unzip -d "/tmp/docs" cuda_quantum_docs.zip
              rm -rf cuda_quantum_docs.zip
              status=0 && echo "docs=/tmp/docs" >> $GITHUB_OUTPUT
            elif [ "$name" == "metadata_ci" ]; then
              url=`echo $artifact | jq -r '.url'`
              gh api $url > metadata.zip
              unzip -d metadata metadata.zip
              for file in `find metadata/ -type f`; do
                cat "$file" >> metadata.txt
              done
              rm -rf metadata metadata.zip
            fi
          done

          if [ -f metadata.txt ]; then
            pr_number=`cat metadata.txt | grep -o 'pr-number: \S*' | cut -d ' ' -f 2`
            rm metadata.txt && echo "pr_number=$pr_number" >> $GITHUB_OUTPUT
          fi

          if ${{ github.event_name == 'workflow_dispatch' }}; then
            target_folder=${{ inputs.version }}
          elif ${{ github.event.workflow_run.event == 'pull_request' }}; then
            target_folder=${pr_number:+pr-$pr_number}
          elif ${{ github.event.workflow_run.head_branch == 'main' }}; then
            target_folder=latest
          else
            head_branch=${{ github.event.workflow_run.head_branch }}
            version=`echo ${head_branch#releases/} | egrep -o "^v?([0-9]{1,}\.)+[0-9]{1,}$"`
            target_folder=${version#v}
          fi

          echo "target_folder=$target_folder" >> $GITHUB_OUTPUT
          exit $status
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Push docs update
        id: push_docs
        if: steps.artifacts.outputs.docs != '' && steps.artifacts.outputs.target_folder != ''
        run: |
          target_folder="${{ steps.artifacts.outputs.target_folder }}"
          rm -rf "$target_folder" && mkdir -p "$target_folder"
          mv "${{ steps.artifacts.outputs.docs }}"/* "$target_folder"

          git config --global user.name "cuda-quantum-bot"
          git config --global user.email "cuda-quantum-bot@users.noreply.github.com"

          if [ -f create_redirects.sh ]; then
            bash create_redirects.sh >> $GITHUB_STEP_SUMMARY
          fi
          git add "$target_folder"

          if ${{ github.event_name == 'workflow_dispatch' }}; then
            git commit -m "Docs update triggered manually for version ${{ inputs.version }} (artifacts url: ${{ inputs.artifacts_url }}, artifact name: ${{ inputs.artifact_name }})."
            docs_changed=true
          else
            (git diff --cached --exit-code > /dev/null) && docs_changed=true || docs_changed=false
            git commit --allow-empty -m "Docs update triggered by deployment on head branch ${{ github.event.workflow_run.head_branch }}, commit ${{ github.event.workflow_run.head_sha }}."
          fi
          git pull --no-edit && git push

          pr_comment='**CUDA Quantum Docs Bot:** '
          if $docs_changed; then
            pr_comment+='A preview of the documentation can be found [here](https://htmlpreview.github.io/?https://github.com/${{ github.repository }}/blob/${{ vars.preview_branch }}/${target_folder}/index.html)'
          else
            pr_comment+='This PR contains no documentation changes.'
          fi
          echo "pr_comment=$pr_comment" >> $GITHUB_OUTPUT

      - name: Find existing PR comment
        id: comment
        if: false
        # Todo: replace the condition above with
        # steps.artifacts.outputs.pr_number != ''
        uses: peter-evans/find-comment@v2
        with:
          issue-number: ${{ steps.artifacts.outputs.pr_number }}
          body-includes: '**CUDA Quantum Docs Bot:**'

      - name: Comment on PR
        if: steps.artifacts.outputs.pr_number != '' && steps.push_docs.outcome != 'skipped'
        uses: peter-evans/create-or-update-comment@v3
        with:
          comment-id: ${{ steps.comment.outputs.comment-id }}
          issue-number: ${{ steps.artifacts.outputs.pr_number }}
          body: ${{ steps.push_docs.outputs.pr_comment }}
          edit-mode: replace

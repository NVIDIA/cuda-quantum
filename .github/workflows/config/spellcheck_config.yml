spellchecker: aspell
matrix:

- name: markdown
  sources:
  - '**/*.md'
  expect_match: false
  aspell:
    lang: en
    d: en_US
  dictionary:
    wordlists:
    - .github/workflows/config/spelling_allowlist.txt
  pipeline:
  - pyspelling.filters.markdown:
      markdown_extensions:
      - pymdownx.superfences:
          disable_indented_code_blocks: true
  - pyspelling.filters.html:
      comments: false
      attributes:
      - title
      - alt
      ignores:
      - ':matches(code, pre)'
      - 'code'
      - 'pre'
  - pyspelling.filters.context:
      context_visible_first: true
      delimiters:
      # Ignore word prefixes, e.g. "pre-" in pre-computed
      - open: '(^|\s)[A-Z]?[a-z]+-'
        close: '(?=.)'
      # Ignore apostrophy-s endings of words (e.g. NVIDIA's)
      - open: '(?=\S)'
        close: '($|(?=[^a-z]))'
        content: '\u0027s'
      # Ignore paths of files (recognized by them having a file extension)
      - open: '([A-Za-z_\\\/]+\.)+'
        close: '($|(?=[^a-z]))'
        content: '\S+?'
      # Ignore email addresses
      - open: '\b[A-Za-z0-9._%+-]+@'
        close: '[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b'

- name: rst
  sources:
  - '**/*.rst|!docs/sphinx/_templates/**/*.rst'
  glob_flags: N|G|B
  expect_match: false
  aspell:
    lang: en
    d: en_US
  dictionary:
    wordlists:
    - .github/workflows/config/spelling_allowlist.txt
  pipeline:
  - pyspelling.filters.markdown:
      markdown_extensions:
      - markdown.extensions.extra:
  - pyspelling.filters.html:
      comments: false
      attributes:
      - title
      - alt
      ignores:
      - ':matches(code, pre)'
      - 'code'
      - 'pre'
  - pyspelling.filters.context:
      context_visible_first: true
      delimiters:
      # Ignore multiline content fenced by .. spellcheck-disable and .. spellcheck-enable
      - open: '(?s):spellcheck-disable:'
        close: ':spellcheck-enable:'
      # Ignore lines that start with two dots
      - open: '^\s*\.\.'
        close: '$'
      # Ignore words after colon deliminated configurations
      - open: ' {3}:[A-Za-z_-]+:'
        close: '$'
      # Ignore words between two colons, e.g. :maxdepth:
      - open: '(^|\s):'
        close: ':(\s|$)'
        content: '[A-Za-z_-]*?'
      # Ignore apostrophy-s endings of words (e.g. NVIDIA's)
      - open: '(?=\S)'
        close: '($|(?=[^a-z]))'
        content: '\u0027s'
      # Ignore word prefixes, e.g. "pre-" in pre-computed
      - open: '(^|\s)[A-Z]?[a-z]+-'
        close: '(?=.)'
      # Ignore position denotations, e.g. "0th", "1st"
      - open: '(^|\s)[0-9]+(st|nd|rd|th)'
        close: '(?=.)'

- name: html
  sources:
  - '**/*.html'
  expect_match: true
  aspell:
    lang: en
    d: en_US
  dictionary:
    wordlists:
    - .github/workflows/config/spelling_allowlist.txt
  pipeline:
  - pyspelling.filters.html:
      comments: false
      attributes: []
      ignores:
      - nav
      - code
      - pre
  - pyspelling.filters.context:
      context_visible_first: true
      delimiters:
      # Ignore word prefixes, e.g. "pre-" in pre-computed
      - open: '(^|\s)[A-Z]?[a-z]+-'
        close: '(?=.)'

- name: cxx_headers
  sources:
  - '**/*.h'
  expect_match: false
  aspell:
    lang: en
    d: en_US
  dictionary:
    wordlists:
    - .github/workflows/config/spelling_allowlist.txt
    - .github/workflows/config/spelling_allowlist_cxx.txt
  pipeline:
  - pyspelling.filters.url:
  - pyspelling.filters.context:
      context_visible_first: true
      escapes: '\\[\\`~]'
      delimiters:
      # Ignore comments of the form `// namespace ...` since they are used to annotate the closing namespace
      - open: '\/{2}\s*namespace\s+'
        close: '($|\s)'
      # Ignore comments of the form `/*...*/` since they are used to annotate argument names
      - open: '\/\*'
        close: '\*\/'
        content: '\S*?'
      # Ignore end of line comments
      - open: '(^|\s)\/\/\s'
        close: '$'
  - pyspelling.filters.cpp:
      block_comments: true
      line_comments: true
      group_comments: true
      strings: false
  - pyspelling.filters.context:
      context_visible_first: true
      escapes: '\\[\\`~]'
      delimiters:
      # Ignore multiline content between three or more backticks
      - open: '(?s)(?P<open>\s*`{3,})\S*\s*$'
        close: '(?P=open)$'
      # Ignore multiline content fenced by \code ... \endcode
      - open: '(?s)\\code'
        close: '\\endcode$'
      # Ignore content between inline backticks
      - open: '(?P<open>`+)'
        close: '(?P=open)'
      # Ignore paths of files (recognized by them having a file extension)
      - open: '([A-Za-z_\\\/]+\.)+'
        close: '($|(?=[^a-z]))'
        content: '\S+?'
      # Ignore the doxygen \param command and the code artifact after it.
      - open: '[\\@]param(\s+\[\w+\])?(?:\s+\S)?'
        close: '(\s|$)'
      # Ignore the first word after \command or @command, which is a code artifact
      - open: '[\\@]([acep])(?:\s+\S)?'
        close: '(\s|$)'
      # Ignore words that start with a \ or @, e.g. @param used in doc comments
      - open: '[\\@](\w|[\\@&\$#<>%"\.=|]|::|--|---)'
        close: '(\s|$)'
      # Ignore words before and after double colons
      - open: '([a-zA-Z0-9_])*::'
        close: '([^a-zA-Z0-9_:]|$)'
      # Ignore words that contain any underscores, numbers, or uppercase letters
      - open: '[a-zA-Z0-9]+([A-Z0-9_])'
        close: '([^a-zA-Z0-9_]|$)'
      # Ignore words that start with uppercase letters or an underscore
      - open: '(^|\s)([A-Z]|_)'
        close: '($|\s|-)'
      # Ignore word prefixes, e.g. "pre-" in pre-computed
      - open: '(^|\s)[A-Z]?[a-z]+-'
        close: '(?=.)'

- name: cxx_examples
  sources:
  - 'docs/sphinx/examples/**/*.cpp'
  - 'docs/sphinx/applications/cpp/*.cpp'
  - 'docs/sphinx/targets/cpp/*.cpp'
  expect_match: false
  aspell:
    lang: en
    d: en_US
  dictionary:
    wordlists:
    - .github/workflows/config/spelling_allowlist.txt
  pipeline:
  - pyspelling.filters.url:
  - pyspelling.filters.context:
      context_visible_first: true
      escapes: '\\[\\`~]'
      delimiters:
      # Ignore comments of the form `// namespace ...` since they are used to annotate the closing namespace
      - open: '\/{2}\s*namespace\s+'
        close: '($|\s)'
      # Ignore comments of the form `/*...*/` since they are used to annotate argument names
      - open: '\/\*'
        close: '\*\/'
        content: '\S*?'
  - pyspelling.filters.cpp:
      block_comments: true
      line_comments: true
      group_comments: true
      strings: false
  - pyspelling.filters.context:
      context_visible_first: true
      escapes: '\\[\\`~]'
      delimiters:
      # Ignore multiline content between three or more backticks
      - open: '(?s)(?P<open>\s*`{3,})\S*\s*$'
        close: '(?P=open)$'
      # Ignore content between inline backticks
      - open: '(?P<open>`+)'
        close: '(?P=open)'
      # Ignore words that start with an @, e.g. @param used in doc comments
      - open: '@\S'
        close: '(\s|$)'
      # Ignore word prefixes, e.g. "pre-" in pre-computed
      - open: '(^|\s)[A-Z]?[a-z]+-'
        close: '(?=.)'

- name: python
  sources:
  - '**/*.py'
  expect_match: false
  aspell:
    lang: en
    d: en_US
  dictionary:
    wordlists:
    - .github/workflows/config/spelling_allowlist.txt
  pipeline:
  - pyspelling.filters.url:
  - pyspelling.filters.python:
      docstrings: true
      comments: true
      strings: false
      group_comments: true
  - pyspelling.filters.context:
      context_visible_first: true
      delimiters:
      # Ignore lowercase words between two colons, e.g. :func:
      - open: ':'
        close: ':'
        content: '[a-z]+?'
      # Ignore multiline content between three or more backticks
      - open: '(?s)(?P<open>\s*`{3,})\S*\s*$'
        close: '(?P=open)$'
      # Ignore content between inline backticks
      - open: '(?P<open>`+)'
        close: '(?P=open)'
      # Ignore words that start with uppercase letters or an underscore
      - open: '(^|\s)([A-Z]|_)'
        close: '($|\s|-)'
      # Ignore word prefixes, e.g. "pre-" in pre-computed
      - open: '(^|\s)[A-Z]?[a-z]+-'
        close: '(?=.)'

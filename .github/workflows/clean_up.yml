on:
  workflow_dispatch:
    inputs:
      delete_draft_releases:
        type: boolean
        description: Delete all draft releases on GitHub (this may impact publishing).
        required: false
        default: false
  schedule:
  - cron: "*/5 * * * *"
  pull_request_target:
    types:
      - closed

name: Clean up

jobs:
  draft_releases:
    name: Delete draft release
    if: github.event_name == 'workflow_dispatch' && inputs.delete_draft_releases
    runs-on: ubuntu-latest

    steps:
      - run: |
          gh release list -L 100 -R ${{ github.repository }} > rels.txt
          while read rel _; do 
            isDraft=`gh release view $rel -R ${{ github.repository }} --json isDraft --jq '.isDraft'`
            isPrerelease=`gh release view $rel -R ${{ github.repository }} --json isPrerelease --jq '.isPrerelease'`
            if $isDraft && $isPrerelease; then
              echo "Deleting release $rel."
              gh release delete $rel -R ${{ github.repository }} -y
            else
              echo "Skipping release $rel."
            fi 
          done < rels.txt
        env:
          GH_TOKEN: ${{ secrets.REPO_BOT_ACCESS_TOKEN }}

  ghcr_images:
    name: Clean up GHCR images
    runs-on: ubuntu-latest

    strategy:
      matrix:
        image_name: [cuda-quantum-dev, cuda-quantum-devdeps, open-mpi]
      fail-fast: false

    steps:
      # We need to keep a good number of untagged manifests, 
      # since each tagged image contains/depends on untagged components
      - name: Delete untagged cuda-quantum-devdeps images
        uses: actions/delete-package-versions@v4
        with: 
          package-name: ${{ matrix.image_name }}
          package-type: 'container'
          min-versions-to-keep: 100
          delete-only-untagged-versions: 'true'

      - name: Log in to the container registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Find matching signatures files
        id: sig_files
        run: |
          regctl="docker run ghcr.io/regclient/regctl@sha256:f25e95d626ee8858ef13fd1a45c6a865dfeb647b15210f1b6cc8547e49e9d95f"
          image=ghcr.io/nvidia/${{ matrix.image_name }}
          sig_tags=`($regctl tag ls $image || echo) | (egrep -o '^sha256-\S+\.sig$' || true)`
          nr_sigs=100 # limit how much we delete at a time to avoid exceededing the service rate limit
          for sig in $sig_tags; do 
            if [ $nr_sigs -lt 1 ]; then continue; fi
            found=`($regctl image manifest $image@sha256:${sig:7:-4} &> /dev/null && echo true) || echo false`
            exists=`($found && [ -z "$($regctl image manifest $image@sha256:${sig:7:-4} | grep application/vnd.in-toto+json)" ] && echo true) || echo false`
            if ! $exists; then
              echo "Marking signature $sig for deletion."
              delete+=", $sig"
              nr_sigs=$(($nr_sigs-1))
            fi
          done
          echo "tags_to_remove=${delete:2}" >> $GITHUB_OUTPUT

      - name: Look up version numbers
        id: packages
        run: |
          gh api -X GET --paginate -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" \
            /orgs/${{ github.repository_owner }}/packages/container/${{ matrix.image_name }}/versions >> packages.json
          for tag in ${{ steps.sig_files.outputs.tags_to_remove }}; do
            echo "Finding version id for tag ${tag%,}."
            version_id=`cat packages.json | jq ".[] | select(.metadata.package_type==\"container\" and (.metadata.container.tags[] | contains(\"${tag%,}\")))" | jq '.id'`
            if [ -n "$version_id" ]; then
              echo "Marking version $version_id for deletion."
              delete+=", $version_id"
            fi
          done
          echo "[${delete:2}]"
          echo "versions_to_remove=${delete:2}" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Delete matching signatures
        if: steps.packages.outputs.versions_to_remove
        uses: actions/delete-package-versions@v4
        with: 
          package-name: ${{ matrix.image_name }}
          package-type: 'container'
          package-version-ids: '${{ steps.packages.outputs.versions_to_remove }}'

  # We use environments to deploy to a public registry after PRs are merged.
  # Since we use the same workflows during CI, a default environment that defines
  # the necessary variables is used instead. Unfortunately, this automatically
  # also creates an (unwanted) deployment, which we delete with this job.
  # See also https://github.com/actions/runner/issues/2120
  deployments:
    name: Deployments
    runs-on: ubuntu-latest
    permissions:
      deployments: write

    steps:
      - uses: actions/github-script@v6
        with:
          script: |
            const deployments = await github.rest.repos.listDeployments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              environment: 'default'
            });
            await Promise.all(
              deployments.data.map(async (deployment) => {
                await github.rest.repos.createDeploymentStatus({ 
                owner: context.repo.owner, 
                repo: context.repo.repo, 
                deployment_id: deployment.id, 
                state: 'inactive' 
                });
                return github.rest.repos.deleteDeployment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                deployment_id: deployment.id
                });
              })
            );

  pr_cleanup:
    name: Clean up documentation previews
    if: github.event_name == 'pull_request_target'
    runs-on: ubuntu-latest

    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ref: ${{ vars.preview_branch }}

      - name: Delete preview folder
        run: |
          git config --global user.name "cuda-quantum-bot"
          git config --global user.email "cuda-quantum-bot@users.noreply.github.com"
          git rm -r "pr-${{ github.event.pull_request.number }}" --ignore-unmatch
          git commit --allow-empty -m "Cleaning up docs preview for PR #${{ github.event.pull_request.number }}."
          git config pull.rebase true
          git pull --no-edit && git push

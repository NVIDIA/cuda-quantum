on:
  workflow_call:
    inputs:
      platform:
        type: string
        required: false
        default: linux/amd64
      build_cache:
        type: string
        required: false
      environment:
        type: string
        required: false
  
name: Pre-built binaries

jobs:
  build_installer:
    name: Build CUDA Quantum installer
    runs-on: ${{ (contains(inputs.platform, 'arm') && 'linux-arm64-cpu8') || 'linux-amd64-cpu8' }}
    permissions:
      contents: read

    outputs:
      artifact_name: ${{ steps.config.outputs.artifact_name }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure build
        id: config
        run: |
          platform_id=`echo "${{ inputs.platform }}" | sed 's/linux\///g' | tr -d ' ' | tr ',' -`
          if ${{ github.ref_type == 'tag' || startsWith(github.ref_name, 'releases/') }}; then
            cudaq_version=`echo ${{ github.ref_name }} | egrep -o "([0-9]{1,}\.)+[0-9]{1,}"`
          else
            cudaq_version=0.0.0
          fi

          echo "cudaq_version=$cudaq_version" >> $GITHUB_OUTPUT
          echo "docker_output=type=local,dest=/tmp/install" >> $GITHUB_OUTPUT
          echo "artifact_name=cudaq-${platform_id}-installer" >> $GITHUB_OUTPUT

      - name: Set up context for buildx
        run: |
          docker context create builder_context

      - name: Set up buildx runner
        uses: docker/setup-buildx-action@v2
        with:
          endpoint: builder_context

      - name: Build installer
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/release/installer.Dockerfile
          build-args: |
            release_version=${{ steps.config.outputs.cudaq_version }}
          cache-from: |
            ${{ inputs.build_cache }}
          outputs: ${{ steps.config.outputs.docker_output }}

      - name: Upload installer
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.config.outputs.artifact_name }}
          path: /tmp/wheels
          retention-days: 5
          if-no-files-found: error

  build_openmpi:
    name: Minimal OpenMPI installation
    runs-on: ${{ (contains(inputs.platform, 'arm') && 'linux-arm64-cpu8') || 'linux-amd64-cpu8' }}
    permissions:
      contents: read

    outputs:
      build_cache: ${{ steps.cache.outputs.build_cache }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure build
        id: cache
        run: |
          build_cache=${{ inputs.build_cache }}-openmpi
          cache_to="${build_cache},mode=max,ignore-error=false"
          echo "cache_to=$cache_to" >> $GITHUB_OUTPUT
          echo "build_cache=$build_cache" >> $GITHUB_OUTPUT

      - name: Set up context for buildx
        run: |
          docker context create builder_context

      - name: Set up buildx runner
        uses: docker/setup-buildx-action@v2
        with:
          endpoint: builder_context

      - name: Build OpenMPI
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/test/installer/linux.Dockerfile
          target: mpibuild
          platforms: ${{ inputs.platform }}
          cache-from: |
            ${{ steps.cache.outputs.build_cache }}
          cache-to: ${{ steps.cache.outputs.cache_to }}

  create_test_config:
    name: Prepare validation
    runs-on: ubuntu-latest
    permissions:
      contents: read

    outputs:
      json: "${{ steps.config.outputs.json }}"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - id: config
        run: |
          cpp_config=`cat .github/workflows/config/validation_config.json | jq ".cpp"`
          operating_systems=`echo "$cpp_config" | jq '.[].operating_systems'`
          echo "json={\"os_images\":$(echo $operating_systems)}" >> $GITHUB_OUTPUT

  validation:
    name: Validate installer
    needs: [build_installer, build_openmpi, create_test_config]
    runs-on: ${{ (contains(inputs.platform, 'arm') && 'linux-arm64-cpu8') || 'linux-amd64-cpu8' }}
    permissions:
      contents: read

    strategy:
      matrix:
        os_image: ${{ fromJSON(needs.create_test_config.outputs.json).os_images }}
      fail-fast: false

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Load cuda-quantum installer
        uses: actions/download-artifact@v3
        with:
          name: ${{ needs.build_installer.outputs.artifact_name }}

      - name: Install in clean environment
        run: |
          docker build -t validation:local -f "docker/test/installer/linux.Dockerfile" . \
            --cache-from ${{ needs.build_openmpi.outputs.build_cache }} \
            --build-arg cuda_quantum_installer=cuda_quantum.$(uname -m) \
            --build-arg base_image=${{ matrix.os_image }}

          docker run --rm -dit --name cuda-quantum validation:local
          (docker exec cuda-quantum bash -c nvq++) && installed=true || installed=false
          docker stop cuda-quantum

          if ! $installed; then echo "Failed to install CUDA Quantum." && exit 1
          else echo "Successfully installed CUDA Quantum."; fi

      - name: MPI validation
        uses: ./.github/actions/run-in-docker
        with:
          image: validation:local
          shell: bash
          run: |
            set +e # Allow script to keep going through errors
            for ex in `find examples/other/distributed/ -name '*.cpp'`; do
              nvq++ -DCUDAQ_ENABLE_MPI_EXAMPLE=1 $ex
              status=$?
              if [ $status -eq 0 ]; then
                mpiexec --allow-run-as-root -np 4 ./a.out
                status=$?
                if [ $status -eq 0 ]; then
                  echo "Successfully ran $filename."
                else
                  echo "Failed to execute $filename."
                  status_sum=$((status_sum+1))
                fi
              else
                echo "Compilation failed for $filename."
                status_sum=$((status_sum+1))
              fi
            done
            set -e # Re-enable exit code error checking
            if [ ! $status_sum -eq 0 ]; then
              echo "::error::$status_sum examples failed; see the log for more detail."
              exit $status_sum
            fi

      - name: Sanity checks
        run: |
          docker run --rm -dit --name cuda-quantum validation:local
          (docker exec cuda-quantum bash validate.sh > /tmp/validation.out) && passed=true || passed=false
          docker stop cuda-quantum

          if ! $passed; then 
            echo "::error::Validation failed; see job summary for more details."
            exit 1
          fi

      - name: Create job summary
        if: always() && !cancelled()
        run: |
          if [ -f /tmp/validation.out ]; then
            echo "## Validation" >> $GITHUB_STEP_SUMMARY
            echo "The validation of the CUDA Quantum installation produced the following output:" >> $GITHUB_STEP_SUMMARY
            echo '```text' >> $GITHUB_STEP_SUMMARY
            cat /tmp/validation.out >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          fi
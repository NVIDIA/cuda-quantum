on:
  workflow_call:
    inputs:
      platforms:
        type: string
        required: false
        default: linux/amd64
      devdeps_image:
        required: false
        type: string
      devdeps_cache:
        required: false
        type: string
      devdeps_archive:
        required: false
        type: string
      ompidev_image:
        required: false
        type: string
      environment:
        required: false
        type: string
    secrets:
      REPO_BOT_ACCESS_TOKEN:
        description: 'Access token used for deployments.'
        required: false

name: Dev Packages

jobs:
  cudaqdev_image:
    name: Release build
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    outputs:
      tar_cache: ${{ steps.prereqs.outputs.tar_cache }}
      tar_archive: ${{ steps.prereqs.outputs.tar_archive }}
      image_hash: ${{ steps.prereqs.outputs.image_name }}@${{ steps.docker_build.outputs.digest }}

    environment:
      name: ${{ inputs.environment || 'default' }}
      url: ${{ vars.deployment_url }}

    # Needed for making local images available to the docker/build-push-action.
    # See also https://stackoverflow.com/a/63927832.
    services:
      registry:
        image: registry:2
        ports:
          - 5000:5000

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Log in to the container registry
        if: inputs.environment && vars.registry
        uses: docker/login-action@v2
        with:
          registry: ${{ vars.registry }}
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Restore environment
        if: inputs.devdeps_cache && inputs.devdeps_archive
        id: restore
        uses: actions/cache/restore@v3
        with:
          path: ${{ inputs.devdeps_archive }}
          key: ${{ inputs.devdeps_cache }}
          fail-on-cache-miss: true

      - name: Load prerequisites
        id: prereqs
        run: |
          if ${{ steps.restore.outcome != 'skipped' }}; then
            base_image=`docker load --input ${{ inputs.devdeps_archive }} | grep -o 'Loaded image: \S*:\S*' | cut -d ' ' -f 3`
            # Push the image to the local registry to make it available within
            # the containered environment that docker/build-push-action uses.
            docker push $base_image
          elif ${{ inputs.devdeps_image != '' }}; then
            docker pull ${{ inputs.devdeps_image }}
            base_image=${{ inputs.devdeps_image }}
          else
            echo "Missing configuration for development dependencies. Either specify the image (i.e. provide devdeps_image) or cache (i.e. provide devdeps_cache and devdeps_archive) that should be used for the build." >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

          if ${{ github.event.pull_request.number != '' }}; then
            image_tag=pr-${{ github.event.pull_request.number }}
          elif ${{ github.ref_type == 'branch' && github.ref_name == 'main' }}; then
            image_tag=latest
          elif ${{ github.ref_type == 'tag' || startsWith(github.ref_name, 'releases/') }}; then
            image_tag=`echo ${{ github.ref_name }} | egrep -o "([0-9]{1,}\.)+[0-9]{1,}"`
          else
            image_tag=`echo ${{ github.ref_name }} | tr '/' '-'`
          fi

          repo_owner=${{ github.repository_owner }}
          image_name=${{ vars.registry || 'ghcr.io' }}/${repo_owner,,}/cuda-quantum-dev
          echo "image_name=$image_name" >> $GITHUB_OUTPUT
          echo "image_tag=$image_tag" >> $GITHUB_OUTPUT
          echo "base_image=$base_image" >> $GITHUB_OUTPUT

          if ${{ inputs.environment == '' }}; then
            tar_archive=/tmp/cuda-quantum-dev.tar
            echo "tar_cache=tar-cudaqdev-$image_tag-${{ github.sha }}" >> $GITHUB_OUTPUT
            echo "tar_archive=$tar_archive" >> $GITHUB_OUTPUT
            echo "docker_output=type=docker,dest=$tar_archive" >> $GITHUB_OUTPUT
          fi

      - name: Extract metadata
        id: metadata
        uses: docker/metadata-action@v4
        with:
          images: ${{ steps.prereqs.outputs.image_name }}
          flavor:
            latest=false
          tags: |
            type=raw,value=${{ steps.prereqs.outputs.image_tag }}
          labels: |
            org.opencontainers.image.title=cuda-quantum-dev
            org.opencontainers.image.description=Dev environment for CUDA Quantum

      - name: Set up buildx runner
        uses: docker/setup-buildx-action@v2
        with:
          driver-opts: network=host

      - name: Build CUDA Quantum
        id: docker_build
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./docker/build/cudaq.dev.Dockerfile
          build-args: |
            base_image=${{ steps.prereqs.outputs.base_image }}
            install="CMAKE_BUILD_TYPE=Release FORCE_COMPILE_GPU_COMPONENTS=true"
          tags: ${{ steps.metadata.outputs.tags }}
          labels: ${{ steps.metadata.outputs.labels }}
          platforms: ${{ inputs.platforms }}
          push: ${{ inputs.environment != '' }}
          outputs: ${{ steps.prereqs.outputs.docker_output }}

      - name: Cache cuda-quantum-dev image
        if: steps.prereqs.outputs.tar_cache && steps.prereqs.outputs.tar_archive
        uses: actions/cache/save@v3
        with:
          path: ${{ steps.prereqs.outputs.tar_archive }}
          key: ${{ steps.prereqs.outputs.tar_cache }}

  documentation:
    name: Documentation
    needs: cudaqdev_image
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Restore release build
        id: restore
        if: needs.cudaqdev_image.outputs.tar_cache && needs.cudaqdev_image.outputs.tar_archive
        uses: actions/cache/restore@v3
        with:
          path: ${{ needs.cudaqdev_image.outputs.tar_archive }}
          key: ${{ needs.cudaqdev_image.outputs.tar_cache }}
          fail-on-cache-miss: true

      - name: Build documentation
        id: docs_build
        run: |
          if ${{ steps.restore.outcome != 'skipped' }}; then
            cudaqdev_image=`docker load --input ${{ needs.cudaqdev_image.outputs.tar_archive }} | grep -o 'Loaded image: \S*:\S*' | cut -d ' ' -f 3`
          else
            docker pull ${{ needs.cudaqdev_image.outputs.image_hash }}
            cudaqdev_image=${{ needs.cudaqdev_image.outputs.image_hash }}
          fi

          dev_tag=`docker inspect $cudaqdev_image --format='{{.Config.Labels}}' | grep -o image.version:[A-Za-z0-9_-]* | cut -d : -f 2`
          docs_version="CUDA_QUANTUM_VERSION=${dev_tag#dev-}"

          docker run --rm -dit --name cuda-quantum-dev $cudaqdev_image
          (docker exec cuda-quantum-dev bash -c "export $docs_version && bash scripts/build_docs.sh" && built=true) || built=false
          if $built; then docker cp cuda-quantum-dev:"/usr/local/cudaq/docs/." docs; \
          else docker cp cuda-quantum-dev:"/workspaces/cuda-quantum/build/." /tmp/build; fi
          docker stop cuda-quantum-dev
          if $built; then `exit 0`; else `exit 1`; fi

          html_files=`find docs/api/ -type f -name "*.html"`
          json="{\"html_files\":[]}"
          for file in $html_files; do
            file=\'$file\'
            json=`echo $json | jq ".html_files |= . + [\"$file\"]"`
          done
          echo "json=$(echo $json)" >> $GITHUB_OUTPUT

      - name: Upload build artifacts
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: build
          path: /tmp/build
          retention-days: 1

      - name: Upload documentation
        if: success()
        uses: actions/upload-artifact@v3
        with:
          name: cuda_quantum_docs # changing the artifact name requires updating other workflows
          path: docs
          retention-days: 30
          if-no-files-found: error

      - name: Spell check HTML documentation
        if: success()
        continue-on-error: true # to be removed once we update all docs for this check to pass
        uses: rojopolis/spellcheck-github-actions@0.30.0
        with:
          config_path: '.github/workflows/config/spellcheck_config.yml'
          task_name: html
          source_files: ${{ join(fromJSON(steps.docs_build.outputs.json).html_files, ' ') }}

  staging:
    name: Staging
    needs: cudaqdev_image
    runs-on: ubuntu-latest
    if: inputs.environment

    permissions:
      contents: write

    environment:
      name: ${{ inputs.environment }}
      url: ${{ vars.deployment_url }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ref: ${{ vars.data_branch }}
          token: ${{ secrets.REPO_BOT_ACCESS_TOKEN }}

      - name: Push staging info
        run: |
          git config --global user.name "cuda-quantum-bot"
          git config --global user.email "cuda-quantum-bot@users.noreply.github.com"
          git commit --allow-empty -m "${{ needs.cudaqdev_image.outputs.image_hash }}"
          git pull --no-edit && git push

  cudaq_image:
    name: CUDA Quantum image
    needs: cudaqdev_image
    uses: ./.github/workflows/publish_packages.yml
    with:
      platforms: ${{ inputs.platforms }}
      ompidev_image: ${{ inputs.ompidev_image }}
      cudaqdev_image: ${{ needs.cudaqdev_image.outputs.image_hash }}
      cudaqdev_cache: ${{ needs.cudaqdev_image.outputs.tar_cache }}
      cudaqdev_archive: ${{ needs.cudaqdev_image.outputs.tar_archive }}
      environment: ${{ inputs.environment }}

  clean_up:
    name: Prepare cache clean-up
    needs: [cudaqdev_image, cudaq_image, documentation]
    runs-on: ubuntu-latest
    # We need to clean up even if the workflow is cancelled or fails.
    if: always()

    steps:
      - name: Save cache keys
        id: workflow_inputs
        run: |
          keys=${{ needs.cudaqdev_image.outputs.tar_cache }}
          keys+=" ${{ needs.cudaq_image.outputs.cache_key }}"
          echo "$keys" >> cache_keys.txt

      - uses: actions/upload-artifact@v3
        with:
          name: cache_keys_dev_packages
          path: cache_keys.txt
          retention-days: 1
          if-no-files-found: error

on:
  # We update the build caches during the pull_request_target event, 
  # and deploy the images via workflow dispatch on branches with deployment permissions.
  # A dispatch event is automatically triggered when the pull_request_target event
  # triggers the workflow.
  workflow_dispatch:
    inputs:
      update_registry_cache:
        type: boolean
        description: Create or update the build caches on the container registry.
        required: false
        default: false
      cache_base:
        required: false
        type: string
        description: 'The name of the branch to use as cache base.'
        default: main
      platforms:
        type: string
        description: The platforms to build the Docker images for.
        required: false
        default: linux/amd64
      manylinux_image:
        type: string
        description: The base image to use when building Python wheels.
        required: false
        default: quay.io/pypa/manylinux_2_28_x86_64:latest
      create_release:
        type: string
        description: The version number of the release (e.g. 0.3.0). The version must not exist already.
        required: false
        default: ''
  # We need write permissions for packages to update the build caches of GHCR.
  # Make sure no external code is checked out as part of this workflow.
  pull_request_target:
    types:
      - closed
    branches:
      - 'main'
      - 'releases/*'
  # Whenever we create a release branch, we want to populate the caches.
  # Unfortunately, it is not currently possible to filter by branch,
  # see also: https://github.com/orgs/community/discussions/26286
  push:
    branches:
      - 'releases/*'

name: Deployments # do not change name without updating workflow_run triggers

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.base.ref || github.ref_name }}
  cancel-in-progress: false

jobs:
  devdeps:
    if: github.event_name == 'workflow_dispatch' || (github.event_name == 'push' && github.event.created) || (github.event_name == 'pull_request_target' && github.event.pull_request.merged == true)
    name: Build dev dependencies
    strategy:
      matrix:
        toolchain: [llvm, clang16, gcc12]
      fail-fast: false
    uses: ./.github/workflows/dev_environment.yml
    with:
      dockerfile: build/devdeps.Dockerfile
      platforms: ${{ inputs.platforms }}
      toolchain: ${{ matrix.toolchain }}
      matrix_key: ${{ matrix.toolchain }}
      registry_cache_from: ${{ (github.event_name == 'push' && 'main') || inputs.cache_base }}
      registry_cache_update: ${{ github.event_name == 'workflow_dispatch' && inputs.update_registry_cache }}
      registry_cache_update_only: ${{ github.event.pull_request.merged == true }}
      environment: ${{ (github.event.pull_request.merged != true && 'ghcr-deployment') || '' }}

  wheeldeps:
    if: github.event_name == 'workflow_dispatch' || (github.event_name == 'push' && github.event.created) || (github.event_name == 'pull_request_target' && github.event.pull_request.merged == true)
    name: Build wheel dependencies
    uses: ./.github/workflows/dev_environment.yml
    with:
      dockerfile: build/devdeps.manylinux.Dockerfile
      platforms: ${{ inputs.platforms }}
      toolchain: x86_64
      build_args: |
        manylinux_image=${{ inputs.manylinux_image }}
      registry_cache_from: ${{ (github.event_name == 'push' && 'main') || inputs.cache_base }}
      registry_cache_update: ${{ github.event_name == 'workflow_dispatch' && inputs.update_registry_cache }}
      registry_cache_update_only: ${{ github.event.pull_request.merged == true }}
      environment: ${{ (github.event.pull_request.merged != true && 'ghcr-deployment') || '' }}

  dispatch:
    if: github.event_name == 'pull_request_target'
    name: Dispatch deployments
    runs-on: ubuntu-latest
    needs: [devdeps, wheeldeps]

    steps:
      - uses: actions/github-script@v6
        with:
          # We want this dispatch to trigger additional workflows.
          github-token: ${{ secrets.REPO_BOT_ACCESS_TOKEN }}
          script: |
            github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'deployments.yml',
              ref: '${{ github.event.pull_request.base.ref }}',
              inputs: {
                cache_base: '${{ github.event.pull_request.base.ref }}',
              },
            })

  # This job is needed only when using the cloudposse GitHub action to read
  # the output of a matrix job. This is a workaround due to current GitHub
  # limitations that may not be needed if the work started here concludes:
  # https://github.com/actions/runner/pull/2477
  config:
    if: github.event_name != 'pull_request_target'
    name: Configure build
    runs-on: ubuntu-latest
    needs: devdeps

    outputs:
      json: "${{ steps.read_json.outputs.result }}"
      base_image: ${{ fromJson(steps.read_json.outputs.result).image_hash.llvm }}
      toolchain: llvm

    steps:
      - uses: cloudposse/github-action-matrix-outputs-read@0.1.1
        id: read_json
        with:
          matrix-step-name: dev_environment

  openmpi:
    if: github.event_name == 'workflow_dispatch' || (github.event_name == 'push' && github.event.created)
    name: Build Open MPI
    uses: ./.github/workflows/dev_environment.yml
    with:
      dockerfile: build/devdeps.ompi.Dockerfile
      platforms: ${{ inputs.platforms }}
      registry_cache_from: ${{ (github.event_name == 'push' && 'main') || inputs.cache_base }}
      registry_cache_update: true
      environment: ghcr-deployment

  extdevdeps:
    name: Create dev environment
    uses: ./.github/workflows/dev_environment.yml
    needs: [config, openmpi]
    with:
      dockerfile: build/devdeps.ext.Dockerfile
      platforms: ${{ inputs.platforms }}
      toolchain: ${{ needs.config.outputs.toolchain }}
      build_args: |
        base_image=${{ needs.config.outputs.base_image }}
        ompidev_image=${{ needs.openmpi.outputs.image_hash }}
      registry_cache_from: ${{ (github.event_name == 'push' && 'main') || inputs.cache_base }}
      registry_cache_update: true
      environment: ghcr-deployment

  docker_images:
    name: Create Docker images
    needs: [extdevdeps, openmpi]
    uses: ./.github/workflows/docker_images.yml
    secrets: inherit
    with:
      platforms: ${{ inputs.platforms }}
      ompidev_image: ${{ needs.openmpi.outputs.image_hash }}
      devdeps_image: ${{ needs.extdevdeps.outputs.image_hash }}
      environment: ghcr-deployment
      create_release: ${{ inputs.create_release }}

  python_wheels:
    name: Create Python wheels
    needs: wheeldeps
    strategy:
      matrix:
        python_version: ['3.8', '3.9', '3.10', '3.11']
      fail-fast: false
    uses: ./.github/workflows/python_wheels.yml
    with:
      python_version: ${{ matrix.python_version }}
      devdeps_image: ${{ needs.wheeldeps.outputs.image_hash }}
      # TODO: upload wheels to test-pypi - the push to pypi itself
      # should be done only by the publishing when creating a release.
      # See also: 
      # https://github.com/pypa/gh-action-pypi-publish
      # https://packaging.python.org/en/latest/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows/
      # environment: pypi-deployment

on:
    workflow_call:
      inputs:
        python_version:
          type: string
          required: false
          default: '3.10'
        devdeps_image:
          required: false
          type: string
        devdeps_cache:
          required: false
          type: string
        devdeps_archive:
          required: false
          type: string
        environment:
          required: false
          type: string

name: Python wheels

jobs:
  build_wheel:
    name: Build Python ${{ inputs.python_version }} wheel
    runs-on: ubuntu-latest
    permissions:
      contents: read

    outputs:
      wheel_cache: ${{ steps.prereqs.outputs.wheel_cache }}
      wheel_path: ${{ steps.prereqs.outputs.wheel_path }}

    # Needed for making local images available to the docker/build-push-action.
    # See also https://stackoverflow.com/a/63927832.
    services:
        registry:
          image: registry:2
          ports:
            - 5000:5000

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Restore build environment
        if: inputs.devdeps_cache && inputs.devdeps_archive
        id: restore
        uses: actions/cache/restore@v3
        with:
          path: ${{ inputs.devdeps_archive }}
          key: ${{ inputs.devdeps_cache }}
          fail-on-cache-miss: true

      - name: Load prerequisites
        id: prereqs
        run: |
          if ${{ steps.restore.outcome != 'skipped' }}; then
            base_image=`docker load --input "${{ inputs.devdeps_archive }}" | grep -o 'Loaded image: \S*:\S*' | cut -d ' ' -f 3`
            # Push the image to the local registry to make it available within
            # the containered environment that docker/build-push-action uses.
            docker push $base_image
            rm -rf "${{ inputs.devdeps_archive }}"
          elif ${{ inputs.devdeps_image != '' }}; then
            base_image=${{ inputs.devdeps_image }}
            docker pull $base_image
          else
            echo "Missing configuration for development dependencies. Either specify the image (i.e. provide devdeps_image) or cache (i.e. provide devdeps_cache and devdeps_archive) that should be used for the build." >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

          devenv_tag=`docker inspect $base_image --format='{{json .Config.Labels}}' | jq -r '."org.opencontainers.image.version"'`
          docker image rm $base_image && docker image prune --force
          cache_id=`echo $devenv_tag-${{ inputs.python_version }} | tr . -`
          wheel_path=/tmp/pycudaq && mkdir -p "$wheel_path"

          if ${{ github.event.pull_request.number != '' }}; then
            cudaq_version=pr-${{ github.event.pull_request.number }}
          elif ${{ github.ref_type == 'branch' && github.ref_name == 'main' }}; then
            cudaq_version=latest
          elif ${{ github.ref_type == 'tag' || startsWith(github.ref_name, 'releases/') }}; then
            cudaq_version=`echo ${{ github.ref_name }} | egrep -o "([0-9]{1,}\.)+[0-9]{1,}"`
          else
            cudaq_version=`echo ${{ github.ref_name }} | tr '/' '-'`
          fi
        
          echo "cudaq_version=$cudaq_version" >> $GITHUB_OUTPUT
          echo "base_image=$base_image" >> $GITHUB_OUTPUT
          echo "docker_output=type=local,dest=$wheel_path" >> $GITHUB_OUTPUT
          echo "cache_id=$cache_id" >> $GITHUB_OUTPUT
          echo "wheel_cache=wheel-cudaq-$cache_id-${{ github.sha }}" >> $GITHUB_OUTPUT
          echo "wheel_path=$wheel_path" >> $GITHUB_OUTPUT

      - name: Set up buildx runner
        uses: docker/setup-buildx-action@v2
        with:
            driver-opts: network=host

      - name: Build wheel
        id: wheel_build
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./docker/build/cudaq.wheel.Dockerfile
          build-args: |
            base_image=${{ steps.prereqs.outputs.base_image }}
            release_version=${{ steps.prereqs.outputs.cudaq_version }}
          outputs: ${{ steps.prereqs.outputs.docker_output }}

      - name: Upload wheel
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.prereqs.outputs.cache_id }}
          path: ${{ steps.prereqs.outputs.wheel_path }}
          retention-days: 5
          if-no-files-found: error

      - name: Cache wheel
        uses: actions/cache/save@v3
        with:
          path: ${{ steps.prereqs.outputs.wheel_path }}
          key: ${{ steps.prereqs.outputs.wheel_cache }}

  validate_ubuntu_2204:
    name: Validate wheel on Ubuntu 22.04
    needs: build_wheel
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Load cuda-quantum wheel
        id: restore
        if: needs.build_wheel.outputs.wheel_cache && needs.build_wheel.outputs.wheel_path
        uses: actions/cache/restore@v3
        with:
          path: ${{ needs.build_wheel.outputs.wheel_path }}
          key: ${{ needs.build_wheel.outputs.wheel_cache }}
          fail-on-cache-miss: true

      - name: Validate cuda-quantum wheel
        run: |
          container_id=`docker run -itd --rm ubuntu:22.04 | grep -e '.*$'`
          docker cp docs/sphinx/examples/python $container_id:/tmp/

          if ${{ steps.restore.outcome != 'skipped' }}; then
            docker cp out/cuda_quantum-*-manylinux_*_x86_64.whl $container_id:/tmp/            
            wheel=/tmp/cuda_quantum-*-manylinux_*_x86_64.whl
          else
            echo "Not yet implemented"
            exit 1
          fi

          docker attach $container_id
          apt-get update && apt-get install -y --no-install-recommends python3 python3-pip
          pip install $wheel --user && python3 -c "import cudaq"
          pip install numpy && for file in `ls /tmp/python/`; 
          do python3 /tmp/python/$file; 
          done
          exit

#  publish_wheel:
#    name: Publish Python ${{ inputs.python_version }} wheel
#    if: inputs.environment
#    runs-on: ubuntu-latest
#    needs: build_wheel
#    permissions:
#      contents: read
#      packages: write
#
#    environment:
#      name: ${{ inputs.environment || 'default' }}
#      url: ${{ vars.deployment_url || format('https://github.com/{0}', github.repository) }}

  clean_up:
    name: Prepare cache clean-up
    needs: [build_wheel, validate_ubuntu_2204] # + publish wheel
    runs-on: ubuntu-latest
    # We need to clean up even if the workflow is cancelled or fails.
    if: always()

    steps:
      - name: Save cache keys
        id: workflow_inputs
        run: |
          keys=${{ needs.build_wheel.outputs.wheel_cache }}
          echo "$keys" >> cache_keys.txt

      - uses: actions/upload-artifact@v3
        with:
          name: cache_keys_wheels
          path: cache_keys.txt
          retention-days: 1
          if-no-files-found: error

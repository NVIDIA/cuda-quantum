on:
    workflow_call:
      inputs:
        python_version:
          type: string
          required: false
          default: '3.10'
        devdeps_image:
          required: false
          type: string
        devdeps_cache:
          required: false
          type: string
        devdeps_archive:
          required: false
          type: string
        environment:
          required: false
          type: string
        #create_release  FIXME: what to do with this? 
      secrets:
        REPO_BOT_ACCESS_TOKEN:
          description: 'Access token used for deployments.'
          required: false

name: Python wheels

jobs:
  build_wheel:
    name: Build Python ${{ inputs.python_version }} wheel
    runs-on: ubuntu-latest
    permissions:
      contents: read

    outputs:
      wheel_cache: ${{ steps.prereqs.outputs.wheel_cache }}
      wheel_path: ${{ steps.prereqs.outputs.wheel_path }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Restore build environment
        if: inputs.devdeps_cache && inputs.devdeps_archive
        id: restore
        uses: actions/cache/restore@v3
        with:
          path: ${{ inputs.devdeps_archive }}
          key: ${{ inputs.devdeps_cache }}
          fail-on-cache-miss: true

      - name: Load prerequisites
        id: prereqs
        run: |
          if ${{ steps.restore.outcome != 'skipped' }}; then
            base_image=`docker load --input "${{ inputs.devdeps_archive }}" | grep -o 'Loaded image: \S*:\S*' | cut -d ' ' -f 3`
            rm -rf "${{ inputs.devdeps_archive }}"
          elif ${{ inputs.devdeps_image != '' }}; then
            base_image=${{ inputs.devdeps_image }}
            docker pull $base_image
          else
            echo "Missing configuration for development dependencies. Either specify the image (i.e. provide devdeps_image) or cache (i.e. provide devdeps_cache and devdeps_archive) that should be used for the build." >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

          devenv_tag=`docker inspect $base_image --format='{{json .Config.Labels}}' | jq -r '."org.opencontainers.image.version"'`
          cache_id=`echo $devenv_tag-${{ inputs.python_version }} | tr . -`
          wheel_path=/tmp/wheels/python${{ inputs.python_version }}
          mkdir -p "$wheel_path"

          echo "base_image=$base_image" >> $GITHUB_OUTPUT
          echo "docker_output=type=local,dest=$wheel_path" >> $GITHUB_OUTPUT
          echo "wheel_cache=wheel-cudaq-$cache_id-${{ github.sha }}" >> $GITHUB_OUTPUT
          echo "wheel_path=$wheel_path" >> $GITHUB_OUTPUT

      - name: Set up buildx runner
        uses: docker/setup-buildx-action@v2

      - name: Build wheel
        id: wheel_build
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./docker/build/cudaq.wheel.Dockerfile
          build-args: |
            base_image=${{ steps.prereqs.outputs.base_image }}
            release_version=...
          outputs: ${{ steps.prereqs.outputs.docker_output }}

      - name: Cache wheel
        uses: actions/cache/save@v3
        with:
          path: ${{ steps.prereqs.outputs.wheel_path }}
          key: ${{ steps.prereqs.outputs.wheel_cache }}

#  publish_wheel:
#    name: Publish Python ${{ inputs.python_version }} wheel
#    runs-on: ubuntu-latest
#    needs: build_wheel
#    permissions:
#      contents: read
#      packages: write
#
#    environment:
#      name: ${{ inputs.environment || 'default' }}
#      url: ${{ vars.deployment_url || format('https://github.com/{0}', github.repository) }}

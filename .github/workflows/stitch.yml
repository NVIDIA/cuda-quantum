name: Stitch Multi-Arch Manifests

on:
  workflow_dispatch:
    inputs:
      digests_json:
        required: true
        type: string
      ext_json:
        required: true
        type: string

  workflow_call:
    inputs:
      digests_json:
        required: true
        type: string
      ext_json:
        required: true
        type: string
    outputs:
      stitched_json:
        description: "JSON mapping of stitched manifest digests"
        value: ${{ jobs.stitch.outputs.stitched_json }}

jobs:
  stitch:
    name: Stitch CUDA ${{ matrix.cuda }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        cuda: [11.8, 12.0]

    outputs:
      stitched_json: ${{ steps.aggregate.outputs.stitched_json }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up environment
        run: |
          docker context create builder_context || echo "Context exists"
          docker context use builder_context

      - name: Setup buildx
        uses: docker/setup-buildx-action@v3
        with:
          endpoint: builder_context

      - name: Stitch devdeps image
        id: stitch_devdeps_image
        run: |
          set -euo pipefail
          DIGESTS_JSON='${{ inputs.digests_json }}'
          EXT_JSON='${{ inputs.ext_json }}'

          cuda="${{ matrix.cuda }}"
          cuda_major="${cuda%%.*}"

          refs=""
          for arch in arm64 amd64; do
            key="${arch-cu${cuda}-ext"
            image=$(echo "$EXT_JSON" | jq -r ".image_hash[\"$key\"]")
            refs="$refs $image"
          done

          registry=$(echo "$arm64_image" | cut -d'@' -f1)
          gcc_version=$(echo "$EXT_JSON" | jq -r ".build_cache[\"$key_arm64\"]" | grep -o 'gcc[0-9]\+' || echo "gccXX")
          tag="ext-cu${cuda}-${gcc_version}-debug"
          stitched_tag="${registry}:${tag}"

          docker buildx imagetools create --tag "$stitched_tag" $refs
          digest=$(docker buildx imagetools inspect "$stitched_tag" | awk '/^Digest:/ { print $2 }')

          stitched_output=$(cat stitched_digests.json 2>/dev/null || echo '{}')
          stitched_output=$(echo "$stitched_output" | jq --arg key "devdeps-cu${cuda_major}" --arg val "$digest" '. + {($key): $val}')
          echo "$stitched_output" > stitched_digests.json

      - name: Stitch dev image
        id: stitch_dev_image
        run: |
          set -euo pipefail
          DIGESTS_JSON='${{ inputs.digests_json }}'

          cuda="${{ matrix.cuda }}"
          cuda_major="${cuda%%.*}"
          image="dev-image"

          refs=""
          for arch in amd64 arm64; do
            key="${arch}-cu${cuda}-${image}"
            digest=$(echo "$DIGESTS_JSON" | jq -r ".digest[\"$key\"]")
            arch_reference=$(echo "$DIGESTS_JSON" | jq -r ".image_tag[\"$key\"]")
            registry=$(echo "$arch_reference" | cut -d':' -f1)
            refs="$refs $registry@$digest"
          done

          branch="${GITHUB_REF_NAME:-dev}"
          stitched_tag="$registry:cu${cuda_major}-${branch}-base"

          docker buildx imagetools create --tag "$stitched_tag" $refs
          digest=$(docker buildx imagetools inspect "$stitched_tag" | awk '/^Digest:/ { print $2 }')
          stitched_output=$(cat stitched_digests.json 2>/dev/null || echo '{}')
          stitched_output=$(echo "$stitched_output" | jq --arg key "dev-cu${cuda_major}" --arg val "$digest" '. + {($key): $val}')
          echo "$stitched_output" > stitched_digests.json

      - name: Stitch cudaq image
        id: stitch_cudaq_image
        run: |
          set -euo pipefail
          DIGESTS_JSON='${{ inputs.digests_json }}'

          cuda="${{ matrix.cuda }}"
          cuda_major="${cuda%%.*}"
          image="image"

          refs=""
          for arch in amd64 arm64; do
            key="${arch}-cu${cuda}-${image}"
            digest=$(echo "$DIGESTS_JSON" | jq -r ".digest[\"$key\"]")
            arch_reference=$(echo "$DIGESTS_JSON" | jq -r ".image_tag[\"$key\"]")
            registry=$(echo "$arch_reference" | cut -d':' -f1)
            refs="$refs $registry@$digest"
          done

          ref_name="${GITHUB_REF_NAME}"
          is_versioned=false
          has_continuous_deployment=false
          [[ "${{ github.ref_type }}" == "tag" || "$ref_name" =~ ^releases/ || "$ref_name" =~ ^staging/ ]] && is_versioned=true
          [[ "$ref_name" =~ ^experimental/ || "$ref_name" == "main" ]] && has_continuous_deployment=true
          if [[ "$is_versioned" == "true" || "$has_continuous_deployment" == "true" ]]; then
            registry=${registry/ghcr.io\/nvidia/nvcr.io\/nvidia\/nightly}
          fi

          image_tag="cu${cuda_major}-"
          if [[ "$ref_name" =~ pull-request/ ]]; then
            pr_number=$(echo "$ref_name" | grep -o [0-9]*)
            image_tag+="pr-${pr_number}"
          elif [[ "${{ github.ref_type }}" == "branch" && "$ref_name" == "main" ]]; then
            image_tag+="latest"
          elif [[ "$is_versioned" == "true" ]]; then
            image_tag+=$(echo "$ref_name" | grep -oE '([0-9]+\.)+[0-9]+')
          else
            image_tag+=$(echo "$ref_name" | tr '/' '-')
          fi

          stitched_tag="${registry}:${image_tag}"

          docker buildx imagetools create --tag "$stitched_tag" $refs
          digest=$(docker buildx imagetools inspect "$stitched_tag" | awk '/^Digest:/ { print $2 }')
          stitched_output=$(cat stitched_digests.json 2>/dev/null || echo '{}')
          stitched_output=$(echo "$stitched_output" | jq --arg key "base-cu${cuda_major}" --arg val "$digest" '. + {($key): $val}')
          echo "$stitched_output" > stitched_digests.json

      - name: Aggregate stitched output
        id: aggregate
        run: |
          set -euo pipefail
          stitched_json=$(jq -c . stitched_digests.json)
          echo "stitched_json=$stitched_json" >> $GITHUB_OUTPUT
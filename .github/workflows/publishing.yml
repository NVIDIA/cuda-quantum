on:
  workflow_dispatch:
    inputs:
      release_id:
        type: string
        description: The release id on GitHub from which to download the assets.
        required: true
  workflow_run:
    workflows:
      - Deployments
    types:
      - completed

name: Packages

jobs:
  cudaq_hpc:
    name: CUDA Quantum Docker image
    if: github.event_name == 'workflow_dispatch' || (github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.actor.name == 'cuda-quantum-bot')
    runs-on: ubuntu-latest
    timeout-minutes: 100
    permissions:
      contents: read
      packages: write

    environment:
      name: ghcr-deployment
      url: ${{ vars.deployment_url }}

    steps:
      - name: Download artifacts
        id: artifacts
        if: github.event_name == 'workflow_run'
        run: |
          artifacts_url=${{ github.event.workflow_run.artifacts_url }}
          artifacts=$(gh api $artifacts_url -q '.artifacts[] | {name: .name, url: .archive_download_url}')
          wheelhouse="$(pwd)/wheels"
          mkdir -p "$wheelhouse"

          for artifact in `echo "$artifacts"`; do
            name=`echo $artifact | jq -r '.name'`
            if [ "$name" == "build_info" ]; then
              url=`echo $artifact | jq -r '.url'`
              gh api $url > build_info.zip
              unzip -d build_info build_info.zip
              for file in `find build_info/ -type f`; do
                cat "$file" >> build_info.txt
              done
              rm -rf build_info build_info.zip
            fi
            if [ "${name#pycudaq-}" != "$name" ]; then
              url=`echo $artifact | jq -r '.url'`
              gh api $url > pycudaq.zip
              unzip -d pycudaq pycudaq.zip && cd pycudaq
              for wheel in `ls *.whl`; do
                mv $wheel "$wheelhouse/$wheel"
              done
              cd .. && rm -rf pycudaq*
            fi
          done

          release_id=`cat build_info.txt | grep -o 'release-id: \S*' | cut -d ' ' -f 2`
          rm build_info.txt && echo "release_id=$release_id" >> $GITHUB_OUTPUT
          echo "wheelhouse=$wheelhouse" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Wait for release
        id: assets
        run: |
          release_id=${{ inputs.release_id || steps.artifacts.outputs.release_id }}
          github_commit=`gh release view $release_id -R ${{ github.repository }} --json targetCommitish --jq .targetCommitish`

          echo "release_id=$release_id" >> $GITHUB_OUTPUT
          echo "github_commit=$github_commit" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.REPO_BOT_ACCESS_TOKEN }}

      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ref: ${{ steps.assets.outputs.github_commit }}

      - name: Retrieve assets
        id: release_info
        run: |
          assets_folder=assets && release_id=${{ steps.assets.outputs.release_id }}
          mkdir "$assets_folder" && cd "$assets_folder"
          while [ -z `ls | egrep '^build_info'` ]; do
            gh release download $release_id -R ${{ github.repository }}
            sleep 30 # waiting for assets to be created...
          done

          platforms=`cat build_info* | grep -o 'platforms: \S*' | cut -d ' ' -f 2`
          cudaq_image=`cat build_info* | grep -o 'cuda-quantum-image: \S*' | cut -d ' ' -f 2`
          cudaqdev_image=`cat build_info* | grep -o 'cuda-quantum-dev-image: \S*' | cut -d ' ' -f 2`
          cudaqdevdeps_image=`cat build_info* | grep -o 'cuda-quantum-devdeps-image: \S*' | cut -d ' ' -f 2`
          data_commit=`cat build_info* | grep -o 'data-commit: \S*' | cut -d ' ' -f 2`
          release_title=`cat build_info* | grep -o 'publish: \S*' | cut -d ' ' -f 2`
          for file in `ls *zip`; do unzip "$file" && rm "$file"; done
          mkdir -p wheelhouse && cd -
          if ${{ steps.artifacts.outcome != 'skipped' }}; then
            mv "${{ steps.artifacts.outputs.wheelhouse }}"/* "$assets_folder/wheelhouse"
          fi

          docker pull $cudaq_image
          repo_owner=${{ github.repository_owner }}
          registry=${{ vars.registry || 'localhost:5000' }}
          image_name=$registry/${repo_owner,,}/cuda-quantum
          base_tag=`docker inspect $cudaq_image --format='{{json .Config.Labels}}' | jq -r '."org.opencontainers.image.version"'`
          image_title=`docker inspect $cudaq_image --format='{{json .Config.Labels}}' | jq -r '."org.opencontainers.image.title"'`
          image_description=`docker inspect $cudaq_image --format='{{json .Config.Labels}}' | jq -r '."org.opencontainers.image.description"'`
          docker image rm $cudaq_image
          docker image prune --force

          echo "image_name=$image_name" >> $GITHUB_OUTPUT
          echo "image_tag=${base_tag}-hpc" >> $GITHUB_OUTPUT
          echo "image_title=$image_title" >> $GITHUB_OUTPUT
          echo "image_description=$image_description" >> $GITHUB_OUTPUT
          echo "platforms=$platforms" >> $GITHUB_OUTPUT
          echo "cudaq_image=$cudaq_image" >> $GITHUB_OUTPUT
          echo "cudaqdev_image=$cudaqdev_image" >> $GITHUB_OUTPUT
          echo "cudaqdevdeps_image=$cudaqdevdeps_image" >> $GITHUB_OUTPUT
          echo "assets_folder=$assets_folder" >> $GITHUB_OUTPUT
          echo "data_commit=$data_commit" >> $GITHUB_OUTPUT
          echo "release=$release_title" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.REPO_BOT_ACCESS_TOKEN }}

      - name: Log in to the container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ vars.registry }}
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Set up buildx runner
        uses: docker/setup-buildx-action@v2

      - name: Extract cuda-quantum metadata
        id: metadata
        uses: docker/metadata-action@v4
        with:
          images: ${{ steps.release_info.outputs.image_name }}
          flavor: latest=false
          tags: type=raw,value=${{ steps.release_info.outputs.image_tag }}
          labels: |
            org.opencontainers.image.title=${{ steps.release_info.outputs.image_title }}
            org.opencontainers.image.description=${{ steps.release_info.outputs.image_description }}

      - name: Build cuda-quantum image
        id: docker_build
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./docker/release/cudaq.ext.Dockerfile
          build-args: |
            base_image=${{ steps.release_info.outputs.cudaq_image }}
            assets=${{ steps.release_info.outputs.assets_folder }}
          tags: ${{ steps.metadata.outputs.tags }}
          labels: ${{ steps.metadata.outputs.labels }}
          platforms: ${{ steps.release_info.outputs.platforms }}
          push: true

      - name: Publish release
        id: publish_release
        if: steps.release_info.outputs.release
        run: |
          release_id=${{ steps.assets.outputs.release_id }}
          cd "${{ steps.release_info.outputs.assets_folder }}" && zip -r wheelhouse.zip wheelhouse
          gh release upload $release_id -R ${{ github.repository }} wheelhouse.zip --clobber && cd -
          for file in `ls "${{ steps.release_info.outputs.assets_folder }}"/build_info*`; do 
            gh release delete-asset $release_id `basename -- "$file"` -y
          done

          gh release view $release_id --json body --jq .body > rel_notes.txt
          header_length=`cat rel_notes.txt | grep -n "Release notes generated" | cut -d ':' -f 1`
          echo -e "The following images are available for ${{ steps.release_info.outputs.platforms }}:\n" > new_notes.txt
          echo "- cuda-quantum (base image): ${{ steps.release_info.outputs.cudaq_image }}" >> new_notes.txt
          echo "- cuda-quantum (with hpc components): ${{ steps.release_info.outputs.image_name }}@${{ steps.docker_build.outputs.digest }}" >> new_notes.txt
          echo "- cuda-quantum-dev (for extension development): ${{ steps.release_info.outputs.cudaqdev_image }}" >> new_notes.txt
          echo "- cuda-quantum-devdeps (development dependencies only): ${{ steps.release_info.outputs.cudaqdevdeps_image }}" >> new_notes.txt
          (echo && tail -n +$header_length rel_notes.txt) >> new_notes.txt
          gh release edit $release_id -R ${{ github.repository }} --notes-file new_notes.txt

          version=`echo "${{ steps.release_info.outputs.release }}" | egrep -o "([0-9]{1,}\.)+[0-9]{1,}([A-Za-z0-9_\-\.]*)"`
          prerelease=`([ "$(echo $version | egrep -o '([0-9]{1,}\.)+[0-9]{1,}')" == "$version" ] && echo false) || echo true`
          gh release edit $release_id -R ${{ github.repository }} --title "${{ steps.release_info.outputs.release }}" --tag $version --prerelease=$prerelease # --draft=false
          echo "Release is ready for publishing." # FIXME: uncomment above and update this.
        env:
          GH_TOKEN: ${{ secrets.REPO_BOT_ACCESS_TOKEN }}

      - name: Checkout data branch
        uses: actions/checkout@v3
        with:
          ref: ${{ vars.data_branch }}
          token: ${{ secrets.REPO_BOT_ACCESS_TOKEN }}
          fetch-depth: 0

      - name: Clean up
        id: cleanup
        run: |
          # Clean up (i.e. revert) the staging commit on the data branch
          # that was used to trigger the GitLab pipeline.
          data_commit=${{ steps.release_info.outputs.data_commit }}
          if $(git cat-file -e $data_commit^{commit} 2> /dev/null); then
            git config --global user.name "cuda-quantum-bot"
            git config --global user.email "cuda-quantum-bot@users.noreply.github.com"
            git revert $data_commit --no-edit
            git pull --no-edit && git push
          else 
            echo "Data commit retrieved from build_info does not exist."
            exit 1
          fi

          # Delete the draft release that was used to share artifacts and
          # build information between GitLab and GitHub, or trigger publishing.
          release_id=${{ steps.assets.outputs.release_id }}
          gh release view $release_id --json body --jq .body >> $GITHUB_STEP_SUMMARY
          if ${{ steps.publish_release.outcome == 'skipped' }}; then
            gh release delete $release_id -R ${{ github.repository }} -y
            echo "Deleted release $release_id."
          fi
        env:
          GH_TOKEN: ${{ secrets.REPO_BOT_ACCESS_TOKEN }}

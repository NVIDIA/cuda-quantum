workflow:
  name: 'Staging'
  rules:
    - if: '$CI_COMMIT_BRANCH =~ /^bot/ && $CI_COMMIT_TITLE =~ /^ghcr\.io\/nvidia\/cuda-quantum-dev@sha256:\S+$/'
      variables:
        staged: "cuda-quantum-dev"
    - if: '$CI_COMMIT_BRANCH =~ /^bot/ && $CI_COMMIT_BRANCH =~ /arm64/ && $CI_COMMIT_TITLE =~ /^ghcr\.io\/nvidia\/cuda-quantum-devdeps@sha256:\S+$/'
      variables:
        runner: os/linux-arm
        staged: "cuda-quantum-devdeps"
    - if: '$CI_COMMIT_BRANCH =~ /^bot/ && $CI_COMMIT_TITLE =~ /^ghcr\.io\/nvidia\/cuda-quantum-devdeps@sha256:\S+$/'
      variables:
        runner: hostname/xpl-dvt-55
        staged: "cuda-quantum-devdeps"
    - when: always

default:
  tags: 
    - hostname/xpl-dvt-55
  timeout: 1h
  interruptible: true

stages:
  - metadata
  - build
  - deploy

Metadata:
  stage: metadata
  script:
    - echo "Commit branch is $CI_COMMIT_BRANCH"
    - echo "Commit title is $CI_COMMIT_TITLE"
    - echo "Staged is set to $staged"

Python Wheels:
  rules:
    - if: $staged == "cuda-quantum-devdeps"
  stage: build
  dependencies: []
  image: $CI_COMMIT_TITLE
  tags:
    - $runner
  interruptible: false
  artifacts:
    paths:
      - artifacts
    expire_in: 1 day
  before_script:
  # Download wheels from deployment artifacts 
  # Install GitHub CLI
    - dnf config-manager --add-repo https://cli.github.com/packages/rpm/gh-cli.repo
    - dnf install -y gh jq
    - upstream_url=https://github.com/NVIDIA/cuda-quantum && export GH_TOKEN=$GITHUB_TOKEN
    - if [ -z "$(git remote -v | grep upstream)" ]; 
      then git remote add upstream ${upstream_url}.git;
      fi
    # Retrieve the upstream CUDA Quantum artifacts
    - digest=${CI_COMMIT_TITLE#ghcr.io/nvidia/$staged@}
    - build_info=`cat deployments/staging/$staged/${digest#sha256:}`
    - artifacts_url=`echo "$build_info" | grep -s -o 'artifacts-url:\s*\S*' | rev | cut -d ' ' -f 1 | rev`
    - artifacts=$(gh api $artifacts_url -q '.artifacts[] | {name:.name, url:.archive_download_url}')
    # Store wheels in a temporary directory 
    - mkdir -p /tmp/wheels
    - |
      for artifact in `echo "$artifacts"`; do 
        name=`echo $artifact | jq -r '.name'`
        if [ "${name#pycudaq-}" != "$name" ]; then
          url=`echo $artifact | jq -r '.url'`
          gh api $url > _pycudaq.zip
          unzip -d _pycudaq _pycudaq.zip && cd _pycudaq
          for wheel in `ls cuda_quantum-*-cp310-cp310-manylinux_*_$(uname -m).whl 2> /dev/null`; do
            echo "Adding wheel $wheel."
            mv $wheel "/tmp/wheels/$wheel"
          done
          cd .. && rm -rf _pycudaq*
        fi
      done
  script:
    - export PROJECT_SRCS_DIR=$PWD/.. 
    # Install CUDA Quantum wheel for a particular Python version (could be any version) 
    - export python=python3.10 
    - cd /tmp/wheels/ && $python -m pip install cuda_quantum-*-cp310-cp310-manylinux_*_$(uname -m).whl
    - cudaq_location=`$python -m pip show cuda-quantum | grep -e 'Location:\ .*$'`
    - export CUDAQ_INSTALL_PREFIX="${cudaq_location#Location:\ }"
    - cp -R $CUDAQ_INSTALL_PREFIX/lib64/cmake/fmt $CUDAQ_INSTALL_PREFIX/lib/cmake
    # Tensornet Simulator
    # ==== REMOVE ==========
    # once these commits are ready for deployment.
    - export EXATN_REPO=dlyakh/exatn
    - export EXATN_COMMIT=9c053ac1671c041827fee3aeb33cfc6bf43762eb
    - export CUDAQ_TENSORNET_COMMIT=0ba55a7c523dde47f51f7e118211aafc6db2b8e6
    - export CUDAQ_MGMN_SVSIM_COMMIT=1beb1d3e183cd5e7d5984b11c92740f607b6d5ba
    # ======================
    - export ARTIFACTS_DIR=$PROJECT_SRCS_DIR/cuda-quantum/artifacts/wheels_$(uname -m)
    - mkdir -p $ARTIFACTS_DIR
    - cd $PROJECT_SRCS_DIR
    - echo "Checking out commit $CUDAQ_TENSORNET_COMMIT on $CI_SERVER_HOST/$CUDAQ_TENSORNET_REPO."
    - mkdir cudaq_tensornet && cd cudaq_tensornet && git init
    - git fetch --depth 1 https://$READ_ACCESS_TOKEN:$READ_ACCESS_TOKEN@$CI_SERVER_HOST/$CUDAQ_TENSORNET_REPO $CUDAQ_TENSORNET_COMMIT && git checkout FETCH_HEAD
    - export PATH=/opt/rh/gcc-toolset-11/root/usr/bin:$PATH
    - (bash build.sh $READ_ACCESS_TOKEN && built=true) || built=false
    - cp -R artifacts/* $ARTIFACTS_DIR
    # MGMN SV  Simulator
    - cd $PROJECT_SRCS_DIR
    - echo "Checking out commit $CUDAQ_MGMN_SVSIM_COMMIT on $CI_SERVER_HOST/$CUDAQ_MGMN_SVSIM_REPO."
    - mkdir cudaq_mgmn_svsim && cd cudaq_mgmn_svsim && git init
    - git fetch --depth 1 https://$READ_ACCESS_TOKEN:$READ_ACCESS_TOKEN@$CI_SERVER_HOST/$CUDAQ_MGMN_SVSIM_REPO $CUDAQ_MGMN_SVSIM_COMMIT && git checkout FETCH_HEAD
    - (bash build.sh $READ_ACCESS_TOKEN && built=true) || built=false
    - cp -R artifacts/* $ARTIFACTS_DIR
    - if $built; then `exit 0`; else `exit 1`; fi

MGMN SV Simulator:
  rules:
    - if: $staged == "cuda-quantum-dev"
  stage: build
  dependencies: []
  image: $CI_COMMIT_TITLE
  parallel:
    matrix:
      - runner: [hostname/xpl-dvt-55, os/linux-arm]
  tags:
    - $runner
  interruptible: false
  artifacts:
    paths:
      - artifacts/**/mgmn_svsim/
    expire_in: 1 day
  script:
    - echo "Building mgmn_svsim for $(uname -m) architecture."
    - echo "Checking out commit $CUDAQ_MGMN_SVSIM_COMMIT on $CI_SERVER_HOST/$CUDAQ_MGMN_SVSIM_REPO."
    - mkdir cudaq_mgmn_svsim && cd cudaq_mgmn_svsim && git init
    - git fetch --depth 1 https://$READ_ACCESS_TOKEN:$READ_ACCESS_TOKEN@$CI_SERVER_HOST/$CUDAQ_MGMN_SVSIM_REPO $CUDAQ_MGMN_SVSIM_COMMIT && git checkout FETCH_HEAD
    - (bash build.sh $READ_ACCESS_TOKEN && built=true) || built=false
    - mkdir -p ../artifacts/$(uname -m)/mgmn_svsim && mv artifacts/* ../artifacts/$(uname -m)/mgmn_svsim
    - cd .. && rm -rf cudaq_mgmn_svsim
    - if $built; then `exit 0`; else `exit 1`; fi

Tensornet Simulator:
  rules:
    - if: $staged == "cuda-quantum-dev"
  stage: build
  dependencies: []
  image: $CI_COMMIT_TITLE
  parallel:
    matrix:
      - runner: [hostname/xpl-dvt-55, os/linux-arm]
  tags:
    - $runner
  interruptible: false
  artifacts:
    paths:
      - artifacts/**/tensornet/
    expire_in: 1 day
  script:
    - echo "Checking out commit $CUDAQ_TENSORNET_COMMIT on $CI_SERVER_HOST/$CUDAQ_TENSORNET_REPO."
    - mkdir cudaq_tensornet && cd cudaq_tensornet && git init
    - git fetch --depth 1 https://$READ_ACCESS_TOKEN:$READ_ACCESS_TOKEN@$CI_SERVER_HOST/$CUDAQ_TENSORNET_REPO $CUDAQ_TENSORNET_COMMIT && git checkout FETCH_HEAD
    - (bash build.sh $READ_ACCESS_TOKEN && built=true) || built=false
    - mkdir -p ../artifacts/$(uname -m)/tensornet && mv artifacts/* ../artifacts/$(uname -m)/tensornet
    - cd .. && rm -rf cudaq_tensornet
    - if $built; then `exit 0`; else `exit 1`; fi

Push to GitHub:
  only:
    variables:
      - $staged
  stage: deploy
  interruptible: false
  script:
    - type -p curl >/dev/null || (apt-get update && apt-get install -y --no-install-recommends curl)
    - apt-get update && apt-get install -y --no-install-recommends zip ca-certificates && update-ca-certificates
    - curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg --connect-timeout 300 | dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
    - chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg
    - echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
    - apt-get update && apt-get install -y --no-install-recommends gh
    - upstream_url=https://github.com/NVIDIA/cuda-quantum && export GH_TOKEN=$GITHUB_TOKEN
    - if [ -z "$(git remote -v | grep upstream)" ]; 
      then git remote add upstream ${upstream_url}.git;
      fi
    - digest=${CI_COMMIT_TITLE#ghcr.io/nvidia/$staged@}
    - build_info=`cat deployments/staging/$staged/${digest#sha256:}`
    - info_file=`echo "$build_info" | grep -s -o 'asset-name:\s*\S*' | rev | cut -d ' ' -f 1 | cut -d ':' -f 1 | rev`
    - release_id=`echo "$build_info" | grep -s -o 'release-id:\s*\S*' | rev | cut -d ' ' -f 1 | cut -d ':' -f 1 | rev`
    - source_commit=`echo "$build_info" | grep -s -o 'source-sha:\s*\S*' | rev | cut -d ' ' -f 1 | cut -d ':' -f 1 | rev`
    - versions=`gh release list -R $upstream_url --exclude-drafts --exclude-pre-releases | egrep -o "([0-9]{1,}\.)+[0-9]{1,}\S*" | sort -r -V`
    - latest_tag=`echo $versions | cut -d ' ' -f 1`
    - |
      if [ -z "$(gh release list | grep -s $release_id)" ];
      then
        rel_notes="This release draft is managed by cd processes."
        rel_notes+=$(echo "<br/>GitHub commit [$source_commit]($upstream_url/tree/$source_commit)")
        gh release create $release_id --title $release_id -R $upstream_url \
          --target $source_commit --draft --prerelease \
          --generate-notes --notes-start-tag $latest_tag --notes "$rel_notes"
      fi
    - mkdir -p artifacts && cd artifacts
    - echo "$build_info" > "$info_file" && (echo -n "data-commit:" && echo " $CI_COMMIT_SHA") >> "$info_file"
    - if [ -d x86_64 ]; then zip -r sims_amd64.zip x86_64 && upload+="sims_amd64.zip "; fi
    - if [ -d aarch64 ]; then zip -r sims_aarch64.zip aarch64 && upload+="sims_aarch64.zip "; fi
    - if [ -d wheels_x86_64 ]; then zip -r wheels_x86_64.zip wheels_x86_64 && upload+="wheels_x86_64.zip "; fi
    - if [ -d wheels_aarch64 ]; then zip -r wheels_aarch64.zip wheels_aarch64 && upload+="wheels_aarch64.zip "; fi
    - echo $upload | xargs gh release upload $release_id -R $upstream_url --clobber "$info_file"
    - additional_notes="Release edited by [GitLab pipeline]($CI_PIPELINE_URL)." &&
      additional_notes+=$(echo "<br/>Triggered based on [this commit]($upstream_url/commit/$CI_COMMIT_SHA).")
    - gh release view $release_id --json body --jq .body > rel_notes.txt
    - header_length=`cat rel_notes.txt | grep -n "Release notes generated" | cut -d ':' -f 1`
    - (head -n $(($header_length - 1)) rel_notes.txt && echo -e "\n$additional_notes\n" && tail -n +$header_length rel_notes.txt) > new_notes.txt
    - gh release edit $release_id -R $upstream_url --notes-file new_notes.txt

workflow:
  name: 'Staging'
  rules:
    - if: '$CI_COMMIT_BRANCH =~ /^bot/ && $CI_COMMIT_TITLE =~ /cuda-quantum-dev@sha256:\S+$/'
      variables:
        staged: "cuda-quantum-dev"
    - if: '$CI_COMMIT_BRANCH =~ /^bot/ && $CI_COMMIT_BRANCH =~ /arm64/ && $CI_COMMIT_TITLE =~ /cuda-quantum-devdeps@sha256:\S+$/'
      variables:
        runner: hostname/core-plab-e114-arm-glr01.nvidia.com
        staged: "cuda-quantum-devdeps"
    - if: '$CI_COMMIT_BRANCH =~ /^bot/ && $CI_COMMIT_TITLE =~ /cuda-quantum-devdeps@sha256:\S+$/'
      variables:
        runner: project/cuda-quantum-amd64
        staged: "cuda-quantum-devdeps"
    - if: '$CI_COMMIT_BRANCH =~ /^bot/ && $CI_COMMIT_BRANCH =~ /arm64/ && $CI_COMMIT_TITLE =~ /cuda-quantum-assets@sha256:\S+$/'
      variables:
        runner: hostname/core-plab-e114-arm-glr01.nvidia.com
        staged: "cuda-quantum-assets"
    - if: '$CI_COMMIT_BRANCH =~ /^bot/ && $CI_COMMIT_TITLE =~ /cuda-quantum-assets@sha256:\S+$/'
      variables:
        runner: project/cuda-quantum-amd64
        staged: "cuda-quantum-assets"
    - when: always

default:
  image: ubuntu:22.04
  tags: 
    - project/cuda-quantum-amd64
  timeout: 1h
  interruptible: true

stages:
  - metadata
  - build
  - deploy

Metadata:
  stage: metadata
  artifacts:
    reports:
      dotenv: build.env
  script:
    - echo "Commit branch is $CI_COMMIT_BRANCH"
    - echo "Commit title is $CI_COMMIT_TITLE"
    - echo "Staged is set to $staged"
    # Install GitHub CLI
    - type -p curl >/dev/null || (apt-get update && apt-get install -y --no-install-recommends curl)
    - apt-get update && apt-get install -y --no-install-recommends zip ca-certificates && update-ca-certificates
    - curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg --connect-timeout 300 | dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
    - chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg
    - echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
    - apt-get update && apt-get install -y --no-install-recommends gh
    - upstream_url=https://github.com/NVIDIA/cuda-quantum && export GH_TOKEN=$GITHUB_TOKEN
    - if [ -z "$(git remote -v | grep upstream)" ]; 
      then git remote add upstream ${upstream_url}.git;
      fi
    # Retrieve the build metadata
    - digest=`echo $CI_COMMIT_TITLE | rev | cut -d '@' -f 1 | rev`
    - build_info=`cat deployments/staging/$staged/${digest#sha256:}`
    - CUDAQ_MGMN_SVSIM_REPO=`echo "$build_info" | grep -s -o 'nvidia-mgpu-repo:\s*\S*' | rev | cut -d ' ' -f 1 | cut -d ':' -f 1 | rev`
    - CUDAQ_MGMN_SVSIM_COMMIT=`echo "$build_info" | grep -s -o 'nvidia-mgpu-commit:\s*\S*' | rev | cut -d ' ' -f 1 | cut -d ':' -f 1 | rev`
    - echo "CUDAQ_MGMN_SVSIM_REPO is $CUDAQ_MGMN_SVSIM_REPO, CUDAQ_MGMN_SVSIM_COMMIT is $CUDAQ_MGMN_SVSIM_COMMIT"
    - echo "CUDAQ_MGMN_SVSIM_REPO=$CUDAQ_MGMN_SVSIM_REPO" >> build.env
    - echo "CUDAQ_MGMN_SVSIM_COMMIT=$CUDAQ_MGMN_SVSIM_COMMIT" >> build.env

Python Wheels:
  rules:
    - if: $staged == "cuda-quantum-devdeps"
  stage: build
  dependencies: 
    - Metadata
  image: $CI_COMMIT_TITLE
  tags:
    - $runner
  interruptible: false
  artifacts:
    paths:
      - artifacts
    expire_in: 1 day
  before_script:
    # Install GitHub CLI
    - dnf config-manager --add-repo https://cli.github.com/packages/rpm/gh-cli.repo
    - dnf install -y gh jq
    - upstream_url=https://github.com/NVIDIA/cuda-quantum && export GH_TOKEN=$GITHUB_TOKEN
    - if [ -z "$(git remote -v | grep upstream)" ]; 
      then git remote add upstream ${upstream_url}.git;
      fi
    # Retrieve the upstream CUDA Quantum artifacts
    - digest=`echo $CI_COMMIT_TITLE | rev | cut -d '@' -f 1 | rev`
    - build_info=`cat deployments/staging/$staged/${digest#sha256:}`
    - artifacts_url=`echo "$build_info" | grep -s -o 'artifacts-url:\s*\S*' | rev | cut -d ' ' -f 1 | rev`
    - artifacts=$(gh api $artifacts_url -q '.artifacts[] | {name:.name, url:.archive_download_url}')
    # Store wheels in a temporary directory 
    - mkdir -p /tmp/wheels
    - |
      for artifact in `echo "$artifacts"`; do 
        name=`echo $artifact | jq -r '.name'`
        if [ "${name#pycudaq-}" != "$name" ]; then
          url=`echo $artifact | jq -r '.url'`
          gh api $url > _pycudaq.zip
          unzip -d _pycudaq _pycudaq.zip && cd _pycudaq
          for wheel in `ls cuda_quantum*-cp310-cp310-manylinux_*_$(uname -m).whl 2> /dev/null`; do
            echo "Adding wheel $wheel."
            mv $wheel "/tmp/wheels/$wheel"
          done
          cd .. && rm -rf _pycudaq*
        fi
      done
  script:
    - export PROJECT_SRCS_DIR=$PWD/..
    - export python=python3.10 
    # Install CUDA Quantum wheel for a particular Python version (could be any version) 
    - cuda_major=$(echo $CUDA_VERSION | cut -d . -f1)
    - cd /tmp/wheels/ && $python -m pip install cuda_quantum_cu${cuda_major}*-cp310-cp310-manylinux_*_$(uname -m).whl
    - export CUQUANTUM_INSTALL_PREFIX="$($python -m pip show cuquantum-python-cu$cuda_major | sed -nE 's/Location. (.*)$/\1/p')/cuquantum"
    - |
      # FIXME: remove this an instead update the mgpu build to properly work with alternative libs
      if [ ! -f "$CUQUANTUM_INSTALL_PREFIX/lib/libcustatevec.so" ]; then 
        ln -s "$CUQUANTUM_INSTALL_PREFIX/lib/libcustatevec.so.1" "$CUQUANTUM_INSTALL_PREFIX/lib/libcustatevec.so"
      fi
    - export CUDAQ_INSTALL_PREFIX="$($python -m pip show cuda-quantum-cu${cuda_major} | sed -nE 's/Location. (.*)$/\1/p')"
    - cp -R $CUDAQ_INSTALL_PREFIX/lib64/cmake/fmt $CUDAQ_INSTALL_PREFIX/lib/cmake
    - export ARTIFACTS_DIR=$PROJECT_SRCS_DIR/cuda-quantum/artifacts/wheels_$(uname -m)
    - mkdir -p $ARTIFACTS_DIR
    # MGMN SV  Simulator
    - cd $PROJECT_SRCS_DIR
    - echo "Checking out commit $CUDAQ_MGMN_SVSIM_COMMIT on $CI_SERVER_HOST/$CUDAQ_MGMN_SVSIM_REPO."
    - mkdir cudaq_mgmn_svsim && cd cudaq_mgmn_svsim && git init
    - git fetch --depth 1 https://$READ_ACCESS_TOKEN:$READ_ACCESS_TOKEN@$CI_SERVER_HOST/$CUDAQ_MGMN_SVSIM_REPO $CUDAQ_MGMN_SVSIM_COMMIT && git checkout FETCH_HEAD
    - (bash build.sh $READ_ACCESS_TOKEN && built=true) || built=false
    - cp -R artifacts/* $ARTIFACTS_DIR
    - if $built; then `exit 0`; else `exit 1`; fi
  allow_failure: true

Installer:
  rules:
    - if: $staged == "cuda-quantum-assets"
  stage: build
  dependencies: 
    - Metadata
  image: $CI_COMMIT_TITLE
  tags:
    - $runner
  interruptible: false
  artifacts:
    paths:
      - artifacts/**/mgmn_svsim/
    expire_in: 1 day
  script:
    - echo "Building mgmn_svsim for $(uname -m) architecture."
    - echo "Checking out commit $CUDAQ_MGMN_SVSIM_COMMIT on $CI_SERVER_HOST/$CUDAQ_MGMN_SVSIM_REPO."
    - mkdir cudaq_mgmn_svsim && cd cudaq_mgmn_svsim && git init
    - git fetch --depth 1 https://$READ_ACCESS_TOKEN:$READ_ACCESS_TOKEN@$CI_SERVER_HOST/$CUDAQ_MGMN_SVSIM_REPO $CUDAQ_MGMN_SVSIM_COMMIT && git checkout FETCH_HEAD
    - . /cuda-quantum/scripts/configure_build.sh
    - cp -R $CUDAQ_INSTALL_PREFIX/lib64/cmake/fmt $CUDAQ_INSTALL_PREFIX/lib/cmake
    - (bash build.sh $READ_ACCESS_TOKEN && built=true) || built=false
    - mkdir -p ../artifacts/$(uname -m)/mgmn_svsim && mv artifacts/* ../artifacts/$(uname -m)/mgmn_svsim
    - cd .. && rm -rf cudaq_mgmn_svsim
    - if $built; then `exit 0`; else `exit 1`; fi
  allow_failure: true

Docker Image:
  rules:
    - if: $staged == "cuda-quantum-dev"
  stage: build
  dependencies: 
    - Metadata
  image: $CI_COMMIT_TITLE
  parallel:
    matrix:
      - runner: [project/cuda-quantum-amd64, hostname/core-plab-e114-arm-glr02.nvidia.com]
  tags:
    - $runner
  interruptible: false
  artifacts:
    paths:
      - artifacts/**/mgmn_svsim/
    expire_in: 1 day
  script:
    - |
      # FIXME: remove this an instead update the mgpu build to properly work with alternative libs
      if [ ! -f "$CUQUANTUM_INSTALL_PREFIX/lib/libcustatevec.so" ]; then 
        ln -s "$CUQUANTUM_INSTALL_PREFIX/lib/libcustatevec.so.1" "$CUQUANTUM_INSTALL_PREFIX/lib/libcustatevec.so"
      fi
    - echo "Building mgmn_svsim for $(uname -m) architecture."
    - echo "Checking out commit $CUDAQ_MGMN_SVSIM_COMMIT on $CI_SERVER_HOST/$CUDAQ_MGMN_SVSIM_REPO."
    - mkdir cudaq_mgmn_svsim && cd cudaq_mgmn_svsim && git init
    - git fetch --depth 1 https://$READ_ACCESS_TOKEN:$READ_ACCESS_TOKEN@$CI_SERVER_HOST/$CUDAQ_MGMN_SVSIM_REPO $CUDAQ_MGMN_SVSIM_COMMIT && git checkout FETCH_HEAD
    - (bash build.sh $READ_ACCESS_TOKEN && built=true) || built=false
    - mkdir -p ../artifacts/$(uname -m)/mgmn_svsim && mv artifacts/* ../artifacts/$(uname -m)/mgmn_svsim
    - cd .. && rm -rf cudaq_mgmn_svsim
    - if $built; then `exit 0`; else `exit 1`; fi
  allow_failure: true

Push to GitHub:
  only:
    variables:
      - $staged
  stage: deploy
  interruptible: false
  script:
    - type -p curl >/dev/null || (apt-get update && apt-get install -y --no-install-recommends curl)
    - apt-get update && apt-get install -y --no-install-recommends zip ca-certificates && update-ca-certificates
    - curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg --connect-timeout 300 | dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
    - chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg
    - echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
    - apt-get update && apt-get install -y --no-install-recommends gh
    - upstream_url=https://github.com/NVIDIA/cuda-quantum && export GH_TOKEN=$GITHUB_TOKEN
    - if [ -z "$(git remote -v | grep upstream)" ]; 
      then git remote add upstream ${upstream_url}.git;
      fi
    - digest=`echo $CI_COMMIT_TITLE | rev | cut -d '@' -f 1 | rev`
    - build_info=`cat deployments/staging/$staged/${digest#sha256:}`
    - info_file=`echo "$build_info" | grep -s -o 'asset-name:\s*\S*' | rev | cut -d ' ' -f 1 | cut -d ':' -f 1 | rev`
    - release_id=`echo "$build_info" | grep -s -o 'release-id:\s*\S*' | rev | cut -d ' ' -f 1 | cut -d ':' -f 1 | rev`
    - source_commit=`echo "$build_info" | grep -s -o 'source-sha:\s*\S*' | rev | cut -d ' ' -f 1 | cut -d ':' -f 1 | rev`
    - versions=`gh release list -R $upstream_url --exclude-drafts --exclude-pre-releases | egrep -o "([0-9]{1,}\.)+[0-9]{1,}\S*" | sort -r -V`
    - latest_tag=`echo $versions | cut -d ' ' -f 1`
    - |
      if [ -z "$(gh release list -R $upstream_url | grep -s $release_id)" ];
      then
        # Check if the souce commit exists on the upstream repo
        if [ -n "$(gh repo view $upstream_url -b $source_commit | grep "Welcome to the CUDA-Q repository")" ]; then target=$source_commit
        else target=main
        fi
        rel_notes="This release draft is managed by cd processes."
        rel_notes+=$(echo "<br/>GitHub commit [$source_commit]($upstream_url/tree/$source_commit)")
        gh release create $release_id --title $release_id -R $upstream_url \
          --target $target --draft --prerelease \
          --generate-notes --notes-start-tag $latest_tag --notes "$rel_notes"
      fi
    - mkdir -p artifacts && cd artifacts
    - echo "$build_info" > "$info_file" && (echo -n "data-commit:" && echo " $CI_COMMIT_SHA") >> "$info_file"
    - (echo -n "gitlab-pipeline:" && echo " $CI_PIPELINE_URL") >> "$info_file"
    - if [ -d x86_64 ]; then mkdir -p x86_64/cudaq && cat "$info_file" > x86_64/cudaq/build_info.txt && zip -r sims_amd64.zip x86_64 && upload+="sims_amd64.zip "; fi
    - if [ -d aarch64 ]; then mkdir -p aarch64/cudaq && cat "$info_file" > aarch64/cudaq/build_info.txt && zip -r sims_aarch64.zip aarch64 && upload+="sims_aarch64.zip "; fi
    - if [ -d wheels_x86_64 ]; then zip -r wheels_x86_64.zip wheels_x86_64 && upload+="wheels_x86_64.zip "; fi
    - if [ -d wheels_aarch64 ]; then zip -r wheels_aarch64.zip wheels_aarch64 && upload+="wheels_aarch64.zip "; fi
    - echo $upload | xargs gh release upload $release_id -R $upstream_url --clobber "$info_file"
    - additional_notes="Release edited by [GitLab pipeline]($CI_PIPELINE_URL)." &&
      additional_notes+=$(echo "<br/>Triggered based on [this commit]($upstream_url/commit/$CI_COMMIT_SHA).")
    - gh release view $release_id --json body --jq .body > rel_notes.txt
    - header_length=`cat rel_notes.txt | grep -n "Release notes generated" | cut -d ':' -f 1`
    - (head -n $(($header_length - 1)) rel_notes.txt && echo -e "\n$additional_notes\n" && tail -n +$header_length rel_notes.txt) > new_notes.txt
    - gh release edit $release_id -R $upstream_url --notes-file new_notes.txt
